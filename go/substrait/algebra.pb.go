// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: substrait/algebra.proto

package substrait

import (
	extensions "github.com/substrait-io/substrait/go/substrait/extensions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AggregationPhase int32

const (
	AggregationPhase_AGGREGATION_PHASE_UNSPECIFIED                  AggregationPhase = 0
	AggregationPhase_AGGREGATION_PHASE_INITIAL_TO_INTERMEDIATE      AggregationPhase = 1
	AggregationPhase_AGGREGATION_PHASE_INTERMEDIATE_TO_INTERMEDIATE AggregationPhase = 2
	AggregationPhase_AGGREGATION_PHASE_INITIAL_TO_RESULT            AggregationPhase = 3
	AggregationPhase_AGGREGATION_PHASE_INTERMEDIATE_TO_RESULT       AggregationPhase = 4
)

// Enum value maps for AggregationPhase.
var (
	AggregationPhase_name = map[int32]string{
		0: "AGGREGATION_PHASE_UNSPECIFIED",
		1: "AGGREGATION_PHASE_INITIAL_TO_INTERMEDIATE",
		2: "AGGREGATION_PHASE_INTERMEDIATE_TO_INTERMEDIATE",
		3: "AGGREGATION_PHASE_INITIAL_TO_RESULT",
		4: "AGGREGATION_PHASE_INTERMEDIATE_TO_RESULT",
	}
	AggregationPhase_value = map[string]int32{
		"AGGREGATION_PHASE_UNSPECIFIED":                  0,
		"AGGREGATION_PHASE_INITIAL_TO_INTERMEDIATE":      1,
		"AGGREGATION_PHASE_INTERMEDIATE_TO_INTERMEDIATE": 2,
		"AGGREGATION_PHASE_INITIAL_TO_RESULT":            3,
		"AGGREGATION_PHASE_INTERMEDIATE_TO_RESULT":       4,
	}
)

func (x AggregationPhase) Enum() *AggregationPhase {
	p := new(AggregationPhase)
	*p = x
	return p
}

func (x AggregationPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregationPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_substrait_algebra_proto_enumTypes[0].Descriptor()
}

func (AggregationPhase) Type() protoreflect.EnumType {
	return &file_substrait_algebra_proto_enumTypes[0]
}

func (x AggregationPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregationPhase.Descriptor instead.
func (AggregationPhase) EnumDescriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{0}
}

type ReadRel_LocalFiles_FileOrFiles_FileFormat int32

const (
	ReadRel_LocalFiles_FileOrFiles_FILE_FORMAT_UNSPECIFIED ReadRel_LocalFiles_FileOrFiles_FileFormat = 0
	ReadRel_LocalFiles_FileOrFiles_FILE_FORMAT_PARQUET     ReadRel_LocalFiles_FileOrFiles_FileFormat = 1
)

// Enum value maps for ReadRel_LocalFiles_FileOrFiles_FileFormat.
var (
	ReadRel_LocalFiles_FileOrFiles_FileFormat_name = map[int32]string{
		0: "FILE_FORMAT_UNSPECIFIED",
		1: "FILE_FORMAT_PARQUET",
	}
	ReadRel_LocalFiles_FileOrFiles_FileFormat_value = map[string]int32{
		"FILE_FORMAT_UNSPECIFIED": 0,
		"FILE_FORMAT_PARQUET":     1,
	}
)

func (x ReadRel_LocalFiles_FileOrFiles_FileFormat) Enum() *ReadRel_LocalFiles_FileOrFiles_FileFormat {
	p := new(ReadRel_LocalFiles_FileOrFiles_FileFormat)
	*p = x
	return p
}

func (x ReadRel_LocalFiles_FileOrFiles_FileFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadRel_LocalFiles_FileOrFiles_FileFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_substrait_algebra_proto_enumTypes[1].Descriptor()
}

func (ReadRel_LocalFiles_FileOrFiles_FileFormat) Type() protoreflect.EnumType {
	return &file_substrait_algebra_proto_enumTypes[1]
}

func (x ReadRel_LocalFiles_FileOrFiles_FileFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadRel_LocalFiles_FileOrFiles_FileFormat.Descriptor instead.
func (ReadRel_LocalFiles_FileOrFiles_FileFormat) EnumDescriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{1, 3, 0, 0}
}

type JoinRel_JoinType int32

const (
	JoinRel_JOIN_TYPE_UNSPECIFIED JoinRel_JoinType = 0
	JoinRel_JOIN_TYPE_INNER       JoinRel_JoinType = 1
	JoinRel_JOIN_TYPE_OUTER       JoinRel_JoinType = 2
	JoinRel_JOIN_TYPE_LEFT        JoinRel_JoinType = 3
	JoinRel_JOIN_TYPE_RIGHT       JoinRel_JoinType = 4
	JoinRel_JOIN_TYPE_SEMI        JoinRel_JoinType = 5
	JoinRel_JOIN_TYPE_ANTI        JoinRel_JoinType = 6
	JoinRel_JOIN_TYPE_SINGLE      JoinRel_JoinType = 7
)

// Enum value maps for JoinRel_JoinType.
var (
	JoinRel_JoinType_name = map[int32]string{
		0: "JOIN_TYPE_UNSPECIFIED",
		1: "JOIN_TYPE_INNER",
		2: "JOIN_TYPE_OUTER",
		3: "JOIN_TYPE_LEFT",
		4: "JOIN_TYPE_RIGHT",
		5: "JOIN_TYPE_SEMI",
		6: "JOIN_TYPE_ANTI",
		7: "JOIN_TYPE_SINGLE",
	}
	JoinRel_JoinType_value = map[string]int32{
		"JOIN_TYPE_UNSPECIFIED": 0,
		"JOIN_TYPE_INNER":       1,
		"JOIN_TYPE_OUTER":       2,
		"JOIN_TYPE_LEFT":        3,
		"JOIN_TYPE_RIGHT":       4,
		"JOIN_TYPE_SEMI":        5,
		"JOIN_TYPE_ANTI":        6,
		"JOIN_TYPE_SINGLE":      7,
	}
)

func (x JoinRel_JoinType) Enum() *JoinRel_JoinType {
	p := new(JoinRel_JoinType)
	*p = x
	return p
}

func (x JoinRel_JoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinRel_JoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_substrait_algebra_proto_enumTypes[2].Descriptor()
}

func (JoinRel_JoinType) Type() protoreflect.EnumType {
	return &file_substrait_algebra_proto_enumTypes[2]
}

func (x JoinRel_JoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinRel_JoinType.Descriptor instead.
func (JoinRel_JoinType) EnumDescriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{3, 0}
}

type SetRel_SetOp int32

const (
	SetRel_SET_OP_UNSPECIFIED           SetRel_SetOp = 0
	SetRel_SET_OP_MINUS_PRIMARY         SetRel_SetOp = 1
	SetRel_SET_OP_MINUS_MULTISET        SetRel_SetOp = 2
	SetRel_SET_OP_INTERSECTION_PRIMARY  SetRel_SetOp = 3
	SetRel_SET_OP_INTERSECTION_MULTISET SetRel_SetOp = 4
	SetRel_SET_OP_UNION_DISTINCT        SetRel_SetOp = 5
	SetRel_SET_OP_UNION_ALL             SetRel_SetOp = 6
)

// Enum value maps for SetRel_SetOp.
var (
	SetRel_SetOp_name = map[int32]string{
		0: "SET_OP_UNSPECIFIED",
		1: "SET_OP_MINUS_PRIMARY",
		2: "SET_OP_MINUS_MULTISET",
		3: "SET_OP_INTERSECTION_PRIMARY",
		4: "SET_OP_INTERSECTION_MULTISET",
		5: "SET_OP_UNION_DISTINCT",
		6: "SET_OP_UNION_ALL",
	}
	SetRel_SetOp_value = map[string]int32{
		"SET_OP_UNSPECIFIED":           0,
		"SET_OP_MINUS_PRIMARY":         1,
		"SET_OP_MINUS_MULTISET":        2,
		"SET_OP_INTERSECTION_PRIMARY":  3,
		"SET_OP_INTERSECTION_MULTISET": 4,
		"SET_OP_UNION_DISTINCT":        5,
		"SET_OP_UNION_ALL":             6,
	}
)

func (x SetRel_SetOp) Enum() *SetRel_SetOp {
	p := new(SetRel_SetOp)
	*p = x
	return p
}

func (x SetRel_SetOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetRel_SetOp) Descriptor() protoreflect.EnumDescriptor {
	return file_substrait_algebra_proto_enumTypes[3].Descriptor()
}

func (SetRel_SetOp) Type() protoreflect.EnumType {
	return &file_substrait_algebra_proto_enumTypes[3]
}

func (x SetRel_SetOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetRel_SetOp.Descriptor instead.
func (SetRel_SetOp) EnumDescriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{9, 0}
}

type Expression_Subquery_SetPredicate_PredicateOp int32

const (
	Expression_Subquery_SetPredicate_PREDICATE_OP_UNSPECIFIED Expression_Subquery_SetPredicate_PredicateOp = 0
	Expression_Subquery_SetPredicate_PREDICATE_OP_EXISTS      Expression_Subquery_SetPredicate_PredicateOp = 1
	Expression_Subquery_SetPredicate_PREDICATE_OP_UNIQUE      Expression_Subquery_SetPredicate_PredicateOp = 2
)

// Enum value maps for Expression_Subquery_SetPredicate_PredicateOp.
var (
	Expression_Subquery_SetPredicate_PredicateOp_name = map[int32]string{
		0: "PREDICATE_OP_UNSPECIFIED",
		1: "PREDICATE_OP_EXISTS",
		2: "PREDICATE_OP_UNIQUE",
	}
	Expression_Subquery_SetPredicate_PredicateOp_value = map[string]int32{
		"PREDICATE_OP_UNSPECIFIED": 0,
		"PREDICATE_OP_EXISTS":      1,
		"PREDICATE_OP_UNIQUE":      2,
	}
)

func (x Expression_Subquery_SetPredicate_PredicateOp) Enum() *Expression_Subquery_SetPredicate_PredicateOp {
	p := new(Expression_Subquery_SetPredicate_PredicateOp)
	*p = x
	return p
}

func (x Expression_Subquery_SetPredicate_PredicateOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Expression_Subquery_SetPredicate_PredicateOp) Descriptor() protoreflect.EnumDescriptor {
	return file_substrait_algebra_proto_enumTypes[4].Descriptor()
}

func (Expression_Subquery_SetPredicate_PredicateOp) Type() protoreflect.EnumType {
	return &file_substrait_algebra_proto_enumTypes[4]
}

func (x Expression_Subquery_SetPredicate_PredicateOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Expression_Subquery_SetPredicate_PredicateOp.Descriptor instead.
func (Expression_Subquery_SetPredicate_PredicateOp) EnumDescriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 13, 2, 0}
}

type Expression_Subquery_SetComparison_ComparisonOp int32

const (
	Expression_Subquery_SetComparison_COMPARISON_OP_UNSPECIFIED Expression_Subquery_SetComparison_ComparisonOp = 0
	Expression_Subquery_SetComparison_COMPARISON_OP_EQ          Expression_Subquery_SetComparison_ComparisonOp = 1
	Expression_Subquery_SetComparison_COMPARISON_OP_NE          Expression_Subquery_SetComparison_ComparisonOp = 2
	Expression_Subquery_SetComparison_COMPARISON_OP_LT          Expression_Subquery_SetComparison_ComparisonOp = 3
	Expression_Subquery_SetComparison_COMPARISON_OP_GT          Expression_Subquery_SetComparison_ComparisonOp = 4
	Expression_Subquery_SetComparison_COMPARISON_OP_LE          Expression_Subquery_SetComparison_ComparisonOp = 5
	Expression_Subquery_SetComparison_COMPARISON_OP_GE          Expression_Subquery_SetComparison_ComparisonOp = 6
)

// Enum value maps for Expression_Subquery_SetComparison_ComparisonOp.
var (
	Expression_Subquery_SetComparison_ComparisonOp_name = map[int32]string{
		0: "COMPARISON_OP_UNSPECIFIED",
		1: "COMPARISON_OP_EQ",
		2: "COMPARISON_OP_NE",
		3: "COMPARISON_OP_LT",
		4: "COMPARISON_OP_GT",
		5: "COMPARISON_OP_LE",
		6: "COMPARISON_OP_GE",
	}
	Expression_Subquery_SetComparison_ComparisonOp_value = map[string]int32{
		"COMPARISON_OP_UNSPECIFIED": 0,
		"COMPARISON_OP_EQ":          1,
		"COMPARISON_OP_NE":          2,
		"COMPARISON_OP_LT":          3,
		"COMPARISON_OP_GT":          4,
		"COMPARISON_OP_LE":          5,
		"COMPARISON_OP_GE":          6,
	}
)

func (x Expression_Subquery_SetComparison_ComparisonOp) Enum() *Expression_Subquery_SetComparison_ComparisonOp {
	p := new(Expression_Subquery_SetComparison_ComparisonOp)
	*p = x
	return p
}

func (x Expression_Subquery_SetComparison_ComparisonOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Expression_Subquery_SetComparison_ComparisonOp) Descriptor() protoreflect.EnumDescriptor {
	return file_substrait_algebra_proto_enumTypes[5].Descriptor()
}

func (Expression_Subquery_SetComparison_ComparisonOp) Type() protoreflect.EnumType {
	return &file_substrait_algebra_proto_enumTypes[5]
}

func (x Expression_Subquery_SetComparison_ComparisonOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Expression_Subquery_SetComparison_ComparisonOp.Descriptor instead.
func (Expression_Subquery_SetComparison_ComparisonOp) EnumDescriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 13, 3, 0}
}

type Expression_Subquery_SetComparison_ReductionOp int32

const (
	Expression_Subquery_SetComparison_REDUCTION_OP_UNSPECIFIED Expression_Subquery_SetComparison_ReductionOp = 0
	Expression_Subquery_SetComparison_REDUCTION_OP_ANY         Expression_Subquery_SetComparison_ReductionOp = 1
	Expression_Subquery_SetComparison_REDUCTION_OP_ALL         Expression_Subquery_SetComparison_ReductionOp = 2
)

// Enum value maps for Expression_Subquery_SetComparison_ReductionOp.
var (
	Expression_Subquery_SetComparison_ReductionOp_name = map[int32]string{
		0: "REDUCTION_OP_UNSPECIFIED",
		1: "REDUCTION_OP_ANY",
		2: "REDUCTION_OP_ALL",
	}
	Expression_Subquery_SetComparison_ReductionOp_value = map[string]int32{
		"REDUCTION_OP_UNSPECIFIED": 0,
		"REDUCTION_OP_ANY":         1,
		"REDUCTION_OP_ALL":         2,
	}
)

func (x Expression_Subquery_SetComparison_ReductionOp) Enum() *Expression_Subquery_SetComparison_ReductionOp {
	p := new(Expression_Subquery_SetComparison_ReductionOp)
	*p = x
	return p
}

func (x Expression_Subquery_SetComparison_ReductionOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Expression_Subquery_SetComparison_ReductionOp) Descriptor() protoreflect.EnumDescriptor {
	return file_substrait_algebra_proto_enumTypes[6].Descriptor()
}

func (Expression_Subquery_SetComparison_ReductionOp) Type() protoreflect.EnumType {
	return &file_substrait_algebra_proto_enumTypes[6]
}

func (x Expression_Subquery_SetComparison_ReductionOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Expression_Subquery_SetComparison_ReductionOp.Descriptor instead.
func (Expression_Subquery_SetComparison_ReductionOp) EnumDescriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 13, 3, 1}
}

type SortField_SortDirection int32

const (
	SortField_SORT_DIRECTION_UNSPECIFIED      SortField_SortDirection = 0
	SortField_SORT_DIRECTION_ASC_NULLS_FIRST  SortField_SortDirection = 1
	SortField_SORT_DIRECTION_ASC_NULLS_LAST   SortField_SortDirection = 2
	SortField_SORT_DIRECTION_DESC_NULLS_FIRST SortField_SortDirection = 3
	SortField_SORT_DIRECTION_DESC_NULLS_LAST  SortField_SortDirection = 4
	SortField_SORT_DIRECTION_CLUSTERED        SortField_SortDirection = 5
)

// Enum value maps for SortField_SortDirection.
var (
	SortField_SortDirection_name = map[int32]string{
		0: "SORT_DIRECTION_UNSPECIFIED",
		1: "SORT_DIRECTION_ASC_NULLS_FIRST",
		2: "SORT_DIRECTION_ASC_NULLS_LAST",
		3: "SORT_DIRECTION_DESC_NULLS_FIRST",
		4: "SORT_DIRECTION_DESC_NULLS_LAST",
		5: "SORT_DIRECTION_CLUSTERED",
	}
	SortField_SortDirection_value = map[string]int32{
		"SORT_DIRECTION_UNSPECIFIED":      0,
		"SORT_DIRECTION_ASC_NULLS_FIRST":  1,
		"SORT_DIRECTION_ASC_NULLS_LAST":   2,
		"SORT_DIRECTION_DESC_NULLS_FIRST": 3,
		"SORT_DIRECTION_DESC_NULLS_LAST":  4,
		"SORT_DIRECTION_CLUSTERED":        5,
	}
)

func (x SortField_SortDirection) Enum() *SortField_SortDirection {
	p := new(SortField_SortDirection)
	*p = x
	return p
}

func (x SortField_SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortField_SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_substrait_algebra_proto_enumTypes[7].Descriptor()
}

func (SortField_SortDirection) Type() protoreflect.EnumType {
	return &file_substrait_algebra_proto_enumTypes[7]
}

func (x SortField_SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortField_SortDirection.Descriptor instead.
func (SortField_SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{17, 0}
}

type RelCommon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EmitKind:
	//	*RelCommon_Direct_
	//	*RelCommon_Emit_
	EmitKind          isRelCommon_EmitKind          `protobuf_oneof:"emit_kind"`
	Hint              *RelCommon_Hint               `protobuf:"bytes,3,opt,name=hint,proto3" json:"hint,omitempty"`
	AdvancedExtension *extensions.AdvancedExtension `protobuf:"bytes,4,opt,name=advanced_extension,json=advancedExtension,proto3" json:"advanced_extension,omitempty"`
}

func (x *RelCommon) Reset() {
	*x = RelCommon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelCommon) ProtoMessage() {}

func (x *RelCommon) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelCommon.ProtoReflect.Descriptor instead.
func (*RelCommon) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{0}
}

func (m *RelCommon) GetEmitKind() isRelCommon_EmitKind {
	if m != nil {
		return m.EmitKind
	}
	return nil
}

func (x *RelCommon) GetDirect() *RelCommon_Direct {
	if x, ok := x.GetEmitKind().(*RelCommon_Direct_); ok {
		return x.Direct
	}
	return nil
}

func (x *RelCommon) GetEmit() *RelCommon_Emit {
	if x, ok := x.GetEmitKind().(*RelCommon_Emit_); ok {
		return x.Emit
	}
	return nil
}

func (x *RelCommon) GetHint() *RelCommon_Hint {
	if x != nil {
		return x.Hint
	}
	return nil
}

func (x *RelCommon) GetAdvancedExtension() *extensions.AdvancedExtension {
	if x != nil {
		return x.AdvancedExtension
	}
	return nil
}

type isRelCommon_EmitKind interface {
	isRelCommon_EmitKind()
}

type RelCommon_Direct_ struct {
	Direct *RelCommon_Direct `protobuf:"bytes,1,opt,name=direct,proto3,oneof"`
}

type RelCommon_Emit_ struct {
	Emit *RelCommon_Emit `protobuf:"bytes,2,opt,name=emit,proto3,oneof"`
}

func (*RelCommon_Direct_) isRelCommon_EmitKind() {}

func (*RelCommon_Emit_) isRelCommon_EmitKind() {}

type ReadRel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common            *RelCommon                    `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	BaseSchema        *NamedStruct                  `protobuf:"bytes,2,opt,name=base_schema,json=baseSchema,proto3" json:"base_schema,omitempty"`
	Filter            *Expression                   `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Projection        *Expression_MaskExpression    `protobuf:"bytes,4,opt,name=projection,proto3" json:"projection,omitempty"`
	AdvancedExtension *extensions.AdvancedExtension `protobuf:"bytes,10,opt,name=advanced_extension,json=advancedExtension,proto3" json:"advanced_extension,omitempty"`
	// Types that are assignable to ReadType:
	//	*ReadRel_VirtualTable_
	//	*ReadRel_LocalFiles_
	//	*ReadRel_NamedTable_
	//	*ReadRel_ExtensionTable_
	ReadType isReadRel_ReadType `protobuf_oneof:"read_type"`
}

func (x *ReadRel) Reset() {
	*x = ReadRel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRel) ProtoMessage() {}

func (x *ReadRel) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRel.ProtoReflect.Descriptor instead.
func (*ReadRel) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{1}
}

func (x *ReadRel) GetCommon() *RelCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ReadRel) GetBaseSchema() *NamedStruct {
	if x != nil {
		return x.BaseSchema
	}
	return nil
}

func (x *ReadRel) GetFilter() *Expression {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ReadRel) GetProjection() *Expression_MaskExpression {
	if x != nil {
		return x.Projection
	}
	return nil
}

func (x *ReadRel) GetAdvancedExtension() *extensions.AdvancedExtension {
	if x != nil {
		return x.AdvancedExtension
	}
	return nil
}

func (m *ReadRel) GetReadType() isReadRel_ReadType {
	if m != nil {
		return m.ReadType
	}
	return nil
}

func (x *ReadRel) GetVirtualTable() *ReadRel_VirtualTable {
	if x, ok := x.GetReadType().(*ReadRel_VirtualTable_); ok {
		return x.VirtualTable
	}
	return nil
}

func (x *ReadRel) GetLocalFiles() *ReadRel_LocalFiles {
	if x, ok := x.GetReadType().(*ReadRel_LocalFiles_); ok {
		return x.LocalFiles
	}
	return nil
}

func (x *ReadRel) GetNamedTable() *ReadRel_NamedTable {
	if x, ok := x.GetReadType().(*ReadRel_NamedTable_); ok {
		return x.NamedTable
	}
	return nil
}

func (x *ReadRel) GetExtensionTable() *ReadRel_ExtensionTable {
	if x, ok := x.GetReadType().(*ReadRel_ExtensionTable_); ok {
		return x.ExtensionTable
	}
	return nil
}

type isReadRel_ReadType interface {
	isReadRel_ReadType()
}

type ReadRel_VirtualTable_ struct {
	VirtualTable *ReadRel_VirtualTable `protobuf:"bytes,5,opt,name=virtual_table,json=virtualTable,proto3,oneof"`
}

type ReadRel_LocalFiles_ struct {
	LocalFiles *ReadRel_LocalFiles `protobuf:"bytes,6,opt,name=local_files,json=localFiles,proto3,oneof"`
}

type ReadRel_NamedTable_ struct {
	NamedTable *ReadRel_NamedTable `protobuf:"bytes,7,opt,name=named_table,json=namedTable,proto3,oneof"`
}

type ReadRel_ExtensionTable_ struct {
	ExtensionTable *ReadRel_ExtensionTable `protobuf:"bytes,8,opt,name=extension_table,json=extensionTable,proto3,oneof"`
}

func (*ReadRel_VirtualTable_) isReadRel_ReadType() {}

func (*ReadRel_LocalFiles_) isReadRel_ReadType() {}

func (*ReadRel_NamedTable_) isReadRel_ReadType() {}

func (*ReadRel_ExtensionTable_) isReadRel_ReadType() {}

type ProjectRel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common            *RelCommon                    `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Input             *Rel                          `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Expressions       []*Expression                 `protobuf:"bytes,3,rep,name=expressions,proto3" json:"expressions,omitempty"`
	AdvancedExtension *extensions.AdvancedExtension `protobuf:"bytes,10,opt,name=advanced_extension,json=advancedExtension,proto3" json:"advanced_extension,omitempty"`
}

func (x *ProjectRel) Reset() {
	*x = ProjectRel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectRel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectRel) ProtoMessage() {}

func (x *ProjectRel) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectRel.ProtoReflect.Descriptor instead.
func (*ProjectRel) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{2}
}

func (x *ProjectRel) GetCommon() *RelCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ProjectRel) GetInput() *Rel {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ProjectRel) GetExpressions() []*Expression {
	if x != nil {
		return x.Expressions
	}
	return nil
}

func (x *ProjectRel) GetAdvancedExtension() *extensions.AdvancedExtension {
	if x != nil {
		return x.AdvancedExtension
	}
	return nil
}

type JoinRel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common            *RelCommon                    `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Left              *Rel                          `protobuf:"bytes,2,opt,name=left,proto3" json:"left,omitempty"`
	Right             *Rel                          `protobuf:"bytes,3,opt,name=right,proto3" json:"right,omitempty"`
	Expression        *Expression                   `protobuf:"bytes,4,opt,name=expression,proto3" json:"expression,omitempty"`
	PostJoinFilter    *Expression                   `protobuf:"bytes,5,opt,name=post_join_filter,json=postJoinFilter,proto3" json:"post_join_filter,omitempty"`
	Type              JoinRel_JoinType              `protobuf:"varint,6,opt,name=type,proto3,enum=substrait.JoinRel_JoinType" json:"type,omitempty"`
	AdvancedExtension *extensions.AdvancedExtension `protobuf:"bytes,10,opt,name=advanced_extension,json=advancedExtension,proto3" json:"advanced_extension,omitempty"`
}

func (x *JoinRel) Reset() {
	*x = JoinRel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRel) ProtoMessage() {}

func (x *JoinRel) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRel.ProtoReflect.Descriptor instead.
func (*JoinRel) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{3}
}

func (x *JoinRel) GetCommon() *RelCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *JoinRel) GetLeft() *Rel {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *JoinRel) GetRight() *Rel {
	if x != nil {
		return x.Right
	}
	return nil
}

func (x *JoinRel) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *JoinRel) GetPostJoinFilter() *Expression {
	if x != nil {
		return x.PostJoinFilter
	}
	return nil
}

func (x *JoinRel) GetType() JoinRel_JoinType {
	if x != nil {
		return x.Type
	}
	return JoinRel_JOIN_TYPE_UNSPECIFIED
}

func (x *JoinRel) GetAdvancedExtension() *extensions.AdvancedExtension {
	if x != nil {
		return x.AdvancedExtension
	}
	return nil
}

type CrossRel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common            *RelCommon                    `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Left              *Rel                          `protobuf:"bytes,2,opt,name=left,proto3" json:"left,omitempty"`
	Right             *Rel                          `protobuf:"bytes,3,opt,name=right,proto3" json:"right,omitempty"`
	AdvancedExtension *extensions.AdvancedExtension `protobuf:"bytes,10,opt,name=advanced_extension,json=advancedExtension,proto3" json:"advanced_extension,omitempty"`
}

func (x *CrossRel) Reset() {
	*x = CrossRel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossRel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossRel) ProtoMessage() {}

func (x *CrossRel) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossRel.ProtoReflect.Descriptor instead.
func (*CrossRel) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{4}
}

func (x *CrossRel) GetCommon() *RelCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *CrossRel) GetLeft() *Rel {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *CrossRel) GetRight() *Rel {
	if x != nil {
		return x.Right
	}
	return nil
}

func (x *CrossRel) GetAdvancedExtension() *extensions.AdvancedExtension {
	if x != nil {
		return x.AdvancedExtension
	}
	return nil
}

type FetchRel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common            *RelCommon                    `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Input             *Rel                          `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Offset            int64                         `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Count             int64                         `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	AdvancedExtension *extensions.AdvancedExtension `protobuf:"bytes,10,opt,name=advanced_extension,json=advancedExtension,proto3" json:"advanced_extension,omitempty"`
}

func (x *FetchRel) Reset() {
	*x = FetchRel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchRel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRel) ProtoMessage() {}

func (x *FetchRel) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRel.ProtoReflect.Descriptor instead.
func (*FetchRel) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{5}
}

func (x *FetchRel) GetCommon() *RelCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *FetchRel) GetInput() *Rel {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *FetchRel) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FetchRel) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FetchRel) GetAdvancedExtension() *extensions.AdvancedExtension {
	if x != nil {
		return x.AdvancedExtension
	}
	return nil
}

type AggregateRel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common            *RelCommon                    `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Input             *Rel                          `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Groupings         []*AggregateRel_Grouping      `protobuf:"bytes,3,rep,name=groupings,proto3" json:"groupings,omitempty"`
	Measures          []*AggregateRel_Measure       `protobuf:"bytes,4,rep,name=measures,proto3" json:"measures,omitempty"`
	AdvancedExtension *extensions.AdvancedExtension `protobuf:"bytes,10,opt,name=advanced_extension,json=advancedExtension,proto3" json:"advanced_extension,omitempty"`
}

func (x *AggregateRel) Reset() {
	*x = AggregateRel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateRel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateRel) ProtoMessage() {}

func (x *AggregateRel) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateRel.ProtoReflect.Descriptor instead.
func (*AggregateRel) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{6}
}

func (x *AggregateRel) GetCommon() *RelCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *AggregateRel) GetInput() *Rel {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *AggregateRel) GetGroupings() []*AggregateRel_Grouping {
	if x != nil {
		return x.Groupings
	}
	return nil
}

func (x *AggregateRel) GetMeasures() []*AggregateRel_Measure {
	if x != nil {
		return x.Measures
	}
	return nil
}

func (x *AggregateRel) GetAdvancedExtension() *extensions.AdvancedExtension {
	if x != nil {
		return x.AdvancedExtension
	}
	return nil
}

type SortRel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common            *RelCommon                    `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Input             *Rel                          `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Sorts             []*SortField                  `protobuf:"bytes,3,rep,name=sorts,proto3" json:"sorts,omitempty"`
	AdvancedExtension *extensions.AdvancedExtension `protobuf:"bytes,10,opt,name=advanced_extension,json=advancedExtension,proto3" json:"advanced_extension,omitempty"`
}

func (x *SortRel) Reset() {
	*x = SortRel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortRel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortRel) ProtoMessage() {}

func (x *SortRel) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortRel.ProtoReflect.Descriptor instead.
func (*SortRel) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{7}
}

func (x *SortRel) GetCommon() *RelCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *SortRel) GetInput() *Rel {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *SortRel) GetSorts() []*SortField {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *SortRel) GetAdvancedExtension() *extensions.AdvancedExtension {
	if x != nil {
		return x.AdvancedExtension
	}
	return nil
}

type FilterRel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common            *RelCommon                    `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Input             *Rel                          `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Condition         *Expression                   `protobuf:"bytes,3,opt,name=condition,proto3" json:"condition,omitempty"`
	AdvancedExtension *extensions.AdvancedExtension `protobuf:"bytes,10,opt,name=advanced_extension,json=advancedExtension,proto3" json:"advanced_extension,omitempty"`
}

func (x *FilterRel) Reset() {
	*x = FilterRel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterRel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRel) ProtoMessage() {}

func (x *FilterRel) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRel.ProtoReflect.Descriptor instead.
func (*FilterRel) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{8}
}

func (x *FilterRel) GetCommon() *RelCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *FilterRel) GetInput() *Rel {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *FilterRel) GetCondition() *Expression {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *FilterRel) GetAdvancedExtension() *extensions.AdvancedExtension {
	if x != nil {
		return x.AdvancedExtension
	}
	return nil
}

type SetRel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common            *RelCommon                    `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Inputs            []*Rel                        `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Op                SetRel_SetOp                  `protobuf:"varint,3,opt,name=op,proto3,enum=substrait.SetRel_SetOp" json:"op,omitempty"`
	AdvancedExtension *extensions.AdvancedExtension `protobuf:"bytes,10,opt,name=advanced_extension,json=advancedExtension,proto3" json:"advanced_extension,omitempty"`
}

func (x *SetRel) Reset() {
	*x = SetRel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRel) ProtoMessage() {}

func (x *SetRel) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRel.ProtoReflect.Descriptor instead.
func (*SetRel) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{9}
}

func (x *SetRel) GetCommon() *RelCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *SetRel) GetInputs() []*Rel {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *SetRel) GetOp() SetRel_SetOp {
	if x != nil {
		return x.Op
	}
	return SetRel_SET_OP_UNSPECIFIED
}

func (x *SetRel) GetAdvancedExtension() *extensions.AdvancedExtension {
	if x != nil {
		return x.AdvancedExtension
	}
	return nil
}

// Stub to support extension with a single input
type ExtensionSingleRel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *RelCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Input  *Rel       `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Detail *anypb.Any `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *ExtensionSingleRel) Reset() {
	*x = ExtensionSingleRel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionSingleRel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionSingleRel) ProtoMessage() {}

func (x *ExtensionSingleRel) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionSingleRel.ProtoReflect.Descriptor instead.
func (*ExtensionSingleRel) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{10}
}

func (x *ExtensionSingleRel) GetCommon() *RelCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ExtensionSingleRel) GetInput() *Rel {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ExtensionSingleRel) GetDetail() *anypb.Any {
	if x != nil {
		return x.Detail
	}
	return nil
}

// Stub to support extension with a zero inputs
type ExtensionLeafRel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *RelCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Detail *anypb.Any `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *ExtensionLeafRel) Reset() {
	*x = ExtensionLeafRel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionLeafRel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionLeafRel) ProtoMessage() {}

func (x *ExtensionLeafRel) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionLeafRel.ProtoReflect.Descriptor instead.
func (*ExtensionLeafRel) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{11}
}

func (x *ExtensionLeafRel) GetCommon() *RelCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ExtensionLeafRel) GetDetail() *anypb.Any {
	if x != nil {
		return x.Detail
	}
	return nil
}

// Stub to support extension with multiple inputs
type ExtensionMultiRel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *RelCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Inputs []*Rel     `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Detail *anypb.Any `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *ExtensionMultiRel) Reset() {
	*x = ExtensionMultiRel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionMultiRel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionMultiRel) ProtoMessage() {}

func (x *ExtensionMultiRel) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionMultiRel.ProtoReflect.Descriptor instead.
func (*ExtensionMultiRel) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{12}
}

func (x *ExtensionMultiRel) GetCommon() *RelCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ExtensionMultiRel) GetInputs() []*Rel {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *ExtensionMultiRel) GetDetail() *anypb.Any {
	if x != nil {
		return x.Detail
	}
	return nil
}

// A redistribution operation
type ExchangeRel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common         *RelCommon                    `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Input          *Rel                          `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	PartitionCount int32                         `protobuf:"varint,3,opt,name=partition_count,json=partitionCount,proto3" json:"partition_count,omitempty"`
	Targets        []*ExchangeRel_ExchangeTarget `protobuf:"bytes,4,rep,name=targets,proto3" json:"targets,omitempty"`
	// Types that are assignable to ExchangeKind:
	//	*ExchangeRel_ScatterByFields
	//	*ExchangeRel_SingleTarget
	//	*ExchangeRel_MultiTarget
	//	*ExchangeRel_RoundRobin_
	//	*ExchangeRel_Broadcast_
	ExchangeKind      isExchangeRel_ExchangeKind    `protobuf_oneof:"exchange_kind"`
	AdvancedExtension *extensions.AdvancedExtension `protobuf:"bytes,10,opt,name=advanced_extension,json=advancedExtension,proto3" json:"advanced_extension,omitempty"`
}

func (x *ExchangeRel) Reset() {
	*x = ExchangeRel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRel) ProtoMessage() {}

func (x *ExchangeRel) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRel.ProtoReflect.Descriptor instead.
func (*ExchangeRel) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{13}
}

func (x *ExchangeRel) GetCommon() *RelCommon {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ExchangeRel) GetInput() *Rel {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ExchangeRel) GetPartitionCount() int32 {
	if x != nil {
		return x.PartitionCount
	}
	return 0
}

func (x *ExchangeRel) GetTargets() []*ExchangeRel_ExchangeTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (m *ExchangeRel) GetExchangeKind() isExchangeRel_ExchangeKind {
	if m != nil {
		return m.ExchangeKind
	}
	return nil
}

func (x *ExchangeRel) GetScatterByFields() *ExchangeRel_ScatterFields {
	if x, ok := x.GetExchangeKind().(*ExchangeRel_ScatterByFields); ok {
		return x.ScatterByFields
	}
	return nil
}

func (x *ExchangeRel) GetSingleTarget() *ExchangeRel_SingleBucketExpression {
	if x, ok := x.GetExchangeKind().(*ExchangeRel_SingleTarget); ok {
		return x.SingleTarget
	}
	return nil
}

func (x *ExchangeRel) GetMultiTarget() *ExchangeRel_MultiBucketExpression {
	if x, ok := x.GetExchangeKind().(*ExchangeRel_MultiTarget); ok {
		return x.MultiTarget
	}
	return nil
}

func (x *ExchangeRel) GetRoundRobin() *ExchangeRel_RoundRobin {
	if x, ok := x.GetExchangeKind().(*ExchangeRel_RoundRobin_); ok {
		return x.RoundRobin
	}
	return nil
}

func (x *ExchangeRel) GetBroadcast() *ExchangeRel_Broadcast {
	if x, ok := x.GetExchangeKind().(*ExchangeRel_Broadcast_); ok {
		return x.Broadcast
	}
	return nil
}

func (x *ExchangeRel) GetAdvancedExtension() *extensions.AdvancedExtension {
	if x != nil {
		return x.AdvancedExtension
	}
	return nil
}

type isExchangeRel_ExchangeKind interface {
	isExchangeRel_ExchangeKind()
}

type ExchangeRel_ScatterByFields struct {
	ScatterByFields *ExchangeRel_ScatterFields `protobuf:"bytes,5,opt,name=scatter_by_fields,json=scatterByFields,proto3,oneof"`
}

type ExchangeRel_SingleTarget struct {
	SingleTarget *ExchangeRel_SingleBucketExpression `protobuf:"bytes,6,opt,name=single_target,json=singleTarget,proto3,oneof"`
}

type ExchangeRel_MultiTarget struct {
	MultiTarget *ExchangeRel_MultiBucketExpression `protobuf:"bytes,7,opt,name=multi_target,json=multiTarget,proto3,oneof"`
}

type ExchangeRel_RoundRobin_ struct {
	RoundRobin *ExchangeRel_RoundRobin `protobuf:"bytes,8,opt,name=round_robin,json=roundRobin,proto3,oneof"`
}

type ExchangeRel_Broadcast_ struct {
	Broadcast *ExchangeRel_Broadcast `protobuf:"bytes,9,opt,name=broadcast,proto3,oneof"`
}

func (*ExchangeRel_ScatterByFields) isExchangeRel_ExchangeKind() {}

func (*ExchangeRel_SingleTarget) isExchangeRel_ExchangeKind() {}

func (*ExchangeRel_MultiTarget) isExchangeRel_ExchangeKind() {}

func (*ExchangeRel_RoundRobin_) isExchangeRel_ExchangeKind() {}

func (*ExchangeRel_Broadcast_) isExchangeRel_ExchangeKind() {}

// A relation with output field names.
//
// This is for use at the root of a `Rel` tree.
type RelRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A relation
	Input *Rel `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// Field names in depth-first order
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *RelRoot) Reset() {
	*x = RelRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelRoot) ProtoMessage() {}

func (x *RelRoot) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelRoot.ProtoReflect.Descriptor instead.
func (*RelRoot) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{14}
}

func (x *RelRoot) GetInput() *Rel {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *RelRoot) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type Rel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RelType:
	//	*Rel_Read
	//	*Rel_Filter
	//	*Rel_Fetch
	//	*Rel_Aggregate
	//	*Rel_Sort
	//	*Rel_Join
	//	*Rel_Project
	//	*Rel_Set
	//	*Rel_ExtensionSingle
	//	*Rel_ExtensionMulti
	//	*Rel_ExtensionLeaf
	//	*Rel_Cross
	RelType isRel_RelType `protobuf_oneof:"rel_type"`
}

func (x *Rel) Reset() {
	*x = Rel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rel) ProtoMessage() {}

func (x *Rel) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rel.ProtoReflect.Descriptor instead.
func (*Rel) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{15}
}

func (m *Rel) GetRelType() isRel_RelType {
	if m != nil {
		return m.RelType
	}
	return nil
}

func (x *Rel) GetRead() *ReadRel {
	if x, ok := x.GetRelType().(*Rel_Read); ok {
		return x.Read
	}
	return nil
}

func (x *Rel) GetFilter() *FilterRel {
	if x, ok := x.GetRelType().(*Rel_Filter); ok {
		return x.Filter
	}
	return nil
}

func (x *Rel) GetFetch() *FetchRel {
	if x, ok := x.GetRelType().(*Rel_Fetch); ok {
		return x.Fetch
	}
	return nil
}

func (x *Rel) GetAggregate() *AggregateRel {
	if x, ok := x.GetRelType().(*Rel_Aggregate); ok {
		return x.Aggregate
	}
	return nil
}

func (x *Rel) GetSort() *SortRel {
	if x, ok := x.GetRelType().(*Rel_Sort); ok {
		return x.Sort
	}
	return nil
}

func (x *Rel) GetJoin() *JoinRel {
	if x, ok := x.GetRelType().(*Rel_Join); ok {
		return x.Join
	}
	return nil
}

func (x *Rel) GetProject() *ProjectRel {
	if x, ok := x.GetRelType().(*Rel_Project); ok {
		return x.Project
	}
	return nil
}

func (x *Rel) GetSet() *SetRel {
	if x, ok := x.GetRelType().(*Rel_Set); ok {
		return x.Set
	}
	return nil
}

func (x *Rel) GetExtensionSingle() *ExtensionSingleRel {
	if x, ok := x.GetRelType().(*Rel_ExtensionSingle); ok {
		return x.ExtensionSingle
	}
	return nil
}

func (x *Rel) GetExtensionMulti() *ExtensionMultiRel {
	if x, ok := x.GetRelType().(*Rel_ExtensionMulti); ok {
		return x.ExtensionMulti
	}
	return nil
}

func (x *Rel) GetExtensionLeaf() *ExtensionLeafRel {
	if x, ok := x.GetRelType().(*Rel_ExtensionLeaf); ok {
		return x.ExtensionLeaf
	}
	return nil
}

func (x *Rel) GetCross() *CrossRel {
	if x, ok := x.GetRelType().(*Rel_Cross); ok {
		return x.Cross
	}
	return nil
}

type isRel_RelType interface {
	isRel_RelType()
}

type Rel_Read struct {
	Read *ReadRel `protobuf:"bytes,1,opt,name=read,proto3,oneof"`
}

type Rel_Filter struct {
	Filter *FilterRel `protobuf:"bytes,2,opt,name=filter,proto3,oneof"`
}

type Rel_Fetch struct {
	Fetch *FetchRel `protobuf:"bytes,3,opt,name=fetch,proto3,oneof"`
}

type Rel_Aggregate struct {
	Aggregate *AggregateRel `protobuf:"bytes,4,opt,name=aggregate,proto3,oneof"`
}

type Rel_Sort struct {
	Sort *SortRel `protobuf:"bytes,5,opt,name=sort,proto3,oneof"`
}

type Rel_Join struct {
	Join *JoinRel `protobuf:"bytes,6,opt,name=join,proto3,oneof"`
}

type Rel_Project struct {
	Project *ProjectRel `protobuf:"bytes,7,opt,name=project,proto3,oneof"`
}

type Rel_Set struct {
	Set *SetRel `protobuf:"bytes,8,opt,name=set,proto3,oneof"`
}

type Rel_ExtensionSingle struct {
	ExtensionSingle *ExtensionSingleRel `protobuf:"bytes,9,opt,name=extension_single,json=extensionSingle,proto3,oneof"`
}

type Rel_ExtensionMulti struct {
	ExtensionMulti *ExtensionMultiRel `protobuf:"bytes,10,opt,name=extension_multi,json=extensionMulti,proto3,oneof"`
}

type Rel_ExtensionLeaf struct {
	ExtensionLeaf *ExtensionLeafRel `protobuf:"bytes,11,opt,name=extension_leaf,json=extensionLeaf,proto3,oneof"`
}

type Rel_Cross struct {
	Cross *CrossRel `protobuf:"bytes,12,opt,name=cross,proto3,oneof"`
}

func (*Rel_Read) isRel_RelType() {}

func (*Rel_Filter) isRel_RelType() {}

func (*Rel_Fetch) isRel_RelType() {}

func (*Rel_Aggregate) isRel_RelType() {}

func (*Rel_Sort) isRel_RelType() {}

func (*Rel_Join) isRel_RelType() {}

func (*Rel_Project) isRel_RelType() {}

func (*Rel_Set) isRel_RelType() {}

func (*Rel_ExtensionSingle) isRel_RelType() {}

func (*Rel_ExtensionMulti) isRel_RelType() {}

func (*Rel_ExtensionLeaf) isRel_RelType() {}

func (*Rel_Cross) isRel_RelType() {}

type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RexType:
	//	*Expression_Literal_
	//	*Expression_Selection
	//	*Expression_ScalarFunction_
	//	*Expression_WindowFunction_
	//	*Expression_IfThen_
	//	*Expression_SwitchExpression_
	//	*Expression_SingularOrList_
	//	*Expression_MultiOrList_
	//	*Expression_Enum_
	//	*Expression_Cast_
	//	*Expression_Subquery_
	RexType isExpression_RexType `protobuf_oneof:"rex_type"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16}
}

func (m *Expression) GetRexType() isExpression_RexType {
	if m != nil {
		return m.RexType
	}
	return nil
}

func (x *Expression) GetLiteral() *Expression_Literal {
	if x, ok := x.GetRexType().(*Expression_Literal_); ok {
		return x.Literal
	}
	return nil
}

func (x *Expression) GetSelection() *Expression_FieldReference {
	if x, ok := x.GetRexType().(*Expression_Selection); ok {
		return x.Selection
	}
	return nil
}

func (x *Expression) GetScalarFunction() *Expression_ScalarFunction {
	if x, ok := x.GetRexType().(*Expression_ScalarFunction_); ok {
		return x.ScalarFunction
	}
	return nil
}

func (x *Expression) GetWindowFunction() *Expression_WindowFunction {
	if x, ok := x.GetRexType().(*Expression_WindowFunction_); ok {
		return x.WindowFunction
	}
	return nil
}

func (x *Expression) GetIfThen() *Expression_IfThen {
	if x, ok := x.GetRexType().(*Expression_IfThen_); ok {
		return x.IfThen
	}
	return nil
}

func (x *Expression) GetSwitchExpression() *Expression_SwitchExpression {
	if x, ok := x.GetRexType().(*Expression_SwitchExpression_); ok {
		return x.SwitchExpression
	}
	return nil
}

func (x *Expression) GetSingularOrList() *Expression_SingularOrList {
	if x, ok := x.GetRexType().(*Expression_SingularOrList_); ok {
		return x.SingularOrList
	}
	return nil
}

func (x *Expression) GetMultiOrList() *Expression_MultiOrList {
	if x, ok := x.GetRexType().(*Expression_MultiOrList_); ok {
		return x.MultiOrList
	}
	return nil
}

func (x *Expression) GetEnum() *Expression_Enum {
	if x, ok := x.GetRexType().(*Expression_Enum_); ok {
		return x.Enum
	}
	return nil
}

func (x *Expression) GetCast() *Expression_Cast {
	if x, ok := x.GetRexType().(*Expression_Cast_); ok {
		return x.Cast
	}
	return nil
}

func (x *Expression) GetSubquery() *Expression_Subquery {
	if x, ok := x.GetRexType().(*Expression_Subquery_); ok {
		return x.Subquery
	}
	return nil
}

type isExpression_RexType interface {
	isExpression_RexType()
}

type Expression_Literal_ struct {
	Literal *Expression_Literal `protobuf:"bytes,1,opt,name=literal,proto3,oneof"`
}

type Expression_Selection struct {
	Selection *Expression_FieldReference `protobuf:"bytes,2,opt,name=selection,proto3,oneof"`
}

type Expression_ScalarFunction_ struct {
	ScalarFunction *Expression_ScalarFunction `protobuf:"bytes,3,opt,name=scalar_function,json=scalarFunction,proto3,oneof"`
}

type Expression_WindowFunction_ struct {
	WindowFunction *Expression_WindowFunction `protobuf:"bytes,5,opt,name=window_function,json=windowFunction,proto3,oneof"`
}

type Expression_IfThen_ struct {
	IfThen *Expression_IfThen `protobuf:"bytes,6,opt,name=if_then,json=ifThen,proto3,oneof"`
}

type Expression_SwitchExpression_ struct {
	SwitchExpression *Expression_SwitchExpression `protobuf:"bytes,7,opt,name=switch_expression,json=switchExpression,proto3,oneof"`
}

type Expression_SingularOrList_ struct {
	SingularOrList *Expression_SingularOrList `protobuf:"bytes,8,opt,name=singular_or_list,json=singularOrList,proto3,oneof"`
}

type Expression_MultiOrList_ struct {
	MultiOrList *Expression_MultiOrList `protobuf:"bytes,9,opt,name=multi_or_list,json=multiOrList,proto3,oneof"`
}

type Expression_Enum_ struct {
	Enum *Expression_Enum `protobuf:"bytes,10,opt,name=enum,proto3,oneof"`
}

type Expression_Cast_ struct {
	Cast *Expression_Cast `protobuf:"bytes,11,opt,name=cast,proto3,oneof"`
}

type Expression_Subquery_ struct {
	Subquery *Expression_Subquery `protobuf:"bytes,12,opt,name=subquery,proto3,oneof"`
}

func (*Expression_Literal_) isExpression_RexType() {}

func (*Expression_Selection) isExpression_RexType() {}

func (*Expression_ScalarFunction_) isExpression_RexType() {}

func (*Expression_WindowFunction_) isExpression_RexType() {}

func (*Expression_IfThen_) isExpression_RexType() {}

func (*Expression_SwitchExpression_) isExpression_RexType() {}

func (*Expression_SingularOrList_) isExpression_RexType() {}

func (*Expression_MultiOrList_) isExpression_RexType() {}

func (*Expression_Enum_) isExpression_RexType() {}

func (*Expression_Cast_) isExpression_RexType() {}

func (*Expression_Subquery_) isExpression_RexType() {}

type SortField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *Expression `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	// Types that are assignable to SortKind:
	//	*SortField_Direction
	//	*SortField_ComparisonFunctionReference
	SortKind isSortField_SortKind `protobuf_oneof:"sort_kind"`
}

func (x *SortField) Reset() {
	*x = SortField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortField) ProtoMessage() {}

func (x *SortField) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortField.ProtoReflect.Descriptor instead.
func (*SortField) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{17}
}

func (x *SortField) GetExpr() *Expression {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (m *SortField) GetSortKind() isSortField_SortKind {
	if m != nil {
		return m.SortKind
	}
	return nil
}

func (x *SortField) GetDirection() SortField_SortDirection {
	if x, ok := x.GetSortKind().(*SortField_Direction); ok {
		return x.Direction
	}
	return SortField_SORT_DIRECTION_UNSPECIFIED
}

func (x *SortField) GetComparisonFunctionReference() uint32 {
	if x, ok := x.GetSortKind().(*SortField_ComparisonFunctionReference); ok {
		return x.ComparisonFunctionReference
	}
	return 0
}

type isSortField_SortKind interface {
	isSortField_SortKind()
}

type SortField_Direction struct {
	Direction SortField_SortDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=substrait.SortField_SortDirection,oneof"`
}

type SortField_ComparisonFunctionReference struct {
	ComparisonFunctionReference uint32 `protobuf:"varint,3,opt,name=comparison_function_reference,json=comparisonFunctionReference,proto3,oneof"`
}

func (*SortField_Direction) isSortField_SortKind() {}

func (*SortField_ComparisonFunctionReference) isSortField_SortKind() {}

type AggregateFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// points to a function_anchor defined in this plan
	FunctionReference uint32           `protobuf:"varint,1,opt,name=function_reference,json=functionReference,proto3" json:"function_reference,omitempty"`
	Args              []*Expression    `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Sorts             []*SortField     `protobuf:"bytes,3,rep,name=sorts,proto3" json:"sorts,omitempty"`
	Phase             AggregationPhase `protobuf:"varint,4,opt,name=phase,proto3,enum=substrait.AggregationPhase" json:"phase,omitempty"`
	OutputType        *Type            `protobuf:"bytes,5,opt,name=output_type,json=outputType,proto3" json:"output_type,omitempty"`
}

func (x *AggregateFunction) Reset() {
	*x = AggregateFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateFunction) ProtoMessage() {}

func (x *AggregateFunction) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateFunction.ProtoReflect.Descriptor instead.
func (*AggregateFunction) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{18}
}

func (x *AggregateFunction) GetFunctionReference() uint32 {
	if x != nil {
		return x.FunctionReference
	}
	return 0
}

func (x *AggregateFunction) GetArgs() []*Expression {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *AggregateFunction) GetSorts() []*SortField {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *AggregateFunction) GetPhase() AggregationPhase {
	if x != nil {
		return x.Phase
	}
	return AggregationPhase_AGGREGATION_PHASE_UNSPECIFIED
}

func (x *AggregateFunction) GetOutputType() *Type {
	if x != nil {
		return x.OutputType
	}
	return nil
}

type RelCommon_Direct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RelCommon_Direct) Reset() {
	*x = RelCommon_Direct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelCommon_Direct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelCommon_Direct) ProtoMessage() {}

func (x *RelCommon_Direct) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelCommon_Direct.ProtoReflect.Descriptor instead.
func (*RelCommon_Direct) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{0, 0}
}

type RelCommon_Emit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputMapping []int32 `protobuf:"varint,1,rep,packed,name=output_mapping,json=outputMapping,proto3" json:"output_mapping,omitempty"`
}

func (x *RelCommon_Emit) Reset() {
	*x = RelCommon_Emit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelCommon_Emit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelCommon_Emit) ProtoMessage() {}

func (x *RelCommon_Emit) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelCommon_Emit.ProtoReflect.Descriptor instead.
func (*RelCommon_Emit) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RelCommon_Emit) GetOutputMapping() []int32 {
	if x != nil {
		return x.OutputMapping
	}
	return nil
}

// Changes to the operation that can influence efficiency/performance but
// should not impact correctness.
type RelCommon_Hint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats             *RelCommon_Hint_Stats             `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
	Constraint        *RelCommon_Hint_RuntimeConstraint `protobuf:"bytes,2,opt,name=constraint,proto3" json:"constraint,omitempty"`
	AdvancedExtension *extensions.AdvancedExtension     `protobuf:"bytes,10,opt,name=advanced_extension,json=advancedExtension,proto3" json:"advanced_extension,omitempty"`
}

func (x *RelCommon_Hint) Reset() {
	*x = RelCommon_Hint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelCommon_Hint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelCommon_Hint) ProtoMessage() {}

func (x *RelCommon_Hint) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelCommon_Hint.ProtoReflect.Descriptor instead.
func (*RelCommon_Hint) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RelCommon_Hint) GetStats() *RelCommon_Hint_Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *RelCommon_Hint) GetConstraint() *RelCommon_Hint_RuntimeConstraint {
	if x != nil {
		return x.Constraint
	}
	return nil
}

func (x *RelCommon_Hint) GetAdvancedExtension() *extensions.AdvancedExtension {
	if x != nil {
		return x.AdvancedExtension
	}
	return nil
}

type RelCommon_Hint_Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowCount          float64                       `protobuf:"fixed64,1,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	RecordSize        float64                       `protobuf:"fixed64,2,opt,name=record_size,json=recordSize,proto3" json:"record_size,omitempty"`
	AdvancedExtension *extensions.AdvancedExtension `protobuf:"bytes,10,opt,name=advanced_extension,json=advancedExtension,proto3" json:"advanced_extension,omitempty"`
}

func (x *RelCommon_Hint_Stats) Reset() {
	*x = RelCommon_Hint_Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelCommon_Hint_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelCommon_Hint_Stats) ProtoMessage() {}

func (x *RelCommon_Hint_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelCommon_Hint_Stats.ProtoReflect.Descriptor instead.
func (*RelCommon_Hint_Stats) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *RelCommon_Hint_Stats) GetRowCount() float64 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (x *RelCommon_Hint_Stats) GetRecordSize() float64 {
	if x != nil {
		return x.RecordSize
	}
	return 0
}

func (x *RelCommon_Hint_Stats) GetAdvancedExtension() *extensions.AdvancedExtension {
	if x != nil {
		return x.AdvancedExtension
	}
	return nil
}

type RelCommon_Hint_RuntimeConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvancedExtension *extensions.AdvancedExtension `protobuf:"bytes,10,opt,name=advanced_extension,json=advancedExtension,proto3" json:"advanced_extension,omitempty"`
}

func (x *RelCommon_Hint_RuntimeConstraint) Reset() {
	*x = RelCommon_Hint_RuntimeConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelCommon_Hint_RuntimeConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelCommon_Hint_RuntimeConstraint) ProtoMessage() {}

func (x *RelCommon_Hint_RuntimeConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelCommon_Hint_RuntimeConstraint.ProtoReflect.Descriptor instead.
func (*RelCommon_Hint_RuntimeConstraint) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *RelCommon_Hint_RuntimeConstraint) GetAdvancedExtension() *extensions.AdvancedExtension {
	if x != nil {
		return x.AdvancedExtension
	}
	return nil
}

type ReadRel_NamedTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names             []string                      `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	AdvancedExtension *extensions.AdvancedExtension `protobuf:"bytes,10,opt,name=advanced_extension,json=advancedExtension,proto3" json:"advanced_extension,omitempty"`
}

func (x *ReadRel_NamedTable) Reset() {
	*x = ReadRel_NamedTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRel_NamedTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRel_NamedTable) ProtoMessage() {}

func (x *ReadRel_NamedTable) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRel_NamedTable.ProtoReflect.Descriptor instead.
func (*ReadRel_NamedTable) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ReadRel_NamedTable) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *ReadRel_NamedTable) GetAdvancedExtension() *extensions.AdvancedExtension {
	if x != nil {
		return x.AdvancedExtension
	}
	return nil
}

// a table composed of literals.
type ReadRel_VirtualTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Expression_Literal_Struct `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ReadRel_VirtualTable) Reset() {
	*x = ReadRel_VirtualTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRel_VirtualTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRel_VirtualTable) ProtoMessage() {}

func (x *ReadRel_VirtualTable) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRel_VirtualTable.ProtoReflect.Descriptor instead.
func (*ReadRel_VirtualTable) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ReadRel_VirtualTable) GetValues() []*Expression_Literal_Struct {
	if x != nil {
		return x.Values
	}
	return nil
}

// a stub type that can be used to extend/introduce new table types outside
// the specification.
type ReadRel_ExtensionTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail *anypb.Any `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *ReadRel_ExtensionTable) Reset() {
	*x = ReadRel_ExtensionTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRel_ExtensionTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRel_ExtensionTable) ProtoMessage() {}

func (x *ReadRel_ExtensionTable) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRel_ExtensionTable.ProtoReflect.Descriptor instead.
func (*ReadRel_ExtensionTable) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{1, 2}
}

func (x *ReadRel_ExtensionTable) GetDetail() *anypb.Any {
	if x != nil {
		return x.Detail
	}
	return nil
}

type ReadRel_LocalFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items             []*ReadRel_LocalFiles_FileOrFiles `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	AdvancedExtension *extensions.AdvancedExtension     `protobuf:"bytes,10,opt,name=advanced_extension,json=advancedExtension,proto3" json:"advanced_extension,omitempty"`
}

func (x *ReadRel_LocalFiles) Reset() {
	*x = ReadRel_LocalFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRel_LocalFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRel_LocalFiles) ProtoMessage() {}

func (x *ReadRel_LocalFiles) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRel_LocalFiles.ProtoReflect.Descriptor instead.
func (*ReadRel_LocalFiles) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{1, 3}
}

func (x *ReadRel_LocalFiles) GetItems() []*ReadRel_LocalFiles_FileOrFiles {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ReadRel_LocalFiles) GetAdvancedExtension() *extensions.AdvancedExtension {
	if x != nil {
		return x.AdvancedExtension
	}
	return nil
}

// Many files consist of indivisible chunks (e.g. parquet row groups
// or CSV rows).  If a slice partially selects an indivisible chunk
// then the consumer should employ some rule to decide which slice to
// include the chunk in (e.g. include it in the slice that contains
// the midpoint of the chunk)
type ReadRel_LocalFiles_FileOrFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PathType:
	//	*ReadRel_LocalFiles_FileOrFiles_UriPath
	//	*ReadRel_LocalFiles_FileOrFiles_UriPathGlob
	//	*ReadRel_LocalFiles_FileOrFiles_UriFile
	//	*ReadRel_LocalFiles_FileOrFiles_UriFolder
	PathType isReadRel_LocalFiles_FileOrFiles_PathType `protobuf_oneof:"path_type"`
	Format   ReadRel_LocalFiles_FileOrFiles_FileFormat `protobuf:"varint,5,opt,name=format,proto3,enum=substrait.ReadRel_LocalFiles_FileOrFiles_FileFormat" json:"format,omitempty"`
	// the index of the partition this item belongs to
	PartitionIndex uint64 `protobuf:"varint,6,opt,name=partition_index,json=partitionIndex,proto3" json:"partition_index,omitempty"`
	// the start position in byte to read from this item
	Start uint64 `protobuf:"varint,7,opt,name=start,proto3" json:"start,omitempty"`
	// the length in byte to read from this item
	Length uint64 `protobuf:"varint,8,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *ReadRel_LocalFiles_FileOrFiles) Reset() {
	*x = ReadRel_LocalFiles_FileOrFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRel_LocalFiles_FileOrFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRel_LocalFiles_FileOrFiles) ProtoMessage() {}

func (x *ReadRel_LocalFiles_FileOrFiles) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRel_LocalFiles_FileOrFiles.ProtoReflect.Descriptor instead.
func (*ReadRel_LocalFiles_FileOrFiles) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{1, 3, 0}
}

func (m *ReadRel_LocalFiles_FileOrFiles) GetPathType() isReadRel_LocalFiles_FileOrFiles_PathType {
	if m != nil {
		return m.PathType
	}
	return nil
}

func (x *ReadRel_LocalFiles_FileOrFiles) GetUriPath() string {
	if x, ok := x.GetPathType().(*ReadRel_LocalFiles_FileOrFiles_UriPath); ok {
		return x.UriPath
	}
	return ""
}

func (x *ReadRel_LocalFiles_FileOrFiles) GetUriPathGlob() string {
	if x, ok := x.GetPathType().(*ReadRel_LocalFiles_FileOrFiles_UriPathGlob); ok {
		return x.UriPathGlob
	}
	return ""
}

func (x *ReadRel_LocalFiles_FileOrFiles) GetUriFile() string {
	if x, ok := x.GetPathType().(*ReadRel_LocalFiles_FileOrFiles_UriFile); ok {
		return x.UriFile
	}
	return ""
}

func (x *ReadRel_LocalFiles_FileOrFiles) GetUriFolder() string {
	if x, ok := x.GetPathType().(*ReadRel_LocalFiles_FileOrFiles_UriFolder); ok {
		return x.UriFolder
	}
	return ""
}

func (x *ReadRel_LocalFiles_FileOrFiles) GetFormat() ReadRel_LocalFiles_FileOrFiles_FileFormat {
	if x != nil {
		return x.Format
	}
	return ReadRel_LocalFiles_FileOrFiles_FILE_FORMAT_UNSPECIFIED
}

func (x *ReadRel_LocalFiles_FileOrFiles) GetPartitionIndex() uint64 {
	if x != nil {
		return x.PartitionIndex
	}
	return 0
}

func (x *ReadRel_LocalFiles_FileOrFiles) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ReadRel_LocalFiles_FileOrFiles) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

type isReadRel_LocalFiles_FileOrFiles_PathType interface {
	isReadRel_LocalFiles_FileOrFiles_PathType()
}

type ReadRel_LocalFiles_FileOrFiles_UriPath struct {
	// A URI that can refer to either a single folder or a single file
	UriPath string `protobuf:"bytes,1,opt,name=uri_path,json=uriPath,proto3,oneof"`
}

type ReadRel_LocalFiles_FileOrFiles_UriPathGlob struct {
	// A URI where the path portion is a glob expression that can
	// identify zero or more paths.
	// Consumers should support the POSIX syntax.  The recursive
	// globstar (**) may not be supported.
	UriPathGlob string `protobuf:"bytes,2,opt,name=uri_path_glob,json=uriPathGlob,proto3,oneof"`
}

type ReadRel_LocalFiles_FileOrFiles_UriFile struct {
	// A URI that refers to a single file
	UriFile string `protobuf:"bytes,3,opt,name=uri_file,json=uriFile,proto3,oneof"`
}

type ReadRel_LocalFiles_FileOrFiles_UriFolder struct {
	// A URI that refers to a single folder
	UriFolder string `protobuf:"bytes,4,opt,name=uri_folder,json=uriFolder,proto3,oneof"`
}

func (*ReadRel_LocalFiles_FileOrFiles_UriPath) isReadRel_LocalFiles_FileOrFiles_PathType() {}

func (*ReadRel_LocalFiles_FileOrFiles_UriPathGlob) isReadRel_LocalFiles_FileOrFiles_PathType() {}

func (*ReadRel_LocalFiles_FileOrFiles_UriFile) isReadRel_LocalFiles_FileOrFiles_PathType() {}

func (*ReadRel_LocalFiles_FileOrFiles_UriFolder) isReadRel_LocalFiles_FileOrFiles_PathType() {}

type AggregateRel_Grouping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupingExpressions []*Expression `protobuf:"bytes,1,rep,name=grouping_expressions,json=groupingExpressions,proto3" json:"grouping_expressions,omitempty"`
}

func (x *AggregateRel_Grouping) Reset() {
	*x = AggregateRel_Grouping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateRel_Grouping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateRel_Grouping) ProtoMessage() {}

func (x *AggregateRel_Grouping) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateRel_Grouping.ProtoReflect.Descriptor instead.
func (*AggregateRel_Grouping) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{6, 0}
}

func (x *AggregateRel_Grouping) GetGroupingExpressions() []*Expression {
	if x != nil {
		return x.GroupingExpressions
	}
	return nil
}

type AggregateRel_Measure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Measure *AggregateFunction `protobuf:"bytes,1,opt,name=measure,proto3" json:"measure,omitempty"`
	// An optional boolean expression that acts to filter which records are
	// included in the measure. True means include this record for calculation
	// within the measure.
	Filter *Expression `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *AggregateRel_Measure) Reset() {
	*x = AggregateRel_Measure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateRel_Measure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateRel_Measure) ProtoMessage() {}

func (x *AggregateRel_Measure) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateRel_Measure.ProtoReflect.Descriptor instead.
func (*AggregateRel_Measure) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{6, 1}
}

func (x *AggregateRel_Measure) GetMeasure() *AggregateFunction {
	if x != nil {
		return x.Measure
	}
	return nil
}

func (x *AggregateRel_Measure) GetFilter() *Expression {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ExchangeRel_ScatterFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Expression_FieldReference `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ExchangeRel_ScatterFields) Reset() {
	*x = ExchangeRel_ScatterFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRel_ScatterFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRel_ScatterFields) ProtoMessage() {}

func (x *ExchangeRel_ScatterFields) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRel_ScatterFields.ProtoReflect.Descriptor instead.
func (*ExchangeRel_ScatterFields) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ExchangeRel_ScatterFields) GetFields() []*Expression_FieldReference {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Returns a single bucket number per record.
type ExchangeRel_SingleBucketExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression *Expression `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *ExchangeRel_SingleBucketExpression) Reset() {
	*x = ExchangeRel_SingleBucketExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRel_SingleBucketExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRel_SingleBucketExpression) ProtoMessage() {}

func (x *ExchangeRel_SingleBucketExpression) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRel_SingleBucketExpression.ProtoReflect.Descriptor instead.
func (*ExchangeRel_SingleBucketExpression) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{13, 1}
}

func (x *ExchangeRel_SingleBucketExpression) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

// Returns zero or more bucket numbers per record
type ExchangeRel_MultiBucketExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression         *Expression `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	ConstrainedToCount bool        `protobuf:"varint,2,opt,name=constrained_to_count,json=constrainedToCount,proto3" json:"constrained_to_count,omitempty"`
}

func (x *ExchangeRel_MultiBucketExpression) Reset() {
	*x = ExchangeRel_MultiBucketExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRel_MultiBucketExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRel_MultiBucketExpression) ProtoMessage() {}

func (x *ExchangeRel_MultiBucketExpression) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRel_MultiBucketExpression.ProtoReflect.Descriptor instead.
func (*ExchangeRel_MultiBucketExpression) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{13, 2}
}

func (x *ExchangeRel_MultiBucketExpression) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *ExchangeRel_MultiBucketExpression) GetConstrainedToCount() bool {
	if x != nil {
		return x.ConstrainedToCount
	}
	return false
}

// Send all data to every target.
type ExchangeRel_Broadcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExchangeRel_Broadcast) Reset() {
	*x = ExchangeRel_Broadcast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRel_Broadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRel_Broadcast) ProtoMessage() {}

func (x *ExchangeRel_Broadcast) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRel_Broadcast.ProtoReflect.Descriptor instead.
func (*ExchangeRel_Broadcast) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{13, 3}
}

// Route approximately
type ExchangeRel_RoundRobin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// whether the round robin behavior is required to exact (per record) or
	// approximate. Defaults to approximate.
	Exact bool `protobuf:"varint,1,opt,name=exact,proto3" json:"exact,omitempty"`
}

func (x *ExchangeRel_RoundRobin) Reset() {
	*x = ExchangeRel_RoundRobin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRel_RoundRobin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRel_RoundRobin) ProtoMessage() {}

func (x *ExchangeRel_RoundRobin) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRel_RoundRobin.ProtoReflect.Descriptor instead.
func (*ExchangeRel_RoundRobin) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{13, 4}
}

func (x *ExchangeRel_RoundRobin) GetExact() bool {
	if x != nil {
		return x.Exact
	}
	return false
}

type ExchangeRel_ExchangeTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes the partition id(s) to send. If this is empty, all data is sent
	// to this target.
	PartitionId []int32 `protobuf:"varint,1,rep,packed,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// Types that are assignable to TargetType:
	//	*ExchangeRel_ExchangeTarget_Uri
	//	*ExchangeRel_ExchangeTarget_Extended
	TargetType isExchangeRel_ExchangeTarget_TargetType `protobuf_oneof:"target_type"`
}

func (x *ExchangeRel_ExchangeTarget) Reset() {
	*x = ExchangeRel_ExchangeTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRel_ExchangeTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRel_ExchangeTarget) ProtoMessage() {}

func (x *ExchangeRel_ExchangeTarget) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRel_ExchangeTarget.ProtoReflect.Descriptor instead.
func (*ExchangeRel_ExchangeTarget) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{13, 5}
}

func (x *ExchangeRel_ExchangeTarget) GetPartitionId() []int32 {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

func (m *ExchangeRel_ExchangeTarget) GetTargetType() isExchangeRel_ExchangeTarget_TargetType {
	if m != nil {
		return m.TargetType
	}
	return nil
}

func (x *ExchangeRel_ExchangeTarget) GetUri() string {
	if x, ok := x.GetTargetType().(*ExchangeRel_ExchangeTarget_Uri); ok {
		return x.Uri
	}
	return ""
}

func (x *ExchangeRel_ExchangeTarget) GetExtended() *anypb.Any {
	if x, ok := x.GetTargetType().(*ExchangeRel_ExchangeTarget_Extended); ok {
		return x.Extended
	}
	return nil
}

type isExchangeRel_ExchangeTarget_TargetType interface {
	isExchangeRel_ExchangeTarget_TargetType()
}

type ExchangeRel_ExchangeTarget_Uri struct {
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3,oneof"`
}

type ExchangeRel_ExchangeTarget_Extended struct {
	Extended *anypb.Any `protobuf:"bytes,3,opt,name=extended,proto3,oneof"`
}

func (*ExchangeRel_ExchangeTarget_Uri) isExchangeRel_ExchangeTarget_TargetType() {}

func (*ExchangeRel_ExchangeTarget_Extended) isExchangeRel_ExchangeTarget_TargetType() {}

type Expression_Enum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EnumKind:
	//	*Expression_Enum_Specified
	//	*Expression_Enum_Unspecified
	EnumKind isExpression_Enum_EnumKind `protobuf_oneof:"enum_kind"`
}

func (x *Expression_Enum) Reset() {
	*x = Expression_Enum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_Enum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Enum) ProtoMessage() {}

func (x *Expression_Enum) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Enum.ProtoReflect.Descriptor instead.
func (*Expression_Enum) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 0}
}

func (m *Expression_Enum) GetEnumKind() isExpression_Enum_EnumKind {
	if m != nil {
		return m.EnumKind
	}
	return nil
}

func (x *Expression_Enum) GetSpecified() string {
	if x, ok := x.GetEnumKind().(*Expression_Enum_Specified); ok {
		return x.Specified
	}
	return ""
}

func (x *Expression_Enum) GetUnspecified() *Expression_Enum_Empty {
	if x, ok := x.GetEnumKind().(*Expression_Enum_Unspecified); ok {
		return x.Unspecified
	}
	return nil
}

type isExpression_Enum_EnumKind interface {
	isExpression_Enum_EnumKind()
}

type Expression_Enum_Specified struct {
	Specified string `protobuf:"bytes,1,opt,name=specified,proto3,oneof"`
}

type Expression_Enum_Unspecified struct {
	Unspecified *Expression_Enum_Empty `protobuf:"bytes,2,opt,name=unspecified,proto3,oneof"`
}

func (*Expression_Enum_Specified) isExpression_Enum_EnumKind() {}

func (*Expression_Enum_Unspecified) isExpression_Enum_EnumKind() {}

type Expression_Literal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to LiteralType:
	//	*Expression_Literal_Boolean
	//	*Expression_Literal_I8
	//	*Expression_Literal_I16
	//	*Expression_Literal_I32
	//	*Expression_Literal_I64
	//	*Expression_Literal_Fp32
	//	*Expression_Literal_Fp64
	//	*Expression_Literal_String_
	//	*Expression_Literal_Binary
	//	*Expression_Literal_Timestamp
	//	*Expression_Literal_Date
	//	*Expression_Literal_Time
	//	*Expression_Literal_IntervalYearToMonth_
	//	*Expression_Literal_IntervalDayToSecond_
	//	*Expression_Literal_FixedChar
	//	*Expression_Literal_VarChar_
	//	*Expression_Literal_FixedBinary
	//	*Expression_Literal_Decimal_
	//	*Expression_Literal_Struct_
	//	*Expression_Literal_Map_
	//	*Expression_Literal_TimestampTz
	//	*Expression_Literal_Uuid
	//	*Expression_Literal_Null
	//	*Expression_Literal_List_
	//	*Expression_Literal_EmptyList
	//	*Expression_Literal_EmptyMap
	LiteralType isExpression_Literal_LiteralType `protobuf_oneof:"literal_type"`
	// whether the literal type should be treated as a nullable type. Applies to
	// all members of union other than the Typed null (which should directly
	// declare nullability).
	Nullable bool `protobuf:"varint,50,opt,name=nullable,proto3" json:"nullable,omitempty"`
}

func (x *Expression_Literal) Reset() {
	*x = Expression_Literal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_Literal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Literal) ProtoMessage() {}

func (x *Expression_Literal) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Literal.ProtoReflect.Descriptor instead.
func (*Expression_Literal) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 1}
}

func (m *Expression_Literal) GetLiteralType() isExpression_Literal_LiteralType {
	if m != nil {
		return m.LiteralType
	}
	return nil
}

func (x *Expression_Literal) GetBoolean() bool {
	if x, ok := x.GetLiteralType().(*Expression_Literal_Boolean); ok {
		return x.Boolean
	}
	return false
}

func (x *Expression_Literal) GetI8() int32 {
	if x, ok := x.GetLiteralType().(*Expression_Literal_I8); ok {
		return x.I8
	}
	return 0
}

func (x *Expression_Literal) GetI16() int32 {
	if x, ok := x.GetLiteralType().(*Expression_Literal_I16); ok {
		return x.I16
	}
	return 0
}

func (x *Expression_Literal) GetI32() int32 {
	if x, ok := x.GetLiteralType().(*Expression_Literal_I32); ok {
		return x.I32
	}
	return 0
}

func (x *Expression_Literal) GetI64() int64 {
	if x, ok := x.GetLiteralType().(*Expression_Literal_I64); ok {
		return x.I64
	}
	return 0
}

func (x *Expression_Literal) GetFp32() float32 {
	if x, ok := x.GetLiteralType().(*Expression_Literal_Fp32); ok {
		return x.Fp32
	}
	return 0
}

func (x *Expression_Literal) GetFp64() float64 {
	if x, ok := x.GetLiteralType().(*Expression_Literal_Fp64); ok {
		return x.Fp64
	}
	return 0
}

func (x *Expression_Literal) GetString_() string {
	if x, ok := x.GetLiteralType().(*Expression_Literal_String_); ok {
		return x.String_
	}
	return ""
}

func (x *Expression_Literal) GetBinary() []byte {
	if x, ok := x.GetLiteralType().(*Expression_Literal_Binary); ok {
		return x.Binary
	}
	return nil
}

func (x *Expression_Literal) GetTimestamp() int64 {
	if x, ok := x.GetLiteralType().(*Expression_Literal_Timestamp); ok {
		return x.Timestamp
	}
	return 0
}

func (x *Expression_Literal) GetDate() int32 {
	if x, ok := x.GetLiteralType().(*Expression_Literal_Date); ok {
		return x.Date
	}
	return 0
}

func (x *Expression_Literal) GetTime() int64 {
	if x, ok := x.GetLiteralType().(*Expression_Literal_Time); ok {
		return x.Time
	}
	return 0
}

func (x *Expression_Literal) GetIntervalYearToMonth() *Expression_Literal_IntervalYearToMonth {
	if x, ok := x.GetLiteralType().(*Expression_Literal_IntervalYearToMonth_); ok {
		return x.IntervalYearToMonth
	}
	return nil
}

func (x *Expression_Literal) GetIntervalDayToSecond() *Expression_Literal_IntervalDayToSecond {
	if x, ok := x.GetLiteralType().(*Expression_Literal_IntervalDayToSecond_); ok {
		return x.IntervalDayToSecond
	}
	return nil
}

func (x *Expression_Literal) GetFixedChar() string {
	if x, ok := x.GetLiteralType().(*Expression_Literal_FixedChar); ok {
		return x.FixedChar
	}
	return ""
}

func (x *Expression_Literal) GetVarChar() *Expression_Literal_VarChar {
	if x, ok := x.GetLiteralType().(*Expression_Literal_VarChar_); ok {
		return x.VarChar
	}
	return nil
}

func (x *Expression_Literal) GetFixedBinary() []byte {
	if x, ok := x.GetLiteralType().(*Expression_Literal_FixedBinary); ok {
		return x.FixedBinary
	}
	return nil
}

func (x *Expression_Literal) GetDecimal() *Expression_Literal_Decimal {
	if x, ok := x.GetLiteralType().(*Expression_Literal_Decimal_); ok {
		return x.Decimal
	}
	return nil
}

func (x *Expression_Literal) GetStruct() *Expression_Literal_Struct {
	if x, ok := x.GetLiteralType().(*Expression_Literal_Struct_); ok {
		return x.Struct
	}
	return nil
}

func (x *Expression_Literal) GetMap() *Expression_Literal_Map {
	if x, ok := x.GetLiteralType().(*Expression_Literal_Map_); ok {
		return x.Map
	}
	return nil
}

func (x *Expression_Literal) GetTimestampTz() int64 {
	if x, ok := x.GetLiteralType().(*Expression_Literal_TimestampTz); ok {
		return x.TimestampTz
	}
	return 0
}

func (x *Expression_Literal) GetUuid() []byte {
	if x, ok := x.GetLiteralType().(*Expression_Literal_Uuid); ok {
		return x.Uuid
	}
	return nil
}

func (x *Expression_Literal) GetNull() *Type {
	if x, ok := x.GetLiteralType().(*Expression_Literal_Null); ok {
		return x.Null
	}
	return nil
}

func (x *Expression_Literal) GetList() *Expression_Literal_List {
	if x, ok := x.GetLiteralType().(*Expression_Literal_List_); ok {
		return x.List
	}
	return nil
}

func (x *Expression_Literal) GetEmptyList() *Type_List {
	if x, ok := x.GetLiteralType().(*Expression_Literal_EmptyList); ok {
		return x.EmptyList
	}
	return nil
}

func (x *Expression_Literal) GetEmptyMap() *Type_Map {
	if x, ok := x.GetLiteralType().(*Expression_Literal_EmptyMap); ok {
		return x.EmptyMap
	}
	return nil
}

func (x *Expression_Literal) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

type isExpression_Literal_LiteralType interface {
	isExpression_Literal_LiteralType()
}

type Expression_Literal_Boolean struct {
	Boolean bool `protobuf:"varint,1,opt,name=boolean,proto3,oneof"`
}

type Expression_Literal_I8 struct {
	I8 int32 `protobuf:"varint,2,opt,name=i8,proto3,oneof"`
}

type Expression_Literal_I16 struct {
	I16 int32 `protobuf:"varint,3,opt,name=i16,proto3,oneof"`
}

type Expression_Literal_I32 struct {
	I32 int32 `protobuf:"varint,5,opt,name=i32,proto3,oneof"`
}

type Expression_Literal_I64 struct {
	I64 int64 `protobuf:"varint,7,opt,name=i64,proto3,oneof"`
}

type Expression_Literal_Fp32 struct {
	Fp32 float32 `protobuf:"fixed32,10,opt,name=fp32,proto3,oneof"`
}

type Expression_Literal_Fp64 struct {
	Fp64 float64 `protobuf:"fixed64,11,opt,name=fp64,proto3,oneof"`
}

type Expression_Literal_String_ struct {
	String_ string `protobuf:"bytes,12,opt,name=string,proto3,oneof"`
}

type Expression_Literal_Binary struct {
	Binary []byte `protobuf:"bytes,13,opt,name=binary,proto3,oneof"`
}

type Expression_Literal_Timestamp struct {
	// Timestamp in units of microseconds since the UNIX epoch.
	Timestamp int64 `protobuf:"varint,14,opt,name=timestamp,proto3,oneof"`
}

type Expression_Literal_Date struct {
	// Date in units of days since the UNIX epoch.
	Date int32 `protobuf:"varint,16,opt,name=date,proto3,oneof"`
}

type Expression_Literal_Time struct {
	// Time in units of microseconds past midnight
	Time int64 `protobuf:"varint,17,opt,name=time,proto3,oneof"`
}

type Expression_Literal_IntervalYearToMonth_ struct {
	IntervalYearToMonth *Expression_Literal_IntervalYearToMonth `protobuf:"bytes,19,opt,name=interval_year_to_month,json=intervalYearToMonth,proto3,oneof"`
}

type Expression_Literal_IntervalDayToSecond_ struct {
	IntervalDayToSecond *Expression_Literal_IntervalDayToSecond `protobuf:"bytes,20,opt,name=interval_day_to_second,json=intervalDayToSecond,proto3,oneof"`
}

type Expression_Literal_FixedChar struct {
	FixedChar string `protobuf:"bytes,21,opt,name=fixed_char,json=fixedChar,proto3,oneof"`
}

type Expression_Literal_VarChar_ struct {
	VarChar *Expression_Literal_VarChar `protobuf:"bytes,22,opt,name=var_char,json=varChar,proto3,oneof"`
}

type Expression_Literal_FixedBinary struct {
	FixedBinary []byte `protobuf:"bytes,23,opt,name=fixed_binary,json=fixedBinary,proto3,oneof"`
}

type Expression_Literal_Decimal_ struct {
	Decimal *Expression_Literal_Decimal `protobuf:"bytes,24,opt,name=decimal,proto3,oneof"`
}

type Expression_Literal_Struct_ struct {
	Struct *Expression_Literal_Struct `protobuf:"bytes,25,opt,name=struct,proto3,oneof"`
}

type Expression_Literal_Map_ struct {
	Map *Expression_Literal_Map `protobuf:"bytes,26,opt,name=map,proto3,oneof"`
}

type Expression_Literal_TimestampTz struct {
	// Timestamp in units of microseconds since the UNIX epoch.
	TimestampTz int64 `protobuf:"varint,27,opt,name=timestamp_tz,json=timestampTz,proto3,oneof"`
}

type Expression_Literal_Uuid struct {
	Uuid []byte `protobuf:"bytes,28,opt,name=uuid,proto3,oneof"`
}

type Expression_Literal_Null struct {
	Null *Type `protobuf:"bytes,29,opt,name=null,proto3,oneof"` // a typed null literal
}

type Expression_Literal_List_ struct {
	List *Expression_Literal_List `protobuf:"bytes,30,opt,name=list,proto3,oneof"`
}

type Expression_Literal_EmptyList struct {
	EmptyList *Type_List `protobuf:"bytes,31,opt,name=empty_list,json=emptyList,proto3,oneof"`
}

type Expression_Literal_EmptyMap struct {
	EmptyMap *Type_Map `protobuf:"bytes,32,opt,name=empty_map,json=emptyMap,proto3,oneof"`
}

func (*Expression_Literal_Boolean) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_I8) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_I16) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_I32) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_I64) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_Fp32) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_Fp64) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_String_) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_Binary) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_Timestamp) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_Date) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_Time) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_IntervalYearToMonth_) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_IntervalDayToSecond_) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_FixedChar) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_VarChar_) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_FixedBinary) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_Decimal_) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_Struct_) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_Map_) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_TimestampTz) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_Uuid) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_Null) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_List_) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_EmptyList) isExpression_Literal_LiteralType() {}

func (*Expression_Literal_EmptyMap) isExpression_Literal_LiteralType() {}

type Expression_ScalarFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// points to a function_anchor defined in this plan
	FunctionReference uint32        `protobuf:"varint,1,opt,name=function_reference,json=functionReference,proto3" json:"function_reference,omitempty"`
	Args              []*Expression `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	OutputType        *Type         `protobuf:"bytes,3,opt,name=output_type,json=outputType,proto3" json:"output_type,omitempty"`
}

func (x *Expression_ScalarFunction) Reset() {
	*x = Expression_ScalarFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_ScalarFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_ScalarFunction) ProtoMessage() {}

func (x *Expression_ScalarFunction) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_ScalarFunction.ProtoReflect.Descriptor instead.
func (*Expression_ScalarFunction) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 2}
}

func (x *Expression_ScalarFunction) GetFunctionReference() uint32 {
	if x != nil {
		return x.FunctionReference
	}
	return 0
}

func (x *Expression_ScalarFunction) GetArgs() []*Expression {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Expression_ScalarFunction) GetOutputType() *Type {
	if x != nil {
		return x.OutputType
	}
	return nil
}

type Expression_WindowFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// points to a function_anchor defined in this plan
	FunctionReference uint32                           `protobuf:"varint,1,opt,name=function_reference,json=functionReference,proto3" json:"function_reference,omitempty"`
	Partitions        []*Expression                    `protobuf:"bytes,2,rep,name=partitions,proto3" json:"partitions,omitempty"`
	Sorts             []*SortField                     `protobuf:"bytes,3,rep,name=sorts,proto3" json:"sorts,omitempty"`
	UpperBound        *Expression_WindowFunction_Bound `protobuf:"bytes,4,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
	LowerBound        *Expression_WindowFunction_Bound `protobuf:"bytes,5,opt,name=lower_bound,json=lowerBound,proto3" json:"lower_bound,omitempty"`
	Phase             AggregationPhase                 `protobuf:"varint,6,opt,name=phase,proto3,enum=substrait.AggregationPhase" json:"phase,omitempty"`
	OutputType        *Type                            `protobuf:"bytes,7,opt,name=output_type,json=outputType,proto3" json:"output_type,omitempty"`
	Args              []*Expression                    `protobuf:"bytes,8,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Expression_WindowFunction) Reset() {
	*x = Expression_WindowFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_WindowFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_WindowFunction) ProtoMessage() {}

func (x *Expression_WindowFunction) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_WindowFunction.ProtoReflect.Descriptor instead.
func (*Expression_WindowFunction) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 3}
}

func (x *Expression_WindowFunction) GetFunctionReference() uint32 {
	if x != nil {
		return x.FunctionReference
	}
	return 0
}

func (x *Expression_WindowFunction) GetPartitions() []*Expression {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *Expression_WindowFunction) GetSorts() []*SortField {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *Expression_WindowFunction) GetUpperBound() *Expression_WindowFunction_Bound {
	if x != nil {
		return x.UpperBound
	}
	return nil
}

func (x *Expression_WindowFunction) GetLowerBound() *Expression_WindowFunction_Bound {
	if x != nil {
		return x.LowerBound
	}
	return nil
}

func (x *Expression_WindowFunction) GetPhase() AggregationPhase {
	if x != nil {
		return x.Phase
	}
	return AggregationPhase_AGGREGATION_PHASE_UNSPECIFIED
}

func (x *Expression_WindowFunction) GetOutputType() *Type {
	if x != nil {
		return x.OutputType
	}
	return nil
}

func (x *Expression_WindowFunction) GetArgs() []*Expression {
	if x != nil {
		return x.Args
	}
	return nil
}

type Expression_IfThen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ifs  []*Expression_IfThen_IfClause `protobuf:"bytes,1,rep,name=ifs,proto3" json:"ifs,omitempty"`
	Else *Expression                   `protobuf:"bytes,2,opt,name=else,proto3" json:"else,omitempty"`
}

func (x *Expression_IfThen) Reset() {
	*x = Expression_IfThen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_IfThen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_IfThen) ProtoMessage() {}

func (x *Expression_IfThen) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_IfThen.ProtoReflect.Descriptor instead.
func (*Expression_IfThen) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 4}
}

func (x *Expression_IfThen) GetIfs() []*Expression_IfThen_IfClause {
	if x != nil {
		return x.Ifs
	}
	return nil
}

func (x *Expression_IfThen) GetElse() *Expression {
	if x != nil {
		return x.Else
	}
	return nil
}

type Expression_Cast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *Type       `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Input *Expression `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *Expression_Cast) Reset() {
	*x = Expression_Cast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_Cast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Cast) ProtoMessage() {}

func (x *Expression_Cast) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Cast.ProtoReflect.Descriptor instead.
func (*Expression_Cast) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 5}
}

func (x *Expression_Cast) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Expression_Cast) GetInput() *Expression {
	if x != nil {
		return x.Input
	}
	return nil
}

type Expression_SwitchExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match *Expression                            `protobuf:"bytes,3,opt,name=match,proto3" json:"match,omitempty"`
	Ifs   []*Expression_SwitchExpression_IfValue `protobuf:"bytes,1,rep,name=ifs,proto3" json:"ifs,omitempty"`
	Else  *Expression                            `protobuf:"bytes,2,opt,name=else,proto3" json:"else,omitempty"`
}

func (x *Expression_SwitchExpression) Reset() {
	*x = Expression_SwitchExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_SwitchExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_SwitchExpression) ProtoMessage() {}

func (x *Expression_SwitchExpression) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_SwitchExpression.ProtoReflect.Descriptor instead.
func (*Expression_SwitchExpression) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 6}
}

func (x *Expression_SwitchExpression) GetMatch() *Expression {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *Expression_SwitchExpression) GetIfs() []*Expression_SwitchExpression_IfValue {
	if x != nil {
		return x.Ifs
	}
	return nil
}

func (x *Expression_SwitchExpression) GetElse() *Expression {
	if x != nil {
		return x.Else
	}
	return nil
}

type Expression_SingularOrList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   *Expression   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Options []*Expression `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *Expression_SingularOrList) Reset() {
	*x = Expression_SingularOrList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_SingularOrList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_SingularOrList) ProtoMessage() {}

func (x *Expression_SingularOrList) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_SingularOrList.ProtoReflect.Descriptor instead.
func (*Expression_SingularOrList) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 7}
}

func (x *Expression_SingularOrList) GetValue() *Expression {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Expression_SingularOrList) GetOptions() []*Expression {
	if x != nil {
		return x.Options
	}
	return nil
}

type Expression_MultiOrList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   []*Expression                    `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	Options []*Expression_MultiOrList_Record `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *Expression_MultiOrList) Reset() {
	*x = Expression_MultiOrList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_MultiOrList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_MultiOrList) ProtoMessage() {}

func (x *Expression_MultiOrList) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_MultiOrList.ProtoReflect.Descriptor instead.
func (*Expression_MultiOrList) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 8}
}

func (x *Expression_MultiOrList) GetValue() []*Expression {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Expression_MultiOrList) GetOptions() []*Expression_MultiOrList_Record {
	if x != nil {
		return x.Options
	}
	return nil
}

type Expression_EmbeddedFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arguments  []*Expression `protobuf:"bytes,1,rep,name=arguments,proto3" json:"arguments,omitempty"`
	OutputType *Type         `protobuf:"bytes,2,opt,name=output_type,json=outputType,proto3" json:"output_type,omitempty"`
	// Types that are assignable to Kind:
	//	*Expression_EmbeddedFunction_PythonPickleFunction_
	//	*Expression_EmbeddedFunction_WebAssemblyFunction_
	Kind isExpression_EmbeddedFunction_Kind `protobuf_oneof:"kind"`
}

func (x *Expression_EmbeddedFunction) Reset() {
	*x = Expression_EmbeddedFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_EmbeddedFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_EmbeddedFunction) ProtoMessage() {}

func (x *Expression_EmbeddedFunction) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_EmbeddedFunction.ProtoReflect.Descriptor instead.
func (*Expression_EmbeddedFunction) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 9}
}

func (x *Expression_EmbeddedFunction) GetArguments() []*Expression {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *Expression_EmbeddedFunction) GetOutputType() *Type {
	if x != nil {
		return x.OutputType
	}
	return nil
}

func (m *Expression_EmbeddedFunction) GetKind() isExpression_EmbeddedFunction_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Expression_EmbeddedFunction) GetPythonPickleFunction() *Expression_EmbeddedFunction_PythonPickleFunction {
	if x, ok := x.GetKind().(*Expression_EmbeddedFunction_PythonPickleFunction_); ok {
		return x.PythonPickleFunction
	}
	return nil
}

func (x *Expression_EmbeddedFunction) GetWebAssemblyFunction() *Expression_EmbeddedFunction_WebAssemblyFunction {
	if x, ok := x.GetKind().(*Expression_EmbeddedFunction_WebAssemblyFunction_); ok {
		return x.WebAssemblyFunction
	}
	return nil
}

type isExpression_EmbeddedFunction_Kind interface {
	isExpression_EmbeddedFunction_Kind()
}

type Expression_EmbeddedFunction_PythonPickleFunction_ struct {
	PythonPickleFunction *Expression_EmbeddedFunction_PythonPickleFunction `protobuf:"bytes,3,opt,name=python_pickle_function,json=pythonPickleFunction,proto3,oneof"`
}

type Expression_EmbeddedFunction_WebAssemblyFunction_ struct {
	WebAssemblyFunction *Expression_EmbeddedFunction_WebAssemblyFunction `protobuf:"bytes,4,opt,name=web_assembly_function,json=webAssemblyFunction,proto3,oneof"`
}

func (*Expression_EmbeddedFunction_PythonPickleFunction_) isExpression_EmbeddedFunction_Kind() {}

func (*Expression_EmbeddedFunction_WebAssemblyFunction_) isExpression_EmbeddedFunction_Kind() {}

// A way to reference the inner property of a complex record. Can reference
// either a map key by literal, a struct field by the ordinal position of
// the desired field or a particular element in an array. Supports
// expressions that would roughly translate to something similar to:
// a.b[2].c['my_map_key'].x where a,b,c and x are struct field references
// (ordinalized in the internal representation here), [2] is a list offset
// and ['my_map_key'] is a reference into a map field.
type Expression_ReferenceSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ReferenceType:
	//	*Expression_ReferenceSegment_MapKey_
	//	*Expression_ReferenceSegment_StructField_
	//	*Expression_ReferenceSegment_ListElement_
	ReferenceType isExpression_ReferenceSegment_ReferenceType `protobuf_oneof:"reference_type"`
}

func (x *Expression_ReferenceSegment) Reset() {
	*x = Expression_ReferenceSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_ReferenceSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_ReferenceSegment) ProtoMessage() {}

func (x *Expression_ReferenceSegment) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_ReferenceSegment.ProtoReflect.Descriptor instead.
func (*Expression_ReferenceSegment) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 10}
}

func (m *Expression_ReferenceSegment) GetReferenceType() isExpression_ReferenceSegment_ReferenceType {
	if m != nil {
		return m.ReferenceType
	}
	return nil
}

func (x *Expression_ReferenceSegment) GetMapKey() *Expression_ReferenceSegment_MapKey {
	if x, ok := x.GetReferenceType().(*Expression_ReferenceSegment_MapKey_); ok {
		return x.MapKey
	}
	return nil
}

func (x *Expression_ReferenceSegment) GetStructField() *Expression_ReferenceSegment_StructField {
	if x, ok := x.GetReferenceType().(*Expression_ReferenceSegment_StructField_); ok {
		return x.StructField
	}
	return nil
}

func (x *Expression_ReferenceSegment) GetListElement() *Expression_ReferenceSegment_ListElement {
	if x, ok := x.GetReferenceType().(*Expression_ReferenceSegment_ListElement_); ok {
		return x.ListElement
	}
	return nil
}

type isExpression_ReferenceSegment_ReferenceType interface {
	isExpression_ReferenceSegment_ReferenceType()
}

type Expression_ReferenceSegment_MapKey_ struct {
	MapKey *Expression_ReferenceSegment_MapKey `protobuf:"bytes,1,opt,name=map_key,json=mapKey,proto3,oneof"`
}

type Expression_ReferenceSegment_StructField_ struct {
	StructField *Expression_ReferenceSegment_StructField `protobuf:"bytes,2,opt,name=struct_field,json=structField,proto3,oneof"`
}

type Expression_ReferenceSegment_ListElement_ struct {
	ListElement *Expression_ReferenceSegment_ListElement `protobuf:"bytes,3,opt,name=list_element,json=listElement,proto3,oneof"`
}

func (*Expression_ReferenceSegment_MapKey_) isExpression_ReferenceSegment_ReferenceType() {}

func (*Expression_ReferenceSegment_StructField_) isExpression_ReferenceSegment_ReferenceType() {}

func (*Expression_ReferenceSegment_ListElement_) isExpression_ReferenceSegment_ReferenceType() {}

// A reference that takes an existing subtype and selectively removes fields
// from it. For example, one might initially have an inner struct with 100
// fields but a a particular operation only needs to interact with only 2 of
// those 100 fields. In this situation, one would use a mask expression to
// eliminate the 98 fields that are not relevant to the rest of the operation
// pipeline.
//
// Note that this does not fundamentally alter the structure of data beyond
// the elimination of unecessary elements.
type Expression_MaskExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Select                 *Expression_MaskExpression_StructSelect `protobuf:"bytes,1,opt,name=select,proto3" json:"select,omitempty"`
	MaintainSingularStruct bool                                    `protobuf:"varint,2,opt,name=maintain_singular_struct,json=maintainSingularStruct,proto3" json:"maintain_singular_struct,omitempty"`
}

func (x *Expression_MaskExpression) Reset() {
	*x = Expression_MaskExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_MaskExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_MaskExpression) ProtoMessage() {}

func (x *Expression_MaskExpression) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_MaskExpression.ProtoReflect.Descriptor instead.
func (*Expression_MaskExpression) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 11}
}

func (x *Expression_MaskExpression) GetSelect() *Expression_MaskExpression_StructSelect {
	if x != nil {
		return x.Select
	}
	return nil
}

func (x *Expression_MaskExpression) GetMaintainSingularStruct() bool {
	if x != nil {
		return x.MaintainSingularStruct
	}
	return false
}

// A reference to an inner part of a complex object. Can reference reference a
// single element or a masked version of elements
type Expression_FieldReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether this is composed of a single element reference or a masked
	// element subtree
	//
	// Types that are assignable to ReferenceType:
	//	*Expression_FieldReference_DirectReference
	//	*Expression_FieldReference_MaskedReference
	ReferenceType isExpression_FieldReference_ReferenceType `protobuf_oneof:"reference_type"`
	// Whether this reference has an origin of a root struct or is based on the
	// ouput of an expression. When this is a RootReference and direct_reference
	// above is used, the direct_reference must be of a type StructField.
	//
	// Types that are assignable to RootType:
	//	*Expression_FieldReference_Expression
	//	*Expression_FieldReference_RootReference_
	//	*Expression_FieldReference_OuterReference_
	RootType isExpression_FieldReference_RootType `protobuf_oneof:"root_type"`
}

func (x *Expression_FieldReference) Reset() {
	*x = Expression_FieldReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_FieldReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_FieldReference) ProtoMessage() {}

func (x *Expression_FieldReference) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_FieldReference.ProtoReflect.Descriptor instead.
func (*Expression_FieldReference) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 12}
}

func (m *Expression_FieldReference) GetReferenceType() isExpression_FieldReference_ReferenceType {
	if m != nil {
		return m.ReferenceType
	}
	return nil
}

func (x *Expression_FieldReference) GetDirectReference() *Expression_ReferenceSegment {
	if x, ok := x.GetReferenceType().(*Expression_FieldReference_DirectReference); ok {
		return x.DirectReference
	}
	return nil
}

func (x *Expression_FieldReference) GetMaskedReference() *Expression_MaskExpression {
	if x, ok := x.GetReferenceType().(*Expression_FieldReference_MaskedReference); ok {
		return x.MaskedReference
	}
	return nil
}

func (m *Expression_FieldReference) GetRootType() isExpression_FieldReference_RootType {
	if m != nil {
		return m.RootType
	}
	return nil
}

func (x *Expression_FieldReference) GetExpression() *Expression {
	if x, ok := x.GetRootType().(*Expression_FieldReference_Expression); ok {
		return x.Expression
	}
	return nil
}

func (x *Expression_FieldReference) GetRootReference() *Expression_FieldReference_RootReference {
	if x, ok := x.GetRootType().(*Expression_FieldReference_RootReference_); ok {
		return x.RootReference
	}
	return nil
}

func (x *Expression_FieldReference) GetOuterReference() *Expression_FieldReference_OuterReference {
	if x, ok := x.GetRootType().(*Expression_FieldReference_OuterReference_); ok {
		return x.OuterReference
	}
	return nil
}

type isExpression_FieldReference_ReferenceType interface {
	isExpression_FieldReference_ReferenceType()
}

type Expression_FieldReference_DirectReference struct {
	DirectReference *Expression_ReferenceSegment `protobuf:"bytes,1,opt,name=direct_reference,json=directReference,proto3,oneof"`
}

type Expression_FieldReference_MaskedReference struct {
	MaskedReference *Expression_MaskExpression `protobuf:"bytes,2,opt,name=masked_reference,json=maskedReference,proto3,oneof"`
}

func (*Expression_FieldReference_DirectReference) isExpression_FieldReference_ReferenceType() {}

func (*Expression_FieldReference_MaskedReference) isExpression_FieldReference_ReferenceType() {}

type isExpression_FieldReference_RootType interface {
	isExpression_FieldReference_RootType()
}

type Expression_FieldReference_Expression struct {
	Expression *Expression `protobuf:"bytes,3,opt,name=expression,proto3,oneof"`
}

type Expression_FieldReference_RootReference_ struct {
	RootReference *Expression_FieldReference_RootReference `protobuf:"bytes,4,opt,name=root_reference,json=rootReference,proto3,oneof"`
}

type Expression_FieldReference_OuterReference_ struct {
	OuterReference *Expression_FieldReference_OuterReference `protobuf:"bytes,5,opt,name=outer_reference,json=outerReference,proto3,oneof"`
}

func (*Expression_FieldReference_Expression) isExpression_FieldReference_RootType() {}

func (*Expression_FieldReference_RootReference_) isExpression_FieldReference_RootType() {}

func (*Expression_FieldReference_OuterReference_) isExpression_FieldReference_RootType() {}

// Subquery relation expression
type Expression_Subquery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SubqueryType:
	//	*Expression_Subquery_Scalar_
	//	*Expression_Subquery_InPredicate_
	//	*Expression_Subquery_SetPredicate_
	//	*Expression_Subquery_SetComparison_
	SubqueryType isExpression_Subquery_SubqueryType `protobuf_oneof:"subquery_type"`
}

func (x *Expression_Subquery) Reset() {
	*x = Expression_Subquery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_Subquery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Subquery) ProtoMessage() {}

func (x *Expression_Subquery) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Subquery.ProtoReflect.Descriptor instead.
func (*Expression_Subquery) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 13}
}

func (m *Expression_Subquery) GetSubqueryType() isExpression_Subquery_SubqueryType {
	if m != nil {
		return m.SubqueryType
	}
	return nil
}

func (x *Expression_Subquery) GetScalar() *Expression_Subquery_Scalar {
	if x, ok := x.GetSubqueryType().(*Expression_Subquery_Scalar_); ok {
		return x.Scalar
	}
	return nil
}

func (x *Expression_Subquery) GetInPredicate() *Expression_Subquery_InPredicate {
	if x, ok := x.GetSubqueryType().(*Expression_Subquery_InPredicate_); ok {
		return x.InPredicate
	}
	return nil
}

func (x *Expression_Subquery) GetSetPredicate() *Expression_Subquery_SetPredicate {
	if x, ok := x.GetSubqueryType().(*Expression_Subquery_SetPredicate_); ok {
		return x.SetPredicate
	}
	return nil
}

func (x *Expression_Subquery) GetSetComparison() *Expression_Subquery_SetComparison {
	if x, ok := x.GetSubqueryType().(*Expression_Subquery_SetComparison_); ok {
		return x.SetComparison
	}
	return nil
}

type isExpression_Subquery_SubqueryType interface {
	isExpression_Subquery_SubqueryType()
}

type Expression_Subquery_Scalar_ struct {
	// Scalar subquery
	Scalar *Expression_Subquery_Scalar `protobuf:"bytes,1,opt,name=scalar,proto3,oneof"`
}

type Expression_Subquery_InPredicate_ struct {
	// x IN y predicate
	InPredicate *Expression_Subquery_InPredicate `protobuf:"bytes,2,opt,name=in_predicate,json=inPredicate,proto3,oneof"`
}

type Expression_Subquery_SetPredicate_ struct {
	// EXISTS/UNIQUE predicate
	SetPredicate *Expression_Subquery_SetPredicate `protobuf:"bytes,3,opt,name=set_predicate,json=setPredicate,proto3,oneof"`
}

type Expression_Subquery_SetComparison_ struct {
	// ANY/ALL predicate
	SetComparison *Expression_Subquery_SetComparison `protobuf:"bytes,4,opt,name=set_comparison,json=setComparison,proto3,oneof"`
}

func (*Expression_Subquery_Scalar_) isExpression_Subquery_SubqueryType() {}

func (*Expression_Subquery_InPredicate_) isExpression_Subquery_SubqueryType() {}

func (*Expression_Subquery_SetPredicate_) isExpression_Subquery_SubqueryType() {}

func (*Expression_Subquery_SetComparison_) isExpression_Subquery_SubqueryType() {}

type Expression_Enum_Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Expression_Enum_Empty) Reset() {
	*x = Expression_Enum_Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_Enum_Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Enum_Empty) ProtoMessage() {}

func (x *Expression_Enum_Empty) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Enum_Empty.ProtoReflect.Descriptor instead.
func (*Expression_Enum_Empty) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 0, 0}
}

type Expression_Literal_VarChar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Length uint32 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *Expression_Literal_VarChar) Reset() {
	*x = Expression_Literal_VarChar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_Literal_VarChar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Literal_VarChar) ProtoMessage() {}

func (x *Expression_Literal_VarChar) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Literal_VarChar.ProtoReflect.Descriptor instead.
func (*Expression_Literal_VarChar) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 1, 0}
}

func (x *Expression_Literal_VarChar) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Expression_Literal_VarChar) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type Expression_Literal_Decimal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// little-endian twos-complement integer representation of complete value
	// (ignoring precision) Always 16 bytes in length
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// The maximum number of digits allowed in the value.
	// the maximum precision is 38.
	Precision int32 `protobuf:"varint,2,opt,name=precision,proto3" json:"precision,omitempty"`
	// declared scale of decimal literal
	Scale int32 `protobuf:"varint,3,opt,name=scale,proto3" json:"scale,omitempty"`
}

func (x *Expression_Literal_Decimal) Reset() {
	*x = Expression_Literal_Decimal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_Literal_Decimal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Literal_Decimal) ProtoMessage() {}

func (x *Expression_Literal_Decimal) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Literal_Decimal.ProtoReflect.Descriptor instead.
func (*Expression_Literal_Decimal) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 1, 1}
}

func (x *Expression_Literal_Decimal) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Expression_Literal_Decimal) GetPrecision() int32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *Expression_Literal_Decimal) GetScale() int32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

type Expression_Literal_Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyValues []*Expression_Literal_Map_KeyValue `protobuf:"bytes,1,rep,name=key_values,json=keyValues,proto3" json:"key_values,omitempty"`
}

func (x *Expression_Literal_Map) Reset() {
	*x = Expression_Literal_Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_Literal_Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Literal_Map) ProtoMessage() {}

func (x *Expression_Literal_Map) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Literal_Map.ProtoReflect.Descriptor instead.
func (*Expression_Literal_Map) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 1, 2}
}

func (x *Expression_Literal_Map) GetKeyValues() []*Expression_Literal_Map_KeyValue {
	if x != nil {
		return x.KeyValues
	}
	return nil
}

type Expression_Literal_IntervalYearToMonth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Years  int32 `protobuf:"varint,1,opt,name=years,proto3" json:"years,omitempty"`
	Months int32 `protobuf:"varint,2,opt,name=months,proto3" json:"months,omitempty"`
}

func (x *Expression_Literal_IntervalYearToMonth) Reset() {
	*x = Expression_Literal_IntervalYearToMonth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_Literal_IntervalYearToMonth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Literal_IntervalYearToMonth) ProtoMessage() {}

func (x *Expression_Literal_IntervalYearToMonth) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Literal_IntervalYearToMonth.ProtoReflect.Descriptor instead.
func (*Expression_Literal_IntervalYearToMonth) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 1, 3}
}

func (x *Expression_Literal_IntervalYearToMonth) GetYears() int32 {
	if x != nil {
		return x.Years
	}
	return 0
}

func (x *Expression_Literal_IntervalYearToMonth) GetMonths() int32 {
	if x != nil {
		return x.Months
	}
	return 0
}

type Expression_Literal_IntervalDayToSecond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Days    int32 `protobuf:"varint,1,opt,name=days,proto3" json:"days,omitempty"`
	Seconds int32 `protobuf:"varint,2,opt,name=seconds,proto3" json:"seconds,omitempty"`
}

func (x *Expression_Literal_IntervalDayToSecond) Reset() {
	*x = Expression_Literal_IntervalDayToSecond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_Literal_IntervalDayToSecond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Literal_IntervalDayToSecond) ProtoMessage() {}

func (x *Expression_Literal_IntervalDayToSecond) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Literal_IntervalDayToSecond.ProtoReflect.Descriptor instead.
func (*Expression_Literal_IntervalDayToSecond) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 1, 4}
}

func (x *Expression_Literal_IntervalDayToSecond) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *Expression_Literal_IntervalDayToSecond) GetSeconds() int32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

type Expression_Literal_Struct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A possibly heterogeneously typed list of literals
	Fields []*Expression_Literal `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Expression_Literal_Struct) Reset() {
	*x = Expression_Literal_Struct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_Literal_Struct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Literal_Struct) ProtoMessage() {}

func (x *Expression_Literal_Struct) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Literal_Struct.ProtoReflect.Descriptor instead.
func (*Expression_Literal_Struct) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 1, 5}
}

func (x *Expression_Literal_Struct) GetFields() []*Expression_Literal {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Expression_Literal_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A homogeneously typed list of literals
	Values []*Expression_Literal `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Expression_Literal_List) Reset() {
	*x = Expression_Literal_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_Literal_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Literal_List) ProtoMessage() {}

func (x *Expression_Literal_List) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Literal_List.ProtoReflect.Descriptor instead.
func (*Expression_Literal_List) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 1, 6}
}

func (x *Expression_Literal_List) GetValues() []*Expression_Literal {
	if x != nil {
		return x.Values
	}
	return nil
}

type Expression_Literal_Map_KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *Expression_Literal `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *Expression_Literal `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Expression_Literal_Map_KeyValue) Reset() {
	*x = Expression_Literal_Map_KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_Literal_Map_KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Literal_Map_KeyValue) ProtoMessage() {}

func (x *Expression_Literal_Map_KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Literal_Map_KeyValue.ProtoReflect.Descriptor instead.
func (*Expression_Literal_Map_KeyValue) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 1, 2, 0}
}

func (x *Expression_Literal_Map_KeyValue) GetKey() *Expression_Literal {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Expression_Literal_Map_KeyValue) GetValue() *Expression_Literal {
	if x != nil {
		return x.Value
	}
	return nil
}

type Expression_WindowFunction_Bound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*Expression_WindowFunction_Bound_Preceding_
	//	*Expression_WindowFunction_Bound_Following_
	//	*Expression_WindowFunction_Bound_CurrentRow_
	//	*Expression_WindowFunction_Bound_Unbounded_
	Kind isExpression_WindowFunction_Bound_Kind `protobuf_oneof:"kind"`
}

func (x *Expression_WindowFunction_Bound) Reset() {
	*x = Expression_WindowFunction_Bound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_WindowFunction_Bound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_WindowFunction_Bound) ProtoMessage() {}

func (x *Expression_WindowFunction_Bound) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_WindowFunction_Bound.ProtoReflect.Descriptor instead.
func (*Expression_WindowFunction_Bound) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 3, 0}
}

func (m *Expression_WindowFunction_Bound) GetKind() isExpression_WindowFunction_Bound_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Expression_WindowFunction_Bound) GetPreceding() *Expression_WindowFunction_Bound_Preceding {
	if x, ok := x.GetKind().(*Expression_WindowFunction_Bound_Preceding_); ok {
		return x.Preceding
	}
	return nil
}

func (x *Expression_WindowFunction_Bound) GetFollowing() *Expression_WindowFunction_Bound_Following {
	if x, ok := x.GetKind().(*Expression_WindowFunction_Bound_Following_); ok {
		return x.Following
	}
	return nil
}

func (x *Expression_WindowFunction_Bound) GetCurrentRow() *Expression_WindowFunction_Bound_CurrentRow {
	if x, ok := x.GetKind().(*Expression_WindowFunction_Bound_CurrentRow_); ok {
		return x.CurrentRow
	}
	return nil
}

func (x *Expression_WindowFunction_Bound) GetUnbounded() *Expression_WindowFunction_Bound_Unbounded {
	if x, ok := x.GetKind().(*Expression_WindowFunction_Bound_Unbounded_); ok {
		return x.Unbounded
	}
	return nil
}

type isExpression_WindowFunction_Bound_Kind interface {
	isExpression_WindowFunction_Bound_Kind()
}

type Expression_WindowFunction_Bound_Preceding_ struct {
	Preceding *Expression_WindowFunction_Bound_Preceding `protobuf:"bytes,1,opt,name=preceding,proto3,oneof"`
}

type Expression_WindowFunction_Bound_Following_ struct {
	Following *Expression_WindowFunction_Bound_Following `protobuf:"bytes,2,opt,name=following,proto3,oneof"`
}

type Expression_WindowFunction_Bound_CurrentRow_ struct {
	CurrentRow *Expression_WindowFunction_Bound_CurrentRow `protobuf:"bytes,3,opt,name=current_row,json=currentRow,proto3,oneof"`
}

type Expression_WindowFunction_Bound_Unbounded_ struct {
	Unbounded *Expression_WindowFunction_Bound_Unbounded `protobuf:"bytes,4,opt,name=unbounded,proto3,oneof"`
}

func (*Expression_WindowFunction_Bound_Preceding_) isExpression_WindowFunction_Bound_Kind() {}

func (*Expression_WindowFunction_Bound_Following_) isExpression_WindowFunction_Bound_Kind() {}

func (*Expression_WindowFunction_Bound_CurrentRow_) isExpression_WindowFunction_Bound_Kind() {}

func (*Expression_WindowFunction_Bound_Unbounded_) isExpression_WindowFunction_Bound_Kind() {}

type Expression_WindowFunction_Bound_Preceding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *Expression_WindowFunction_Bound_Preceding) Reset() {
	*x = Expression_WindowFunction_Bound_Preceding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_WindowFunction_Bound_Preceding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_WindowFunction_Bound_Preceding) ProtoMessage() {}

func (x *Expression_WindowFunction_Bound_Preceding) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_WindowFunction_Bound_Preceding.ProtoReflect.Descriptor instead.
func (*Expression_WindowFunction_Bound_Preceding) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 3, 0, 0}
}

func (x *Expression_WindowFunction_Bound_Preceding) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type Expression_WindowFunction_Bound_Following struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *Expression_WindowFunction_Bound_Following) Reset() {
	*x = Expression_WindowFunction_Bound_Following{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_WindowFunction_Bound_Following) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_WindowFunction_Bound_Following) ProtoMessage() {}

func (x *Expression_WindowFunction_Bound_Following) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_WindowFunction_Bound_Following.ProtoReflect.Descriptor instead.
func (*Expression_WindowFunction_Bound_Following) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 3, 0, 1}
}

func (x *Expression_WindowFunction_Bound_Following) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type Expression_WindowFunction_Bound_CurrentRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Expression_WindowFunction_Bound_CurrentRow) Reset() {
	*x = Expression_WindowFunction_Bound_CurrentRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_WindowFunction_Bound_CurrentRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_WindowFunction_Bound_CurrentRow) ProtoMessage() {}

func (x *Expression_WindowFunction_Bound_CurrentRow) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_WindowFunction_Bound_CurrentRow.ProtoReflect.Descriptor instead.
func (*Expression_WindowFunction_Bound_CurrentRow) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 3, 0, 2}
}

type Expression_WindowFunction_Bound_Unbounded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Expression_WindowFunction_Bound_Unbounded) Reset() {
	*x = Expression_WindowFunction_Bound_Unbounded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_WindowFunction_Bound_Unbounded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_WindowFunction_Bound_Unbounded) ProtoMessage() {}

func (x *Expression_WindowFunction_Bound_Unbounded) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_WindowFunction_Bound_Unbounded.ProtoReflect.Descriptor instead.
func (*Expression_WindowFunction_Bound_Unbounded) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 3, 0, 3}
}

type Expression_IfThen_IfClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	If   *Expression `protobuf:"bytes,1,opt,name=if,proto3" json:"if,omitempty"`
	Then *Expression `protobuf:"bytes,2,opt,name=then,proto3" json:"then,omitempty"`
}

func (x *Expression_IfThen_IfClause) Reset() {
	*x = Expression_IfThen_IfClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_IfThen_IfClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_IfThen_IfClause) ProtoMessage() {}

func (x *Expression_IfThen_IfClause) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_IfThen_IfClause.ProtoReflect.Descriptor instead.
func (*Expression_IfThen_IfClause) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 4, 0}
}

func (x *Expression_IfThen_IfClause) GetIf() *Expression {
	if x != nil {
		return x.If
	}
	return nil
}

func (x *Expression_IfThen_IfClause) GetThen() *Expression {
	if x != nil {
		return x.Then
	}
	return nil
}

type Expression_SwitchExpression_IfValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	If   *Expression_Literal `protobuf:"bytes,1,opt,name=if,proto3" json:"if,omitempty"`
	Then *Expression         `protobuf:"bytes,2,opt,name=then,proto3" json:"then,omitempty"`
}

func (x *Expression_SwitchExpression_IfValue) Reset() {
	*x = Expression_SwitchExpression_IfValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_SwitchExpression_IfValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_SwitchExpression_IfValue) ProtoMessage() {}

func (x *Expression_SwitchExpression_IfValue) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_SwitchExpression_IfValue.ProtoReflect.Descriptor instead.
func (*Expression_SwitchExpression_IfValue) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 6, 0}
}

func (x *Expression_SwitchExpression_IfValue) GetIf() *Expression_Literal {
	if x != nil {
		return x.If
	}
	return nil
}

func (x *Expression_SwitchExpression_IfValue) GetThen() *Expression {
	if x != nil {
		return x.Then
	}
	return nil
}

type Expression_MultiOrList_Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Expression `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Expression_MultiOrList_Record) Reset() {
	*x = Expression_MultiOrList_Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_MultiOrList_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_MultiOrList_Record) ProtoMessage() {}

func (x *Expression_MultiOrList_Record) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_MultiOrList_Record.ProtoReflect.Descriptor instead.
func (*Expression_MultiOrList_Record) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 8, 0}
}

func (x *Expression_MultiOrList_Record) GetFields() []*Expression {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Expression_EmbeddedFunction_PythonPickleFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function     []byte   `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	Prerequisite []string `protobuf:"bytes,2,rep,name=prerequisite,proto3" json:"prerequisite,omitempty"`
}

func (x *Expression_EmbeddedFunction_PythonPickleFunction) Reset() {
	*x = Expression_EmbeddedFunction_PythonPickleFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_EmbeddedFunction_PythonPickleFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_EmbeddedFunction_PythonPickleFunction) ProtoMessage() {}

func (x *Expression_EmbeddedFunction_PythonPickleFunction) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_EmbeddedFunction_PythonPickleFunction.ProtoReflect.Descriptor instead.
func (*Expression_EmbeddedFunction_PythonPickleFunction) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 9, 0}
}

func (x *Expression_EmbeddedFunction_PythonPickleFunction) GetFunction() []byte {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *Expression_EmbeddedFunction_PythonPickleFunction) GetPrerequisite() []string {
	if x != nil {
		return x.Prerequisite
	}
	return nil
}

type Expression_EmbeddedFunction_WebAssemblyFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Script       []byte   `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
	Prerequisite []string `protobuf:"bytes,2,rep,name=prerequisite,proto3" json:"prerequisite,omitempty"`
}

func (x *Expression_EmbeddedFunction_WebAssemblyFunction) Reset() {
	*x = Expression_EmbeddedFunction_WebAssemblyFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_EmbeddedFunction_WebAssemblyFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_EmbeddedFunction_WebAssemblyFunction) ProtoMessage() {}

func (x *Expression_EmbeddedFunction_WebAssemblyFunction) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_EmbeddedFunction_WebAssemblyFunction.ProtoReflect.Descriptor instead.
func (*Expression_EmbeddedFunction_WebAssemblyFunction) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 9, 1}
}

func (x *Expression_EmbeddedFunction_WebAssemblyFunction) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *Expression_EmbeddedFunction_WebAssemblyFunction) GetPrerequisite() []string {
	if x != nil {
		return x.Prerequisite
	}
	return nil
}

type Expression_ReferenceSegment_MapKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// literal based reference to specific possible value in map.
	MapKey *Expression_Literal `protobuf:"bytes,1,opt,name=map_key,json=mapKey,proto3" json:"map_key,omitempty"`
	// Optional child segment
	Child *Expression_ReferenceSegment `protobuf:"bytes,2,opt,name=child,proto3" json:"child,omitempty"`
}

func (x *Expression_ReferenceSegment_MapKey) Reset() {
	*x = Expression_ReferenceSegment_MapKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_ReferenceSegment_MapKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_ReferenceSegment_MapKey) ProtoMessage() {}

func (x *Expression_ReferenceSegment_MapKey) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_ReferenceSegment_MapKey.ProtoReflect.Descriptor instead.
func (*Expression_ReferenceSegment_MapKey) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 10, 0}
}

func (x *Expression_ReferenceSegment_MapKey) GetMapKey() *Expression_Literal {
	if x != nil {
		return x.MapKey
	}
	return nil
}

func (x *Expression_ReferenceSegment_MapKey) GetChild() *Expression_ReferenceSegment {
	if x != nil {
		return x.Child
	}
	return nil
}

type Expression_ReferenceSegment_StructField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// zero-indexed ordinal position of field in struct
	Field int32 `protobuf:"varint,1,opt,name=field,proto3" json:"field,omitempty"`
	// Optional child segment
	Child *Expression_ReferenceSegment `protobuf:"bytes,2,opt,name=child,proto3" json:"child,omitempty"`
}

func (x *Expression_ReferenceSegment_StructField) Reset() {
	*x = Expression_ReferenceSegment_StructField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_ReferenceSegment_StructField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_ReferenceSegment_StructField) ProtoMessage() {}

func (x *Expression_ReferenceSegment_StructField) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_ReferenceSegment_StructField.ProtoReflect.Descriptor instead.
func (*Expression_ReferenceSegment_StructField) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 10, 1}
}

func (x *Expression_ReferenceSegment_StructField) GetField() int32 {
	if x != nil {
		return x.Field
	}
	return 0
}

func (x *Expression_ReferenceSegment_StructField) GetChild() *Expression_ReferenceSegment {
	if x != nil {
		return x.Child
	}
	return nil
}

type Expression_ReferenceSegment_ListElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// zero-indexed ordinal position of element in list
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// Optional child segment
	Child *Expression_ReferenceSegment `protobuf:"bytes,2,opt,name=child,proto3" json:"child,omitempty"`
}

func (x *Expression_ReferenceSegment_ListElement) Reset() {
	*x = Expression_ReferenceSegment_ListElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_ReferenceSegment_ListElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_ReferenceSegment_ListElement) ProtoMessage() {}

func (x *Expression_ReferenceSegment_ListElement) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_ReferenceSegment_ListElement.ProtoReflect.Descriptor instead.
func (*Expression_ReferenceSegment_ListElement) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 10, 2}
}

func (x *Expression_ReferenceSegment_ListElement) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Expression_ReferenceSegment_ListElement) GetChild() *Expression_ReferenceSegment {
	if x != nil {
		return x.Child
	}
	return nil
}

type Expression_MaskExpression_Select struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Expression_MaskExpression_Select_Struct
	//	*Expression_MaskExpression_Select_List
	//	*Expression_MaskExpression_Select_Map
	Type isExpression_MaskExpression_Select_Type `protobuf_oneof:"type"`
}

func (x *Expression_MaskExpression_Select) Reset() {
	*x = Expression_MaskExpression_Select{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_MaskExpression_Select) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_MaskExpression_Select) ProtoMessage() {}

func (x *Expression_MaskExpression_Select) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_MaskExpression_Select.ProtoReflect.Descriptor instead.
func (*Expression_MaskExpression_Select) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 11, 0}
}

func (m *Expression_MaskExpression_Select) GetType() isExpression_MaskExpression_Select_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Expression_MaskExpression_Select) GetStruct() *Expression_MaskExpression_StructSelect {
	if x, ok := x.GetType().(*Expression_MaskExpression_Select_Struct); ok {
		return x.Struct
	}
	return nil
}

func (x *Expression_MaskExpression_Select) GetList() *Expression_MaskExpression_ListSelect {
	if x, ok := x.GetType().(*Expression_MaskExpression_Select_List); ok {
		return x.List
	}
	return nil
}

func (x *Expression_MaskExpression_Select) GetMap() *Expression_MaskExpression_MapSelect {
	if x, ok := x.GetType().(*Expression_MaskExpression_Select_Map); ok {
		return x.Map
	}
	return nil
}

type isExpression_MaskExpression_Select_Type interface {
	isExpression_MaskExpression_Select_Type()
}

type Expression_MaskExpression_Select_Struct struct {
	Struct *Expression_MaskExpression_StructSelect `protobuf:"bytes,1,opt,name=struct,proto3,oneof"`
}

type Expression_MaskExpression_Select_List struct {
	List *Expression_MaskExpression_ListSelect `protobuf:"bytes,2,opt,name=list,proto3,oneof"`
}

type Expression_MaskExpression_Select_Map struct {
	Map *Expression_MaskExpression_MapSelect `protobuf:"bytes,3,opt,name=map,proto3,oneof"`
}

func (*Expression_MaskExpression_Select_Struct) isExpression_MaskExpression_Select_Type() {}

func (*Expression_MaskExpression_Select_List) isExpression_MaskExpression_Select_Type() {}

func (*Expression_MaskExpression_Select_Map) isExpression_MaskExpression_Select_Type() {}

type Expression_MaskExpression_StructSelect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StructItems []*Expression_MaskExpression_StructItem `protobuf:"bytes,1,rep,name=struct_items,json=structItems,proto3" json:"struct_items,omitempty"`
}

func (x *Expression_MaskExpression_StructSelect) Reset() {
	*x = Expression_MaskExpression_StructSelect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_MaskExpression_StructSelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_MaskExpression_StructSelect) ProtoMessage() {}

func (x *Expression_MaskExpression_StructSelect) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_MaskExpression_StructSelect.ProtoReflect.Descriptor instead.
func (*Expression_MaskExpression_StructSelect) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 11, 1}
}

func (x *Expression_MaskExpression_StructSelect) GetStructItems() []*Expression_MaskExpression_StructItem {
	if x != nil {
		return x.StructItems
	}
	return nil
}

type Expression_MaskExpression_StructItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field int32                             `protobuf:"varint,1,opt,name=field,proto3" json:"field,omitempty"`
	Child *Expression_MaskExpression_Select `protobuf:"bytes,2,opt,name=child,proto3" json:"child,omitempty"`
}

func (x *Expression_MaskExpression_StructItem) Reset() {
	*x = Expression_MaskExpression_StructItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_MaskExpression_StructItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_MaskExpression_StructItem) ProtoMessage() {}

func (x *Expression_MaskExpression_StructItem) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_MaskExpression_StructItem.ProtoReflect.Descriptor instead.
func (*Expression_MaskExpression_StructItem) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 11, 2}
}

func (x *Expression_MaskExpression_StructItem) GetField() int32 {
	if x != nil {
		return x.Field
	}
	return 0
}

func (x *Expression_MaskExpression_StructItem) GetChild() *Expression_MaskExpression_Select {
	if x != nil {
		return x.Child
	}
	return nil
}

type Expression_MaskExpression_ListSelect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selection []*Expression_MaskExpression_ListSelect_ListSelectItem `protobuf:"bytes,1,rep,name=selection,proto3" json:"selection,omitempty"`
	Child     *Expression_MaskExpression_Select                      `protobuf:"bytes,2,opt,name=child,proto3" json:"child,omitempty"`
}

func (x *Expression_MaskExpression_ListSelect) Reset() {
	*x = Expression_MaskExpression_ListSelect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_MaskExpression_ListSelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_MaskExpression_ListSelect) ProtoMessage() {}

func (x *Expression_MaskExpression_ListSelect) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_MaskExpression_ListSelect.ProtoReflect.Descriptor instead.
func (*Expression_MaskExpression_ListSelect) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 11, 3}
}

func (x *Expression_MaskExpression_ListSelect) GetSelection() []*Expression_MaskExpression_ListSelect_ListSelectItem {
	if x != nil {
		return x.Selection
	}
	return nil
}

func (x *Expression_MaskExpression_ListSelect) GetChild() *Expression_MaskExpression_Select {
	if x != nil {
		return x.Child
	}
	return nil
}

type Expression_MaskExpression_MapSelect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Select:
	//	*Expression_MaskExpression_MapSelect_Key
	//	*Expression_MaskExpression_MapSelect_Expression
	Select isExpression_MaskExpression_MapSelect_Select `protobuf_oneof:"select"`
	Child  *Expression_MaskExpression_Select            `protobuf:"bytes,3,opt,name=child,proto3" json:"child,omitempty"`
}

func (x *Expression_MaskExpression_MapSelect) Reset() {
	*x = Expression_MaskExpression_MapSelect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_MaskExpression_MapSelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_MaskExpression_MapSelect) ProtoMessage() {}

func (x *Expression_MaskExpression_MapSelect) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_MaskExpression_MapSelect.ProtoReflect.Descriptor instead.
func (*Expression_MaskExpression_MapSelect) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 11, 4}
}

func (m *Expression_MaskExpression_MapSelect) GetSelect() isExpression_MaskExpression_MapSelect_Select {
	if m != nil {
		return m.Select
	}
	return nil
}

func (x *Expression_MaskExpression_MapSelect) GetKey() *Expression_MaskExpression_MapSelect_MapKey {
	if x, ok := x.GetSelect().(*Expression_MaskExpression_MapSelect_Key); ok {
		return x.Key
	}
	return nil
}

func (x *Expression_MaskExpression_MapSelect) GetExpression() *Expression_MaskExpression_MapSelect_MapKeyExpression {
	if x, ok := x.GetSelect().(*Expression_MaskExpression_MapSelect_Expression); ok {
		return x.Expression
	}
	return nil
}

func (x *Expression_MaskExpression_MapSelect) GetChild() *Expression_MaskExpression_Select {
	if x != nil {
		return x.Child
	}
	return nil
}

type isExpression_MaskExpression_MapSelect_Select interface {
	isExpression_MaskExpression_MapSelect_Select()
}

type Expression_MaskExpression_MapSelect_Key struct {
	Key *Expression_MaskExpression_MapSelect_MapKey `protobuf:"bytes,1,opt,name=key,proto3,oneof"`
}

type Expression_MaskExpression_MapSelect_Expression struct {
	Expression *Expression_MaskExpression_MapSelect_MapKeyExpression `protobuf:"bytes,2,opt,name=expression,proto3,oneof"`
}

func (*Expression_MaskExpression_MapSelect_Key) isExpression_MaskExpression_MapSelect_Select() {}

func (*Expression_MaskExpression_MapSelect_Expression) isExpression_MaskExpression_MapSelect_Select() {
}

type Expression_MaskExpression_ListSelect_ListSelectItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Expression_MaskExpression_ListSelect_ListSelectItem_Item
	//	*Expression_MaskExpression_ListSelect_ListSelectItem_Slice
	Type isExpression_MaskExpression_ListSelect_ListSelectItem_Type `protobuf_oneof:"type"`
}

func (x *Expression_MaskExpression_ListSelect_ListSelectItem) Reset() {
	*x = Expression_MaskExpression_ListSelect_ListSelectItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_MaskExpression_ListSelect_ListSelectItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_MaskExpression_ListSelect_ListSelectItem) ProtoMessage() {}

func (x *Expression_MaskExpression_ListSelect_ListSelectItem) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_MaskExpression_ListSelect_ListSelectItem.ProtoReflect.Descriptor instead.
func (*Expression_MaskExpression_ListSelect_ListSelectItem) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 11, 3, 0}
}

func (m *Expression_MaskExpression_ListSelect_ListSelectItem) GetType() isExpression_MaskExpression_ListSelect_ListSelectItem_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Expression_MaskExpression_ListSelect_ListSelectItem) GetItem() *Expression_MaskExpression_ListSelect_ListSelectItem_ListElement {
	if x, ok := x.GetType().(*Expression_MaskExpression_ListSelect_ListSelectItem_Item); ok {
		return x.Item
	}
	return nil
}

func (x *Expression_MaskExpression_ListSelect_ListSelectItem) GetSlice() *Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice {
	if x, ok := x.GetType().(*Expression_MaskExpression_ListSelect_ListSelectItem_Slice); ok {
		return x.Slice
	}
	return nil
}

type isExpression_MaskExpression_ListSelect_ListSelectItem_Type interface {
	isExpression_MaskExpression_ListSelect_ListSelectItem_Type()
}

type Expression_MaskExpression_ListSelect_ListSelectItem_Item struct {
	Item *Expression_MaskExpression_ListSelect_ListSelectItem_ListElement `protobuf:"bytes,1,opt,name=item,proto3,oneof"`
}

type Expression_MaskExpression_ListSelect_ListSelectItem_Slice struct {
	Slice *Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice `protobuf:"bytes,2,opt,name=slice,proto3,oneof"`
}

func (*Expression_MaskExpression_ListSelect_ListSelectItem_Item) isExpression_MaskExpression_ListSelect_ListSelectItem_Type() {
}

func (*Expression_MaskExpression_ListSelect_ListSelectItem_Slice) isExpression_MaskExpression_ListSelect_ListSelectItem_Type() {
}

type Expression_MaskExpression_ListSelect_ListSelectItem_ListElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field int32 `protobuf:"varint,1,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *Expression_MaskExpression_ListSelect_ListSelectItem_ListElement) Reset() {
	*x = Expression_MaskExpression_ListSelect_ListSelectItem_ListElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_MaskExpression_ListSelect_ListSelectItem_ListElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_MaskExpression_ListSelect_ListSelectItem_ListElement) ProtoMessage() {}

func (x *Expression_MaskExpression_ListSelect_ListSelectItem_ListElement) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_MaskExpression_ListSelect_ListSelectItem_ListElement.ProtoReflect.Descriptor instead.
func (*Expression_MaskExpression_ListSelect_ListSelectItem_ListElement) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 11, 3, 0, 0}
}

func (x *Expression_MaskExpression_ListSelect_ListSelectItem_ListElement) GetField() int32 {
	if x != nil {
		return x.Field
	}
	return 0
}

type Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice) Reset() {
	*x = Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice) ProtoMessage() {}

func (x *Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice.ProtoReflect.Descriptor instead.
func (*Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 11, 3, 0, 1}
}

func (x *Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type Expression_MaskExpression_MapSelect_MapKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapKey string `protobuf:"bytes,1,opt,name=map_key,json=mapKey,proto3" json:"map_key,omitempty"`
}

func (x *Expression_MaskExpression_MapSelect_MapKey) Reset() {
	*x = Expression_MaskExpression_MapSelect_MapKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_MaskExpression_MapSelect_MapKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_MaskExpression_MapSelect_MapKey) ProtoMessage() {}

func (x *Expression_MaskExpression_MapSelect_MapKey) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_MaskExpression_MapSelect_MapKey.ProtoReflect.Descriptor instead.
func (*Expression_MaskExpression_MapSelect_MapKey) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 11, 4, 0}
}

func (x *Expression_MaskExpression_MapSelect_MapKey) GetMapKey() string {
	if x != nil {
		return x.MapKey
	}
	return ""
}

type Expression_MaskExpression_MapSelect_MapKeyExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapKeyExpression string `protobuf:"bytes,1,opt,name=map_key_expression,json=mapKeyExpression,proto3" json:"map_key_expression,omitempty"`
}

func (x *Expression_MaskExpression_MapSelect_MapKeyExpression) Reset() {
	*x = Expression_MaskExpression_MapSelect_MapKeyExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_MaskExpression_MapSelect_MapKeyExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_MaskExpression_MapSelect_MapKeyExpression) ProtoMessage() {}

func (x *Expression_MaskExpression_MapSelect_MapKeyExpression) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_MaskExpression_MapSelect_MapKeyExpression.ProtoReflect.Descriptor instead.
func (*Expression_MaskExpression_MapSelect_MapKeyExpression) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 11, 4, 1}
}

func (x *Expression_MaskExpression_MapSelect_MapKeyExpression) GetMapKeyExpression() string {
	if x != nil {
		return x.MapKeyExpression
	}
	return ""
}

// Singleton that expresses this FieldReference is rooted off the root
// incoming record type
type Expression_FieldReference_RootReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Expression_FieldReference_RootReference) Reset() {
	*x = Expression_FieldReference_RootReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_FieldReference_RootReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_FieldReference_RootReference) ProtoMessage() {}

func (x *Expression_FieldReference_RootReference) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_FieldReference_RootReference.ProtoReflect.Descriptor instead.
func (*Expression_FieldReference_RootReference) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 12, 0}
}

// A root reference for the outer relation's subquery
type Expression_FieldReference_OuterReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of subquery boundaries to traverse up for this field's reference
	//
	// This value must be >= 1
	StepsOut uint32 `protobuf:"varint,1,opt,name=steps_out,json=stepsOut,proto3" json:"steps_out,omitempty"`
}

func (x *Expression_FieldReference_OuterReference) Reset() {
	*x = Expression_FieldReference_OuterReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_FieldReference_OuterReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_FieldReference_OuterReference) ProtoMessage() {}

func (x *Expression_FieldReference_OuterReference) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_FieldReference_OuterReference.ProtoReflect.Descriptor instead.
func (*Expression_FieldReference_OuterReference) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 12, 1}
}

func (x *Expression_FieldReference_OuterReference) GetStepsOut() uint32 {
	if x != nil {
		return x.StepsOut
	}
	return 0
}

// A subquery with one row and one column. This is often an aggregate
// though not required to be.
type Expression_Subquery_Scalar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input *Rel `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *Expression_Subquery_Scalar) Reset() {
	*x = Expression_Subquery_Scalar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_Subquery_Scalar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Subquery_Scalar) ProtoMessage() {}

func (x *Expression_Subquery_Scalar) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Subquery_Scalar.ProtoReflect.Descriptor instead.
func (*Expression_Subquery_Scalar) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 13, 0}
}

func (x *Expression_Subquery_Scalar) GetInput() *Rel {
	if x != nil {
		return x.Input
	}
	return nil
}

// Predicate checking that the left expression is contained in the right
// subquery
//
// Examples:
//
// x IN (SELECT * FROM t)
// (x, y) IN (SELECT a, b FROM t)
type Expression_Subquery_InPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Needles  []*Expression `protobuf:"bytes,1,rep,name=needles,proto3" json:"needles,omitempty"`
	Haystack *Rel          `protobuf:"bytes,2,opt,name=haystack,proto3" json:"haystack,omitempty"`
}

func (x *Expression_Subquery_InPredicate) Reset() {
	*x = Expression_Subquery_InPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_Subquery_InPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Subquery_InPredicate) ProtoMessage() {}

func (x *Expression_Subquery_InPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Subquery_InPredicate.ProtoReflect.Descriptor instead.
func (*Expression_Subquery_InPredicate) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 13, 1}
}

func (x *Expression_Subquery_InPredicate) GetNeedles() []*Expression {
	if x != nil {
		return x.Needles
	}
	return nil
}

func (x *Expression_Subquery_InPredicate) GetHaystack() *Rel {
	if x != nil {
		return x.Haystack
	}
	return nil
}

// A predicate over a set of rows in the form of a subquery
// EXISTS and UNIQUE are common SQL forms of this operation.
type Expression_Subquery_SetPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: should allow expressions
	PredicateOp Expression_Subquery_SetPredicate_PredicateOp `protobuf:"varint,1,opt,name=predicate_op,json=predicateOp,proto3,enum=substrait.Expression_Subquery_SetPredicate_PredicateOp" json:"predicate_op,omitempty"`
	Tuples      *Rel                                         `protobuf:"bytes,2,opt,name=tuples,proto3" json:"tuples,omitempty"`
}

func (x *Expression_Subquery_SetPredicate) Reset() {
	*x = Expression_Subquery_SetPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_Subquery_SetPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Subquery_SetPredicate) ProtoMessage() {}

func (x *Expression_Subquery_SetPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Subquery_SetPredicate.ProtoReflect.Descriptor instead.
func (*Expression_Subquery_SetPredicate) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 13, 2}
}

func (x *Expression_Subquery_SetPredicate) GetPredicateOp() Expression_Subquery_SetPredicate_PredicateOp {
	if x != nil {
		return x.PredicateOp
	}
	return Expression_Subquery_SetPredicate_PREDICATE_OP_UNSPECIFIED
}

func (x *Expression_Subquery_SetPredicate) GetTuples() *Rel {
	if x != nil {
		return x.Tuples
	}
	return nil
}

// A subquery comparison using ANY or ALL.
// Examples:
//
// SELECT *
// FROM t1
// WHERE x < ANY(SELECT y from t2)
type Expression_Subquery_SetComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ANY or ALL
	ReductionOp Expression_Subquery_SetComparison_ReductionOp `protobuf:"varint,1,opt,name=reduction_op,json=reductionOp,proto3,enum=substrait.Expression_Subquery_SetComparison_ReductionOp" json:"reduction_op,omitempty"`
	// A comparison operator
	ComparisonOp Expression_Subquery_SetComparison_ComparisonOp `protobuf:"varint,2,opt,name=comparison_op,json=comparisonOp,proto3,enum=substrait.Expression_Subquery_SetComparison_ComparisonOp" json:"comparison_op,omitempty"`
	// left side of the expression
	Left *Expression `protobuf:"bytes,3,opt,name=left,proto3" json:"left,omitempty"`
	// right side of the expression
	Right *Rel `protobuf:"bytes,4,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *Expression_Subquery_SetComparison) Reset() {
	*x = Expression_Subquery_SetComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_substrait_algebra_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression_Subquery_SetComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression_Subquery_SetComparison) ProtoMessage() {}

func (x *Expression_Subquery_SetComparison) ProtoReflect() protoreflect.Message {
	mi := &file_substrait_algebra_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression_Subquery_SetComparison.ProtoReflect.Descriptor instead.
func (*Expression_Subquery_SetComparison) Descriptor() ([]byte, []int) {
	return file_substrait_algebra_proto_rawDescGZIP(), []int{16, 13, 3}
}

func (x *Expression_Subquery_SetComparison) GetReductionOp() Expression_Subquery_SetComparison_ReductionOp {
	if x != nil {
		return x.ReductionOp
	}
	return Expression_Subquery_SetComparison_REDUCTION_OP_UNSPECIFIED
}

func (x *Expression_Subquery_SetComparison) GetComparisonOp() Expression_Subquery_SetComparison_ComparisonOp {
	if x != nil {
		return x.ComparisonOp
	}
	return Expression_Subquery_SetComparison_COMPARISON_OP_UNSPECIFIED
}

func (x *Expression_Subquery_SetComparison) GetLeft() *Expression {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *Expression_Subquery_SetComparison) GetRight() *Rel {
	if x != nil {
		return x.Right
	}
	return nil
}

var File_substrait_algebra_proto protoreflect.FileDescriptor

var file_substrait_algebra_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2f, 0x61, 0x6c, 0x67, 0x65,
	0x62, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x06, 0x0a,
	0x09, 0x52, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x12, 0x2f, 0x0a, 0x04, 0x65, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x65, 0x6d,
	0x69, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x69, 0x6e,
	0x74, 0x12, 0x56, 0x0a, 0x12, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x08, 0x0a, 0x06, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x1a, 0x2d, 0x0a, 0x04, 0x45, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x1a, 0xef, 0x03, 0x0a, 0x04, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x48, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x69, 0x6e,
	0x74, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12,
	0x56, 0x0a, 0x12, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x9d, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x56, 0x0a, 0x12, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x6b, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x12,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x6d, 0x69, 0x74, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x22, 0x9d, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x12, 0x2c, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x61, 0x73, 0x6b, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x12, 0x61, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x46, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x6c, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x6c, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4c, 0x0a,
	0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x7a, 0x0a, 0x0a, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x56, 0x0a, 0x12, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x4c, 0x0a, 0x0c, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0xac, 0x04, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x56, 0x0a, 0x12, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x84, 0x03,
	0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x08, 0x75, 0x72, 0x69, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x75, 0x72, 0x69, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x72,
	0x69, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x72, 0x69, 0x50, 0x61, 0x74, 0x68, 0x47, 0x6c, 0x6f, 0x62,
	0x12, 0x1b, 0x0a, 0x08, 0x75, 0x72, 0x69, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x75, 0x72, 0x69, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a,
	0x0a, 0x75, 0x72, 0x69, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x75, 0x72, 0x69, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x4c,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x6c, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x4f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x22, 0x42, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x50, 0x41,
	0x52, 0x51, 0x55, 0x45, 0x54, 0x10, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xf1, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c,
	0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a,
	0x12, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbb, 0x04, 0x0a, 0x07, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x52, 0x04, 0x6c,
	0x65, 0x66, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52,
	0x65, 0x6c, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x6c, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x08, 0x4a,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4a, 0x4f, 0x49, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x49,
	0x47, 0x48, 0x54, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x4d, 0x49, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x4f, 0x49,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x54, 0x49, 0x10, 0x06, 0x12, 0x14, 0x0a,
	0x10, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c,
	0x45, 0x10, 0x07, 0x22, 0xda, 0x01, 0x0a, 0x08, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x6c,
	0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x52, 0x04, 0x6c, 0x65,
	0x66, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65,
	0x6c, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x56, 0x0a, 0x12, 0x61, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xe4, 0x01, 0x0a, 0x08, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6c, 0x12, 0x2c, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x56, 0x0a, 0x12, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xff, 0x03, 0x0a, 0x0c, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x52, 0x65, 0x6c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x08,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52,
	0x08, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x12, 0x61, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x1a, 0x54, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a,
	0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x13, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x70, 0x0a, 0x07, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xe1, 0x01, 0x0a, 0x07, 0x53, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x52, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52,
	0x65, 0x6c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05,
	0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x12, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xec, 0x01,
	0x0a, 0x09, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x33, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x12, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x03, 0x0a,
	0x06, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x52, 0x65, 0x6c, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x27, 0x0a,
	0x02, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x74,
	0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x56, 0x0a, 0x12, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc8,
	0x01, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x54, 0x5f,
	0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x50, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53,
	0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45,
	0x54, 0x5f, 0x4f, 0x50, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x53, 0x45, 0x54, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x50, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49,
	0x4d, 0x41, 0x52, 0x59, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x50,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x53, 0x45, 0x54, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x54, 0x5f,
	0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x43,
	0x54, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x50, 0x5f, 0x55, 0x4e,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x06, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x6c,
	0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x22, 0x6e, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x61, 0x66, 0x52, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x22, 0x97, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x2c,
	0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x9a, 0x09, 0x0a,
	0x0b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x6c, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x73, 0x63,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x6c, 0x2e, 0x53, 0x63,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x73,
	0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x54,
	0x0a, 0x0d, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x6c, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x51, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x6c, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x6c, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x12, 0x40, 0x0a,
	0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x6c, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12,
	0x56, 0x0a, 0x12, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x4d, 0x0a, 0x0d, 0x53, 0x63, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x4f, 0x0a, 0x16, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x80, 0x01, 0x0a, 0x15, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x0b, 0x0a, 0x09, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x1a, 0x22, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x6f, 0x62, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x1a, 0x8a, 0x01, 0x0a, 0x0e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x45, 0x0a, 0x07, 0x52, 0x65, 0x6c,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e,
	0x52, 0x65, 0x6c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0x87, 0x05, 0x0a, 0x03, 0x52, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x72, 0x65,
	0x61, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12,
	0x37, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x25, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x48,
	0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x6c, 0x48,
	0x00, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x44, 0x0a, 0x0e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x65, 0x6c,
	0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61,
	0x66, 0x12, 0x2b, 0x0a, 0x05, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x52, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xcb, 0x46, 0x0a, 0x0a, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x6c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0f, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0f, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07,
	0x69, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66, 0x54, 0x68, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x69,
	0x66, 0x54, 0x68, 0x65, 0x6e, 0x12, 0x55, 0x0a, 0x11, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x10,
	0x73, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e,
	0x73, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47,
	0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x4f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x4f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x48, 0x00, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x61, 0x73,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x61, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x63, 0x61, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x73,
	0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x82, 0x01, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0xc7,
	0x0d, 0x0a, 0x07, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x07, 0x62, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x62,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x38, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x38, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x31, 0x36, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03, 0x69, 0x31, 0x36, 0x12, 0x12, 0x0a, 0x03,
	0x69, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03, 0x69, 0x33, 0x32,
	0x12, 0x12, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x03, 0x69, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x04, 0x66, 0x70, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x00, 0x52, 0x04, 0x66, 0x70, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x04, 0x66, 0x70,
	0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x04, 0x66, 0x70, 0x36, 0x34,
	0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x06, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x68, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x54, 0x6f, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x48, 0x00, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x59,
	0x65, 0x61, 0x72, 0x54, 0x6f, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x68, 0x0a, 0x16, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x44, 0x61, 0x79, 0x54, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x00, 0x52,
	0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x54, 0x6f, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x72, 0x12, 0x42, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x48, 0x00,
	0x52, 0x07, 0x76, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x12, 0x23, 0x0a, 0x0c, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x41,
	0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x12, 0x35, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4d, 0x61,
	0x70, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x23, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x7a, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x7a, 0x12, 0x14, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x37, 0x0a, 0x07, 0x56,
	0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x1a, 0x53, 0x0a, 0x07, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x1a, 0xc2, 0x01, 0x0a, 0x03, 0x4d, 0x61,
	0x70, 0x12, 0x49, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4d, 0x61, 0x70, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x70, 0x0a, 0x08,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x43,
	0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x54, 0x6f,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x79, 0x65, 0x61, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x79, 0x65, 0x61, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x73, 0x1a, 0x43, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x44,
	0x61, 0x79, 0x54, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0x3f, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x3d, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x6c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x9c, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x9f, 0x07, 0x0a, 0x0e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2a, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0b,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0a, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4b, 0x0a, 0x0b, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x1a, 0xd0, 0x03, 0x0a, 0x05, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x54, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x2e,
	0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x63, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x58, 0x0a, 0x0b,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x54, 0x0a, 0x09, 0x75, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x55, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x09, 0x75, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x1a, 0x23, 0x0a, 0x09,
	0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x1a, 0x23, 0x0a, 0x09, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x0c, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x6f, 0x77, 0x1a, 0x0b, 0x0a, 0x09, 0x55, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65,
	0x64, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0xca, 0x01, 0x0a, 0x06, 0x49, 0x66,
	0x54, 0x68, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x03, 0x69, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66, 0x54, 0x68, 0x65, 0x6e, 0x2e,
	0x49, 0x66, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x03, 0x69, 0x66, 0x73, 0x12, 0x29, 0x0a,
	0x04, 0x65, 0x6c, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x65, 0x6c, 0x73, 0x65, 0x1a, 0x5c, 0x0a, 0x08, 0x49, 0x66, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x69, 0x66, 0x12, 0x29, 0x0a, 0x04, 0x74,
	0x68, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x74, 0x68, 0x65, 0x6e, 0x1a, 0x58, 0x0a, 0x04, 0x43, 0x61, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x91, 0x02, 0x0a, 0x10, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x40, 0x0a, 0x03, 0x69, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x69, 0x66, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x65, 0x6c, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x65, 0x6c, 0x73, 0x65, 0x1a,
	0x63, 0x0a, 0x07, 0x49, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x02, 0x69, 0x66, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x68, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x74, 0x68, 0x65, 0x6e, 0x1a, 0x6e, 0x0a, 0x0e, 0x53, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x4f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xb7, 0x01, 0x0a, 0x0b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4f, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x42, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4f,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x37, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x2d, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x93,
	0x04, 0x0a, 0x10, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x73, 0x0a, 0x16, 0x70, 0x79,
	0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x70, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x50, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x70, 0x0a, 0x15, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62,
	0x6c, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x77, 0x65,
	0x62, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x56, 0x0a, 0x14, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x6c,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x1a, 0x51, 0x0a, 0x13, 0x57, 0x65, 0x62,
	0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x1a, 0xe8, 0x04, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x6d, 0x61, 0x70,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x61, 0x70,
	0x4b, 0x65, 0x79, 0x12, 0x57, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x57, 0x0a, 0x0c,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x7e, 0x0a, 0x06, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x12,
	0x36, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52,
	0x06, 0x6d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x1a, 0x61, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x1a, 0x63, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x3c, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x10, 0x0a,
	0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a,
	0xa2, 0x0b, 0x0a, 0x0e, 0x4d, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a,
	0x18, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0xe8, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12,
	0x45, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x1a, 0x62, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x12, 0x52, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x65, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x1a, 0xe6, 0x03,
	0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x5c, 0x0a, 0x09,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x05, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x1a, 0xb6, 0x02,
	0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x60, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x12, 0x60, 0x0a, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x1a, 0x23, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x33, 0x0a, 0x09, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x42, 0x06,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xeb, 0x02, 0x0a, 0x09, 0x4d, 0x61, 0x70, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x12, 0x49, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x61, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x05,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x1a, 0x21, 0x0a, 0x06, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x1a, 0x40, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x4b,
	0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12,
	0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x4b, 0x65, 0x79,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x1a, 0x8d, 0x04, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x10,
	0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61,
	0x73, 0x6b, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f,
	0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x37, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0e, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x48, 0x01, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x48, 0x01, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x0f, 0x0a, 0x0d, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x2d, 0x0a, 0x0e, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x65,
	0x70, 0x73, 0x4f, 0x75, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x1a, 0x95, 0x0a, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x12, 0x4f, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x1a, 0x2e,
	0x0a, 0x06, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x6a,
	0x0a, 0x0b, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a,
	0x07, 0x6e, 0x65, 0x65, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x08, 0x68, 0x61, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c,
	0x52, 0x08, 0x68, 0x61, 0x79, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x1a, 0xf1, 0x01, 0x0a, 0x0c, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x12, 0x26, 0x0a, 0x06, 0x74, 0x75, 0x70, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x52, 0x06, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x22,
	0x5d, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x10, 0x02, 0x1a, 0xaa,
	0x04, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x12, 0x5b, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75,
	0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x52, 0x0b, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x12, 0x5e, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x12, 0x29, 0x0a,
	0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0xb1,
	0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x5f,
	0x45, 0x51, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53,
	0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x5f, 0x4c, 0x54, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4f,
	0x50, 0x5f, 0x47, 0x54, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52,
	0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x5f, 0x47, 0x45,
	0x10, 0x06, 0x22, 0x57, 0x0a, 0x0b, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f,
	0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x52, 0x45, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x5f,
	0x41, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x44, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x42, 0x0f, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x72, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xad, 0x03, 0x0a, 0x09, 0x53, 0x6f, 0x72,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x65, 0x78, 0x70,
	0x72, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x1b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x0d,
	0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a,
	0x1e, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x53, 0x43, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x53, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x53, 0x43, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x53, 0x5f, 0x4c, 0x41,
	0x53, 0x54, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x53, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x4f, 0x52,
	0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x53, 0x43,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x04, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x05, 0x42, 0x0b, 0x0a, 0x09, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x11, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x73,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2a, 0xef, 0x01, 0x0a, 0x10, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x1d, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x48,
	0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x54,
	0x4f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x32, 0x0a, 0x2e, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x12, 0x2c, 0x0a,
	0x28, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x04, 0x42, 0x5b, 0x0a, 0x12, 0x69,
	0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x74, 0xaa, 0x02, 0x12, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_substrait_algebra_proto_rawDescOnce sync.Once
	file_substrait_algebra_proto_rawDescData = file_substrait_algebra_proto_rawDesc
)

func file_substrait_algebra_proto_rawDescGZIP() []byte {
	file_substrait_algebra_proto_rawDescOnce.Do(func() {
		file_substrait_algebra_proto_rawDescData = protoimpl.X.CompressGZIP(file_substrait_algebra_proto_rawDescData)
	})
	return file_substrait_algebra_proto_rawDescData
}

var file_substrait_algebra_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_substrait_algebra_proto_msgTypes = make([]protoimpl.MessageInfo, 89)
var file_substrait_algebra_proto_goTypes = []interface{}{
	(AggregationPhase)(0),                                                   // 0: substrait.AggregationPhase
	(ReadRel_LocalFiles_FileOrFiles_FileFormat)(0),                          // 1: substrait.ReadRel.LocalFiles.FileOrFiles.FileFormat
	(JoinRel_JoinType)(0),                                                   // 2: substrait.JoinRel.JoinType
	(SetRel_SetOp)(0),                                                       // 3: substrait.SetRel.SetOp
	(Expression_Subquery_SetPredicate_PredicateOp)(0),                       // 4: substrait.Expression.Subquery.SetPredicate.PredicateOp
	(Expression_Subquery_SetComparison_ComparisonOp)(0),                     // 5: substrait.Expression.Subquery.SetComparison.ComparisonOp
	(Expression_Subquery_SetComparison_ReductionOp)(0),                      // 6: substrait.Expression.Subquery.SetComparison.ReductionOp
	(SortField_SortDirection)(0),                                            // 7: substrait.SortField.SortDirection
	(*RelCommon)(nil),                                                       // 8: substrait.RelCommon
	(*ReadRel)(nil),                                                         // 9: substrait.ReadRel
	(*ProjectRel)(nil),                                                      // 10: substrait.ProjectRel
	(*JoinRel)(nil),                                                         // 11: substrait.JoinRel
	(*CrossRel)(nil),                                                        // 12: substrait.CrossRel
	(*FetchRel)(nil),                                                        // 13: substrait.FetchRel
	(*AggregateRel)(nil),                                                    // 14: substrait.AggregateRel
	(*SortRel)(nil),                                                         // 15: substrait.SortRel
	(*FilterRel)(nil),                                                       // 16: substrait.FilterRel
	(*SetRel)(nil),                                                          // 17: substrait.SetRel
	(*ExtensionSingleRel)(nil),                                              // 18: substrait.ExtensionSingleRel
	(*ExtensionLeafRel)(nil),                                                // 19: substrait.ExtensionLeafRel
	(*ExtensionMultiRel)(nil),                                               // 20: substrait.ExtensionMultiRel
	(*ExchangeRel)(nil),                                                     // 21: substrait.ExchangeRel
	(*RelRoot)(nil),                                                         // 22: substrait.RelRoot
	(*Rel)(nil),                                                             // 23: substrait.Rel
	(*Expression)(nil),                                                      // 24: substrait.Expression
	(*SortField)(nil),                                                       // 25: substrait.SortField
	(*AggregateFunction)(nil),                                               // 26: substrait.AggregateFunction
	(*RelCommon_Direct)(nil),                                                // 27: substrait.RelCommon.Direct
	(*RelCommon_Emit)(nil),                                                  // 28: substrait.RelCommon.Emit
	(*RelCommon_Hint)(nil),                                                  // 29: substrait.RelCommon.Hint
	(*RelCommon_Hint_Stats)(nil),                                            // 30: substrait.RelCommon.Hint.Stats
	(*RelCommon_Hint_RuntimeConstraint)(nil),                                // 31: substrait.RelCommon.Hint.RuntimeConstraint
	(*ReadRel_NamedTable)(nil),                                              // 32: substrait.ReadRel.NamedTable
	(*ReadRel_VirtualTable)(nil),                                            // 33: substrait.ReadRel.VirtualTable
	(*ReadRel_ExtensionTable)(nil),                                          // 34: substrait.ReadRel.ExtensionTable
	(*ReadRel_LocalFiles)(nil),                                              // 35: substrait.ReadRel.LocalFiles
	(*ReadRel_LocalFiles_FileOrFiles)(nil),                                  // 36: substrait.ReadRel.LocalFiles.FileOrFiles
	(*AggregateRel_Grouping)(nil),                                           // 37: substrait.AggregateRel.Grouping
	(*AggregateRel_Measure)(nil),                                            // 38: substrait.AggregateRel.Measure
	(*ExchangeRel_ScatterFields)(nil),                                       // 39: substrait.ExchangeRel.ScatterFields
	(*ExchangeRel_SingleBucketExpression)(nil),                              // 40: substrait.ExchangeRel.SingleBucketExpression
	(*ExchangeRel_MultiBucketExpression)(nil),                               // 41: substrait.ExchangeRel.MultiBucketExpression
	(*ExchangeRel_Broadcast)(nil),                                           // 42: substrait.ExchangeRel.Broadcast
	(*ExchangeRel_RoundRobin)(nil),                                          // 43: substrait.ExchangeRel.RoundRobin
	(*ExchangeRel_ExchangeTarget)(nil),                                      // 44: substrait.ExchangeRel.ExchangeTarget
	(*Expression_Enum)(nil),                                                 // 45: substrait.Expression.Enum
	(*Expression_Literal)(nil),                                              // 46: substrait.Expression.Literal
	(*Expression_ScalarFunction)(nil),                                       // 47: substrait.Expression.ScalarFunction
	(*Expression_WindowFunction)(nil),                                       // 48: substrait.Expression.WindowFunction
	(*Expression_IfThen)(nil),                                               // 49: substrait.Expression.IfThen
	(*Expression_Cast)(nil),                                                 // 50: substrait.Expression.Cast
	(*Expression_SwitchExpression)(nil),                                     // 51: substrait.Expression.SwitchExpression
	(*Expression_SingularOrList)(nil),                                       // 52: substrait.Expression.SingularOrList
	(*Expression_MultiOrList)(nil),                                          // 53: substrait.Expression.MultiOrList
	(*Expression_EmbeddedFunction)(nil),                                     // 54: substrait.Expression.EmbeddedFunction
	(*Expression_ReferenceSegment)(nil),                                     // 55: substrait.Expression.ReferenceSegment
	(*Expression_MaskExpression)(nil),                                       // 56: substrait.Expression.MaskExpression
	(*Expression_FieldReference)(nil),                                       // 57: substrait.Expression.FieldReference
	(*Expression_Subquery)(nil),                                             // 58: substrait.Expression.Subquery
	(*Expression_Enum_Empty)(nil),                                           // 59: substrait.Expression.Enum.Empty
	(*Expression_Literal_VarChar)(nil),                                      // 60: substrait.Expression.Literal.VarChar
	(*Expression_Literal_Decimal)(nil),                                      // 61: substrait.Expression.Literal.Decimal
	(*Expression_Literal_Map)(nil),                                          // 62: substrait.Expression.Literal.Map
	(*Expression_Literal_IntervalYearToMonth)(nil),                          // 63: substrait.Expression.Literal.IntervalYearToMonth
	(*Expression_Literal_IntervalDayToSecond)(nil),                          // 64: substrait.Expression.Literal.IntervalDayToSecond
	(*Expression_Literal_Struct)(nil),                                       // 65: substrait.Expression.Literal.Struct
	(*Expression_Literal_List)(nil),                                         // 66: substrait.Expression.Literal.List
	(*Expression_Literal_Map_KeyValue)(nil),                                 // 67: substrait.Expression.Literal.Map.KeyValue
	(*Expression_WindowFunction_Bound)(nil),                                 // 68: substrait.Expression.WindowFunction.Bound
	(*Expression_WindowFunction_Bound_Preceding)(nil),                       // 69: substrait.Expression.WindowFunction.Bound.Preceding
	(*Expression_WindowFunction_Bound_Following)(nil),                       // 70: substrait.Expression.WindowFunction.Bound.Following
	(*Expression_WindowFunction_Bound_CurrentRow)(nil),                      // 71: substrait.Expression.WindowFunction.Bound.CurrentRow
	(*Expression_WindowFunction_Bound_Unbounded)(nil),                       // 72: substrait.Expression.WindowFunction.Bound.Unbounded
	(*Expression_IfThen_IfClause)(nil),                                      // 73: substrait.Expression.IfThen.IfClause
	(*Expression_SwitchExpression_IfValue)(nil),                             // 74: substrait.Expression.SwitchExpression.IfValue
	(*Expression_MultiOrList_Record)(nil),                                   // 75: substrait.Expression.MultiOrList.Record
	(*Expression_EmbeddedFunction_PythonPickleFunction)(nil),                // 76: substrait.Expression.EmbeddedFunction.PythonPickleFunction
	(*Expression_EmbeddedFunction_WebAssemblyFunction)(nil),                 // 77: substrait.Expression.EmbeddedFunction.WebAssemblyFunction
	(*Expression_ReferenceSegment_MapKey)(nil),                              // 78: substrait.Expression.ReferenceSegment.MapKey
	(*Expression_ReferenceSegment_StructField)(nil),                         // 79: substrait.Expression.ReferenceSegment.StructField
	(*Expression_ReferenceSegment_ListElement)(nil),                         // 80: substrait.Expression.ReferenceSegment.ListElement
	(*Expression_MaskExpression_Select)(nil),                                // 81: substrait.Expression.MaskExpression.Select
	(*Expression_MaskExpression_StructSelect)(nil),                          // 82: substrait.Expression.MaskExpression.StructSelect
	(*Expression_MaskExpression_StructItem)(nil),                            // 83: substrait.Expression.MaskExpression.StructItem
	(*Expression_MaskExpression_ListSelect)(nil),                            // 84: substrait.Expression.MaskExpression.ListSelect
	(*Expression_MaskExpression_MapSelect)(nil),                             // 85: substrait.Expression.MaskExpression.MapSelect
	(*Expression_MaskExpression_ListSelect_ListSelectItem)(nil),             // 86: substrait.Expression.MaskExpression.ListSelect.ListSelectItem
	(*Expression_MaskExpression_ListSelect_ListSelectItem_ListElement)(nil), // 87: substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement
	(*Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice)(nil),   // 88: substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice
	(*Expression_MaskExpression_MapSelect_MapKey)(nil),                      // 89: substrait.Expression.MaskExpression.MapSelect.MapKey
	(*Expression_MaskExpression_MapSelect_MapKeyExpression)(nil),            // 90: substrait.Expression.MaskExpression.MapSelect.MapKeyExpression
	(*Expression_FieldReference_RootReference)(nil),                         // 91: substrait.Expression.FieldReference.RootReference
	(*Expression_FieldReference_OuterReference)(nil),                        // 92: substrait.Expression.FieldReference.OuterReference
	(*Expression_Subquery_Scalar)(nil),                                      // 93: substrait.Expression.Subquery.Scalar
	(*Expression_Subquery_InPredicate)(nil),                                 // 94: substrait.Expression.Subquery.InPredicate
	(*Expression_Subquery_SetPredicate)(nil),                                // 95: substrait.Expression.Subquery.SetPredicate
	(*Expression_Subquery_SetComparison)(nil),                               // 96: substrait.Expression.Subquery.SetComparison
	(*extensions.AdvancedExtension)(nil),                                    // 97: substrait.extensions.AdvancedExtension
	(*NamedStruct)(nil),                                                     // 98: substrait.NamedStruct
	(*anypb.Any)(nil),                                                       // 99: google.protobuf.Any
	(*Type)(nil),                                                            // 100: substrait.Type
	(*Type_List)(nil),                                                       // 101: substrait.Type.List
	(*Type_Map)(nil),                                                        // 102: substrait.Type.Map
}
var file_substrait_algebra_proto_depIdxs = []int32{
	27,  // 0: substrait.RelCommon.direct:type_name -> substrait.RelCommon.Direct
	28,  // 1: substrait.RelCommon.emit:type_name -> substrait.RelCommon.Emit
	29,  // 2: substrait.RelCommon.hint:type_name -> substrait.RelCommon.Hint
	97,  // 3: substrait.RelCommon.advanced_extension:type_name -> substrait.extensions.AdvancedExtension
	8,   // 4: substrait.ReadRel.common:type_name -> substrait.RelCommon
	98,  // 5: substrait.ReadRel.base_schema:type_name -> substrait.NamedStruct
	24,  // 6: substrait.ReadRel.filter:type_name -> substrait.Expression
	56,  // 7: substrait.ReadRel.projection:type_name -> substrait.Expression.MaskExpression
	97,  // 8: substrait.ReadRel.advanced_extension:type_name -> substrait.extensions.AdvancedExtension
	33,  // 9: substrait.ReadRel.virtual_table:type_name -> substrait.ReadRel.VirtualTable
	35,  // 10: substrait.ReadRel.local_files:type_name -> substrait.ReadRel.LocalFiles
	32,  // 11: substrait.ReadRel.named_table:type_name -> substrait.ReadRel.NamedTable
	34,  // 12: substrait.ReadRel.extension_table:type_name -> substrait.ReadRel.ExtensionTable
	8,   // 13: substrait.ProjectRel.common:type_name -> substrait.RelCommon
	23,  // 14: substrait.ProjectRel.input:type_name -> substrait.Rel
	24,  // 15: substrait.ProjectRel.expressions:type_name -> substrait.Expression
	97,  // 16: substrait.ProjectRel.advanced_extension:type_name -> substrait.extensions.AdvancedExtension
	8,   // 17: substrait.JoinRel.common:type_name -> substrait.RelCommon
	23,  // 18: substrait.JoinRel.left:type_name -> substrait.Rel
	23,  // 19: substrait.JoinRel.right:type_name -> substrait.Rel
	24,  // 20: substrait.JoinRel.expression:type_name -> substrait.Expression
	24,  // 21: substrait.JoinRel.post_join_filter:type_name -> substrait.Expression
	2,   // 22: substrait.JoinRel.type:type_name -> substrait.JoinRel.JoinType
	97,  // 23: substrait.JoinRel.advanced_extension:type_name -> substrait.extensions.AdvancedExtension
	8,   // 24: substrait.CrossRel.common:type_name -> substrait.RelCommon
	23,  // 25: substrait.CrossRel.left:type_name -> substrait.Rel
	23,  // 26: substrait.CrossRel.right:type_name -> substrait.Rel
	97,  // 27: substrait.CrossRel.advanced_extension:type_name -> substrait.extensions.AdvancedExtension
	8,   // 28: substrait.FetchRel.common:type_name -> substrait.RelCommon
	23,  // 29: substrait.FetchRel.input:type_name -> substrait.Rel
	97,  // 30: substrait.FetchRel.advanced_extension:type_name -> substrait.extensions.AdvancedExtension
	8,   // 31: substrait.AggregateRel.common:type_name -> substrait.RelCommon
	23,  // 32: substrait.AggregateRel.input:type_name -> substrait.Rel
	37,  // 33: substrait.AggregateRel.groupings:type_name -> substrait.AggregateRel.Grouping
	38,  // 34: substrait.AggregateRel.measures:type_name -> substrait.AggregateRel.Measure
	97,  // 35: substrait.AggregateRel.advanced_extension:type_name -> substrait.extensions.AdvancedExtension
	8,   // 36: substrait.SortRel.common:type_name -> substrait.RelCommon
	23,  // 37: substrait.SortRel.input:type_name -> substrait.Rel
	25,  // 38: substrait.SortRel.sorts:type_name -> substrait.SortField
	97,  // 39: substrait.SortRel.advanced_extension:type_name -> substrait.extensions.AdvancedExtension
	8,   // 40: substrait.FilterRel.common:type_name -> substrait.RelCommon
	23,  // 41: substrait.FilterRel.input:type_name -> substrait.Rel
	24,  // 42: substrait.FilterRel.condition:type_name -> substrait.Expression
	97,  // 43: substrait.FilterRel.advanced_extension:type_name -> substrait.extensions.AdvancedExtension
	8,   // 44: substrait.SetRel.common:type_name -> substrait.RelCommon
	23,  // 45: substrait.SetRel.inputs:type_name -> substrait.Rel
	3,   // 46: substrait.SetRel.op:type_name -> substrait.SetRel.SetOp
	97,  // 47: substrait.SetRel.advanced_extension:type_name -> substrait.extensions.AdvancedExtension
	8,   // 48: substrait.ExtensionSingleRel.common:type_name -> substrait.RelCommon
	23,  // 49: substrait.ExtensionSingleRel.input:type_name -> substrait.Rel
	99,  // 50: substrait.ExtensionSingleRel.detail:type_name -> google.protobuf.Any
	8,   // 51: substrait.ExtensionLeafRel.common:type_name -> substrait.RelCommon
	99,  // 52: substrait.ExtensionLeafRel.detail:type_name -> google.protobuf.Any
	8,   // 53: substrait.ExtensionMultiRel.common:type_name -> substrait.RelCommon
	23,  // 54: substrait.ExtensionMultiRel.inputs:type_name -> substrait.Rel
	99,  // 55: substrait.ExtensionMultiRel.detail:type_name -> google.protobuf.Any
	8,   // 56: substrait.ExchangeRel.common:type_name -> substrait.RelCommon
	23,  // 57: substrait.ExchangeRel.input:type_name -> substrait.Rel
	44,  // 58: substrait.ExchangeRel.targets:type_name -> substrait.ExchangeRel.ExchangeTarget
	39,  // 59: substrait.ExchangeRel.scatter_by_fields:type_name -> substrait.ExchangeRel.ScatterFields
	40,  // 60: substrait.ExchangeRel.single_target:type_name -> substrait.ExchangeRel.SingleBucketExpression
	41,  // 61: substrait.ExchangeRel.multi_target:type_name -> substrait.ExchangeRel.MultiBucketExpression
	43,  // 62: substrait.ExchangeRel.round_robin:type_name -> substrait.ExchangeRel.RoundRobin
	42,  // 63: substrait.ExchangeRel.broadcast:type_name -> substrait.ExchangeRel.Broadcast
	97,  // 64: substrait.ExchangeRel.advanced_extension:type_name -> substrait.extensions.AdvancedExtension
	23,  // 65: substrait.RelRoot.input:type_name -> substrait.Rel
	9,   // 66: substrait.Rel.read:type_name -> substrait.ReadRel
	16,  // 67: substrait.Rel.filter:type_name -> substrait.FilterRel
	13,  // 68: substrait.Rel.fetch:type_name -> substrait.FetchRel
	14,  // 69: substrait.Rel.aggregate:type_name -> substrait.AggregateRel
	15,  // 70: substrait.Rel.sort:type_name -> substrait.SortRel
	11,  // 71: substrait.Rel.join:type_name -> substrait.JoinRel
	10,  // 72: substrait.Rel.project:type_name -> substrait.ProjectRel
	17,  // 73: substrait.Rel.set:type_name -> substrait.SetRel
	18,  // 74: substrait.Rel.extension_single:type_name -> substrait.ExtensionSingleRel
	20,  // 75: substrait.Rel.extension_multi:type_name -> substrait.ExtensionMultiRel
	19,  // 76: substrait.Rel.extension_leaf:type_name -> substrait.ExtensionLeafRel
	12,  // 77: substrait.Rel.cross:type_name -> substrait.CrossRel
	46,  // 78: substrait.Expression.literal:type_name -> substrait.Expression.Literal
	57,  // 79: substrait.Expression.selection:type_name -> substrait.Expression.FieldReference
	47,  // 80: substrait.Expression.scalar_function:type_name -> substrait.Expression.ScalarFunction
	48,  // 81: substrait.Expression.window_function:type_name -> substrait.Expression.WindowFunction
	49,  // 82: substrait.Expression.if_then:type_name -> substrait.Expression.IfThen
	51,  // 83: substrait.Expression.switch_expression:type_name -> substrait.Expression.SwitchExpression
	52,  // 84: substrait.Expression.singular_or_list:type_name -> substrait.Expression.SingularOrList
	53,  // 85: substrait.Expression.multi_or_list:type_name -> substrait.Expression.MultiOrList
	45,  // 86: substrait.Expression.enum:type_name -> substrait.Expression.Enum
	50,  // 87: substrait.Expression.cast:type_name -> substrait.Expression.Cast
	58,  // 88: substrait.Expression.subquery:type_name -> substrait.Expression.Subquery
	24,  // 89: substrait.SortField.expr:type_name -> substrait.Expression
	7,   // 90: substrait.SortField.direction:type_name -> substrait.SortField.SortDirection
	24,  // 91: substrait.AggregateFunction.args:type_name -> substrait.Expression
	25,  // 92: substrait.AggregateFunction.sorts:type_name -> substrait.SortField
	0,   // 93: substrait.AggregateFunction.phase:type_name -> substrait.AggregationPhase
	100, // 94: substrait.AggregateFunction.output_type:type_name -> substrait.Type
	30,  // 95: substrait.RelCommon.Hint.stats:type_name -> substrait.RelCommon.Hint.Stats
	31,  // 96: substrait.RelCommon.Hint.constraint:type_name -> substrait.RelCommon.Hint.RuntimeConstraint
	97,  // 97: substrait.RelCommon.Hint.advanced_extension:type_name -> substrait.extensions.AdvancedExtension
	97,  // 98: substrait.RelCommon.Hint.Stats.advanced_extension:type_name -> substrait.extensions.AdvancedExtension
	97,  // 99: substrait.RelCommon.Hint.RuntimeConstraint.advanced_extension:type_name -> substrait.extensions.AdvancedExtension
	97,  // 100: substrait.ReadRel.NamedTable.advanced_extension:type_name -> substrait.extensions.AdvancedExtension
	65,  // 101: substrait.ReadRel.VirtualTable.values:type_name -> substrait.Expression.Literal.Struct
	99,  // 102: substrait.ReadRel.ExtensionTable.detail:type_name -> google.protobuf.Any
	36,  // 103: substrait.ReadRel.LocalFiles.items:type_name -> substrait.ReadRel.LocalFiles.FileOrFiles
	97,  // 104: substrait.ReadRel.LocalFiles.advanced_extension:type_name -> substrait.extensions.AdvancedExtension
	1,   // 105: substrait.ReadRel.LocalFiles.FileOrFiles.format:type_name -> substrait.ReadRel.LocalFiles.FileOrFiles.FileFormat
	24,  // 106: substrait.AggregateRel.Grouping.grouping_expressions:type_name -> substrait.Expression
	26,  // 107: substrait.AggregateRel.Measure.measure:type_name -> substrait.AggregateFunction
	24,  // 108: substrait.AggregateRel.Measure.filter:type_name -> substrait.Expression
	57,  // 109: substrait.ExchangeRel.ScatterFields.fields:type_name -> substrait.Expression.FieldReference
	24,  // 110: substrait.ExchangeRel.SingleBucketExpression.expression:type_name -> substrait.Expression
	24,  // 111: substrait.ExchangeRel.MultiBucketExpression.expression:type_name -> substrait.Expression
	99,  // 112: substrait.ExchangeRel.ExchangeTarget.extended:type_name -> google.protobuf.Any
	59,  // 113: substrait.Expression.Enum.unspecified:type_name -> substrait.Expression.Enum.Empty
	63,  // 114: substrait.Expression.Literal.interval_year_to_month:type_name -> substrait.Expression.Literal.IntervalYearToMonth
	64,  // 115: substrait.Expression.Literal.interval_day_to_second:type_name -> substrait.Expression.Literal.IntervalDayToSecond
	60,  // 116: substrait.Expression.Literal.var_char:type_name -> substrait.Expression.Literal.VarChar
	61,  // 117: substrait.Expression.Literal.decimal:type_name -> substrait.Expression.Literal.Decimal
	65,  // 118: substrait.Expression.Literal.struct:type_name -> substrait.Expression.Literal.Struct
	62,  // 119: substrait.Expression.Literal.map:type_name -> substrait.Expression.Literal.Map
	100, // 120: substrait.Expression.Literal.null:type_name -> substrait.Type
	66,  // 121: substrait.Expression.Literal.list:type_name -> substrait.Expression.Literal.List
	101, // 122: substrait.Expression.Literal.empty_list:type_name -> substrait.Type.List
	102, // 123: substrait.Expression.Literal.empty_map:type_name -> substrait.Type.Map
	24,  // 124: substrait.Expression.ScalarFunction.args:type_name -> substrait.Expression
	100, // 125: substrait.Expression.ScalarFunction.output_type:type_name -> substrait.Type
	24,  // 126: substrait.Expression.WindowFunction.partitions:type_name -> substrait.Expression
	25,  // 127: substrait.Expression.WindowFunction.sorts:type_name -> substrait.SortField
	68,  // 128: substrait.Expression.WindowFunction.upper_bound:type_name -> substrait.Expression.WindowFunction.Bound
	68,  // 129: substrait.Expression.WindowFunction.lower_bound:type_name -> substrait.Expression.WindowFunction.Bound
	0,   // 130: substrait.Expression.WindowFunction.phase:type_name -> substrait.AggregationPhase
	100, // 131: substrait.Expression.WindowFunction.output_type:type_name -> substrait.Type
	24,  // 132: substrait.Expression.WindowFunction.args:type_name -> substrait.Expression
	73,  // 133: substrait.Expression.IfThen.ifs:type_name -> substrait.Expression.IfThen.IfClause
	24,  // 134: substrait.Expression.IfThen.else:type_name -> substrait.Expression
	100, // 135: substrait.Expression.Cast.type:type_name -> substrait.Type
	24,  // 136: substrait.Expression.Cast.input:type_name -> substrait.Expression
	24,  // 137: substrait.Expression.SwitchExpression.match:type_name -> substrait.Expression
	74,  // 138: substrait.Expression.SwitchExpression.ifs:type_name -> substrait.Expression.SwitchExpression.IfValue
	24,  // 139: substrait.Expression.SwitchExpression.else:type_name -> substrait.Expression
	24,  // 140: substrait.Expression.SingularOrList.value:type_name -> substrait.Expression
	24,  // 141: substrait.Expression.SingularOrList.options:type_name -> substrait.Expression
	24,  // 142: substrait.Expression.MultiOrList.value:type_name -> substrait.Expression
	75,  // 143: substrait.Expression.MultiOrList.options:type_name -> substrait.Expression.MultiOrList.Record
	24,  // 144: substrait.Expression.EmbeddedFunction.arguments:type_name -> substrait.Expression
	100, // 145: substrait.Expression.EmbeddedFunction.output_type:type_name -> substrait.Type
	76,  // 146: substrait.Expression.EmbeddedFunction.python_pickle_function:type_name -> substrait.Expression.EmbeddedFunction.PythonPickleFunction
	77,  // 147: substrait.Expression.EmbeddedFunction.web_assembly_function:type_name -> substrait.Expression.EmbeddedFunction.WebAssemblyFunction
	78,  // 148: substrait.Expression.ReferenceSegment.map_key:type_name -> substrait.Expression.ReferenceSegment.MapKey
	79,  // 149: substrait.Expression.ReferenceSegment.struct_field:type_name -> substrait.Expression.ReferenceSegment.StructField
	80,  // 150: substrait.Expression.ReferenceSegment.list_element:type_name -> substrait.Expression.ReferenceSegment.ListElement
	82,  // 151: substrait.Expression.MaskExpression.select:type_name -> substrait.Expression.MaskExpression.StructSelect
	55,  // 152: substrait.Expression.FieldReference.direct_reference:type_name -> substrait.Expression.ReferenceSegment
	56,  // 153: substrait.Expression.FieldReference.masked_reference:type_name -> substrait.Expression.MaskExpression
	24,  // 154: substrait.Expression.FieldReference.expression:type_name -> substrait.Expression
	91,  // 155: substrait.Expression.FieldReference.root_reference:type_name -> substrait.Expression.FieldReference.RootReference
	92,  // 156: substrait.Expression.FieldReference.outer_reference:type_name -> substrait.Expression.FieldReference.OuterReference
	93,  // 157: substrait.Expression.Subquery.scalar:type_name -> substrait.Expression.Subquery.Scalar
	94,  // 158: substrait.Expression.Subquery.in_predicate:type_name -> substrait.Expression.Subquery.InPredicate
	95,  // 159: substrait.Expression.Subquery.set_predicate:type_name -> substrait.Expression.Subquery.SetPredicate
	96,  // 160: substrait.Expression.Subquery.set_comparison:type_name -> substrait.Expression.Subquery.SetComparison
	67,  // 161: substrait.Expression.Literal.Map.key_values:type_name -> substrait.Expression.Literal.Map.KeyValue
	46,  // 162: substrait.Expression.Literal.Struct.fields:type_name -> substrait.Expression.Literal
	46,  // 163: substrait.Expression.Literal.List.values:type_name -> substrait.Expression.Literal
	46,  // 164: substrait.Expression.Literal.Map.KeyValue.key:type_name -> substrait.Expression.Literal
	46,  // 165: substrait.Expression.Literal.Map.KeyValue.value:type_name -> substrait.Expression.Literal
	69,  // 166: substrait.Expression.WindowFunction.Bound.preceding:type_name -> substrait.Expression.WindowFunction.Bound.Preceding
	70,  // 167: substrait.Expression.WindowFunction.Bound.following:type_name -> substrait.Expression.WindowFunction.Bound.Following
	71,  // 168: substrait.Expression.WindowFunction.Bound.current_row:type_name -> substrait.Expression.WindowFunction.Bound.CurrentRow
	72,  // 169: substrait.Expression.WindowFunction.Bound.unbounded:type_name -> substrait.Expression.WindowFunction.Bound.Unbounded
	24,  // 170: substrait.Expression.IfThen.IfClause.if:type_name -> substrait.Expression
	24,  // 171: substrait.Expression.IfThen.IfClause.then:type_name -> substrait.Expression
	46,  // 172: substrait.Expression.SwitchExpression.IfValue.if:type_name -> substrait.Expression.Literal
	24,  // 173: substrait.Expression.SwitchExpression.IfValue.then:type_name -> substrait.Expression
	24,  // 174: substrait.Expression.MultiOrList.Record.fields:type_name -> substrait.Expression
	46,  // 175: substrait.Expression.ReferenceSegment.MapKey.map_key:type_name -> substrait.Expression.Literal
	55,  // 176: substrait.Expression.ReferenceSegment.MapKey.child:type_name -> substrait.Expression.ReferenceSegment
	55,  // 177: substrait.Expression.ReferenceSegment.StructField.child:type_name -> substrait.Expression.ReferenceSegment
	55,  // 178: substrait.Expression.ReferenceSegment.ListElement.child:type_name -> substrait.Expression.ReferenceSegment
	82,  // 179: substrait.Expression.MaskExpression.Select.struct:type_name -> substrait.Expression.MaskExpression.StructSelect
	84,  // 180: substrait.Expression.MaskExpression.Select.list:type_name -> substrait.Expression.MaskExpression.ListSelect
	85,  // 181: substrait.Expression.MaskExpression.Select.map:type_name -> substrait.Expression.MaskExpression.MapSelect
	83,  // 182: substrait.Expression.MaskExpression.StructSelect.struct_items:type_name -> substrait.Expression.MaskExpression.StructItem
	81,  // 183: substrait.Expression.MaskExpression.StructItem.child:type_name -> substrait.Expression.MaskExpression.Select
	86,  // 184: substrait.Expression.MaskExpression.ListSelect.selection:type_name -> substrait.Expression.MaskExpression.ListSelect.ListSelectItem
	81,  // 185: substrait.Expression.MaskExpression.ListSelect.child:type_name -> substrait.Expression.MaskExpression.Select
	89,  // 186: substrait.Expression.MaskExpression.MapSelect.key:type_name -> substrait.Expression.MaskExpression.MapSelect.MapKey
	90,  // 187: substrait.Expression.MaskExpression.MapSelect.expression:type_name -> substrait.Expression.MaskExpression.MapSelect.MapKeyExpression
	81,  // 188: substrait.Expression.MaskExpression.MapSelect.child:type_name -> substrait.Expression.MaskExpression.Select
	87,  // 189: substrait.Expression.MaskExpression.ListSelect.ListSelectItem.item:type_name -> substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement
	88,  // 190: substrait.Expression.MaskExpression.ListSelect.ListSelectItem.slice:type_name -> substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice
	23,  // 191: substrait.Expression.Subquery.Scalar.input:type_name -> substrait.Rel
	24,  // 192: substrait.Expression.Subquery.InPredicate.needles:type_name -> substrait.Expression
	23,  // 193: substrait.Expression.Subquery.InPredicate.haystack:type_name -> substrait.Rel
	4,   // 194: substrait.Expression.Subquery.SetPredicate.predicate_op:type_name -> substrait.Expression.Subquery.SetPredicate.PredicateOp
	23,  // 195: substrait.Expression.Subquery.SetPredicate.tuples:type_name -> substrait.Rel
	6,   // 196: substrait.Expression.Subquery.SetComparison.reduction_op:type_name -> substrait.Expression.Subquery.SetComparison.ReductionOp
	5,   // 197: substrait.Expression.Subquery.SetComparison.comparison_op:type_name -> substrait.Expression.Subquery.SetComparison.ComparisonOp
	24,  // 198: substrait.Expression.Subquery.SetComparison.left:type_name -> substrait.Expression
	23,  // 199: substrait.Expression.Subquery.SetComparison.right:type_name -> substrait.Rel
	200, // [200:200] is the sub-list for method output_type
	200, // [200:200] is the sub-list for method input_type
	200, // [200:200] is the sub-list for extension type_name
	200, // [200:200] is the sub-list for extension extendee
	0,   // [0:200] is the sub-list for field type_name
}

func init() { file_substrait_algebra_proto_init() }
func file_substrait_algebra_proto_init() {
	if File_substrait_algebra_proto != nil {
		return
	}
	file_substrait_type_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_substrait_algebra_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelCommon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectRel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossRel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchRel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateRel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortRel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterRel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionSingleRel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionLeafRel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionMultiRel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelCommon_Direct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelCommon_Emit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelCommon_Hint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelCommon_Hint_Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelCommon_Hint_RuntimeConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRel_NamedTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRel_VirtualTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRel_ExtensionTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRel_LocalFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRel_LocalFiles_FileOrFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateRel_Grouping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateRel_Measure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRel_ScatterFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRel_SingleBucketExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRel_MultiBucketExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRel_Broadcast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRel_RoundRobin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRel_ExchangeTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_Enum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_Literal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_ScalarFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_WindowFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_IfThen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_Cast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_SwitchExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_SingularOrList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_MultiOrList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_EmbeddedFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_ReferenceSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_MaskExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_FieldReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_Subquery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_Enum_Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_Literal_VarChar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_Literal_Decimal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_Literal_Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_Literal_IntervalYearToMonth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_Literal_IntervalDayToSecond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_Literal_Struct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_Literal_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_Literal_Map_KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_WindowFunction_Bound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_WindowFunction_Bound_Preceding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_WindowFunction_Bound_Following); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_WindowFunction_Bound_CurrentRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_WindowFunction_Bound_Unbounded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_IfThen_IfClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_SwitchExpression_IfValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_MultiOrList_Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_EmbeddedFunction_PythonPickleFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_EmbeddedFunction_WebAssemblyFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_ReferenceSegment_MapKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_ReferenceSegment_StructField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_ReferenceSegment_ListElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_MaskExpression_Select); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_MaskExpression_StructSelect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_MaskExpression_StructItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_MaskExpression_ListSelect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_MaskExpression_MapSelect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_MaskExpression_ListSelect_ListSelectItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_MaskExpression_ListSelect_ListSelectItem_ListElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_MaskExpression_MapSelect_MapKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_MaskExpression_MapSelect_MapKeyExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_FieldReference_RootReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_FieldReference_OuterReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_Subquery_Scalar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_Subquery_InPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_Subquery_SetPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_substrait_algebra_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression_Subquery_SetComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_substrait_algebra_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RelCommon_Direct_)(nil),
		(*RelCommon_Emit_)(nil),
	}
	file_substrait_algebra_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ReadRel_VirtualTable_)(nil),
		(*ReadRel_LocalFiles_)(nil),
		(*ReadRel_NamedTable_)(nil),
		(*ReadRel_ExtensionTable_)(nil),
	}
	file_substrait_algebra_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ExchangeRel_ScatterByFields)(nil),
		(*ExchangeRel_SingleTarget)(nil),
		(*ExchangeRel_MultiTarget)(nil),
		(*ExchangeRel_RoundRobin_)(nil),
		(*ExchangeRel_Broadcast_)(nil),
	}
	file_substrait_algebra_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Rel_Read)(nil),
		(*Rel_Filter)(nil),
		(*Rel_Fetch)(nil),
		(*Rel_Aggregate)(nil),
		(*Rel_Sort)(nil),
		(*Rel_Join)(nil),
		(*Rel_Project)(nil),
		(*Rel_Set)(nil),
		(*Rel_ExtensionSingle)(nil),
		(*Rel_ExtensionMulti)(nil),
		(*Rel_ExtensionLeaf)(nil),
		(*Rel_Cross)(nil),
	}
	file_substrait_algebra_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*Expression_Literal_)(nil),
		(*Expression_Selection)(nil),
		(*Expression_ScalarFunction_)(nil),
		(*Expression_WindowFunction_)(nil),
		(*Expression_IfThen_)(nil),
		(*Expression_SwitchExpression_)(nil),
		(*Expression_SingularOrList_)(nil),
		(*Expression_MultiOrList_)(nil),
		(*Expression_Enum_)(nil),
		(*Expression_Cast_)(nil),
		(*Expression_Subquery_)(nil),
	}
	file_substrait_algebra_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*SortField_Direction)(nil),
		(*SortField_ComparisonFunctionReference)(nil),
	}
	file_substrait_algebra_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*ReadRel_LocalFiles_FileOrFiles_UriPath)(nil),
		(*ReadRel_LocalFiles_FileOrFiles_UriPathGlob)(nil),
		(*ReadRel_LocalFiles_FileOrFiles_UriFile)(nil),
		(*ReadRel_LocalFiles_FileOrFiles_UriFolder)(nil),
	}
	file_substrait_algebra_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*ExchangeRel_ExchangeTarget_Uri)(nil),
		(*ExchangeRel_ExchangeTarget_Extended)(nil),
	}
	file_substrait_algebra_proto_msgTypes[37].OneofWrappers = []interface{}{
		(*Expression_Enum_Specified)(nil),
		(*Expression_Enum_Unspecified)(nil),
	}
	file_substrait_algebra_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*Expression_Literal_Boolean)(nil),
		(*Expression_Literal_I8)(nil),
		(*Expression_Literal_I16)(nil),
		(*Expression_Literal_I32)(nil),
		(*Expression_Literal_I64)(nil),
		(*Expression_Literal_Fp32)(nil),
		(*Expression_Literal_Fp64)(nil),
		(*Expression_Literal_String_)(nil),
		(*Expression_Literal_Binary)(nil),
		(*Expression_Literal_Timestamp)(nil),
		(*Expression_Literal_Date)(nil),
		(*Expression_Literal_Time)(nil),
		(*Expression_Literal_IntervalYearToMonth_)(nil),
		(*Expression_Literal_IntervalDayToSecond_)(nil),
		(*Expression_Literal_FixedChar)(nil),
		(*Expression_Literal_VarChar_)(nil),
		(*Expression_Literal_FixedBinary)(nil),
		(*Expression_Literal_Decimal_)(nil),
		(*Expression_Literal_Struct_)(nil),
		(*Expression_Literal_Map_)(nil),
		(*Expression_Literal_TimestampTz)(nil),
		(*Expression_Literal_Uuid)(nil),
		(*Expression_Literal_Null)(nil),
		(*Expression_Literal_List_)(nil),
		(*Expression_Literal_EmptyList)(nil),
		(*Expression_Literal_EmptyMap)(nil),
	}
	file_substrait_algebra_proto_msgTypes[46].OneofWrappers = []interface{}{
		(*Expression_EmbeddedFunction_PythonPickleFunction_)(nil),
		(*Expression_EmbeddedFunction_WebAssemblyFunction_)(nil),
	}
	file_substrait_algebra_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*Expression_ReferenceSegment_MapKey_)(nil),
		(*Expression_ReferenceSegment_StructField_)(nil),
		(*Expression_ReferenceSegment_ListElement_)(nil),
	}
	file_substrait_algebra_proto_msgTypes[49].OneofWrappers = []interface{}{
		(*Expression_FieldReference_DirectReference)(nil),
		(*Expression_FieldReference_MaskedReference)(nil),
		(*Expression_FieldReference_Expression)(nil),
		(*Expression_FieldReference_RootReference_)(nil),
		(*Expression_FieldReference_OuterReference_)(nil),
	}
	file_substrait_algebra_proto_msgTypes[50].OneofWrappers = []interface{}{
		(*Expression_Subquery_Scalar_)(nil),
		(*Expression_Subquery_InPredicate_)(nil),
		(*Expression_Subquery_SetPredicate_)(nil),
		(*Expression_Subquery_SetComparison_)(nil),
	}
	file_substrait_algebra_proto_msgTypes[60].OneofWrappers = []interface{}{
		(*Expression_WindowFunction_Bound_Preceding_)(nil),
		(*Expression_WindowFunction_Bound_Following_)(nil),
		(*Expression_WindowFunction_Bound_CurrentRow_)(nil),
		(*Expression_WindowFunction_Bound_Unbounded_)(nil),
	}
	file_substrait_algebra_proto_msgTypes[73].OneofWrappers = []interface{}{
		(*Expression_MaskExpression_Select_Struct)(nil),
		(*Expression_MaskExpression_Select_List)(nil),
		(*Expression_MaskExpression_Select_Map)(nil),
	}
	file_substrait_algebra_proto_msgTypes[77].OneofWrappers = []interface{}{
		(*Expression_MaskExpression_MapSelect_Key)(nil),
		(*Expression_MaskExpression_MapSelect_Expression)(nil),
	}
	file_substrait_algebra_proto_msgTypes[78].OneofWrappers = []interface{}{
		(*Expression_MaskExpression_ListSelect_ListSelectItem_Item)(nil),
		(*Expression_MaskExpression_ListSelect_ListSelectItem_Slice)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_substrait_algebra_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   89,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_substrait_algebra_proto_goTypes,
		DependencyIndexes: file_substrait_algebra_proto_depIdxs,
		EnumInfos:         file_substrait_algebra_proto_enumTypes,
		MessageInfos:      file_substrait_algebra_proto_msgTypes,
	}.Build()
	File_substrait_algebra_proto = out.File
	file_substrait_algebra_proto_rawDesc = nil
	file_substrait_algebra_proto_goTypes = nil
	file_substrait_algebra_proto_depIdxs = nil
}
