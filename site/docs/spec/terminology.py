#!/usr/bin/python3
# SPDX-License-Identifier: Apache-2.0

"""Generates terminology.md from terminology.yaml to sort the terms and link
everything up nicely."""

import yaml
import re
import sys


# Header of the terminology page.
HEADER = """\
<!-- this file is generated by terminology.py -->

# Terminology

To avoid confusion for otherwise overloaded terminology, this page precisely
defines some of the words used within various parts of the specification,
protobuf files, and so on.

"""


def slugify(term):
    """Converts a term to a URL-safe key."""
    return "term-{}".format(re.sub(r"[^a-z0-9]+", "-", term.strip().lower()))


def term_usage(text, term, from_within, keyed_terms, undefined):
    """Converts the usages of a term within a description with HTML/markdown to
    link to that term. Warns if an undefined term is used."""
    key = slugify(term)
    if key not in keyed_terms:
        print(f"Warning: use of undefined term {{{term}}} from {from_within}")
        undefined.add(key)
        return text
    title = replace_usages(keyed_terms[key][1])
    title = re.sub(r"\[([^\]]+)\]\([^\)]+\)", r"\1", title)
    title = title[:1].upper() + title[1:]
    return f'<a href="#{key}" style="color: var(--md-typeset-color)"><abbr title="{title}">{text}</abbr></a>'


def replace_usages(description, repl_fn=lambda text, term: text):
    """Replaces the usages within a description using the given function.
    Default is to just strip the {} formatting."""
    return (
        re.sub(
            r"(?<!{){([^{}:]*)(?::([^{}:]*))?}(?!})",
            lambda x: repl_fn(x.group(1), x.group(2) if x.group(2) else x.group(1)),
            description
        )
        .replace("{{", "{")
        .replace("}}", "}")
    )


if __name__ == "__main__":
    warnings = False

    # Load YAML file.
    with open("terminology.yaml", "r", encoding="utf-8") as fil:
        terms = yaml.safe_load(fil)

    # Generate a unique, human-readable, URL-safe key for each term.
    keyed_terms = {}
    for term, description in terms.items():
        key = slugify(term)
        if key in keyed_terms:
            warnings = True
            print(
                f"Warning: key conflict between {{{term}}} and {{{keyed_terms[key]}}}"
            )
        keyed_terms[key] = (term, description)

    # Add HTML/markdown formatting to the description of each term.
    compiled_terms = []
    undefined = set()
    for key, (term, description) in keyed_terms.items():
        compiled_terms.append(
            (
                key,
                term,
                replace_usages(
                    description,
                    lambda text, used_term: term_usage(
                        text, used_term, term, keyed_terms, undefined
                    ),
                ),
            )
        )
    if undefined:
        warnings = True

    # Sort the terms by name.
    compiled_terms.sort()

    # Write the markdown output file.
    with open("terminology.md", "w", encoding="utf-8") as fil:
        fil.write(HEADER)
        for key, term, description in compiled_terms:
            fil.write(f' - <a id="{key}" href="#{key}">*{term}*</a>: {description}\n')

    # Fail if there were warnings.
    if warnings:
        print("There were warnings, exiting with failure status")
        sys.exit(1)
