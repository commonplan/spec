// SPDX-License-Identifier: Apache-2.0
syntax = "proto3";

package substrait;

import "substrait/algebra.proto";
import "substrait/extensions/extensions.proto";
import "substrait/type.proto";

option csharp_namespace = "Substrait.Protobuf";
option go_package = "github.com/substrait-io/substrait-go/proto";
option java_multiple_files = true;
option java_package = "io.substrait.proto";

// Either a relation or root relation
message PlanRel {
  oneof rel_type {
    // Any relation
    Rel rel = 1;
    // The root of a relation tree
    RelRoot root = 2;
  }
}

// A parameter for a plan, to support things like prepared statements in SQL.
message PlanParameter {
  // An arbitrary integer used to refer to this parameter in the plan.
  // Required.
  uint32 plan_parameter_anchor = 1;

  // The reference used to refer to this parameter outside of the plan.
  // Required.
  oneof reference {
    string named = 2;
    int32 indexed = 3;
  }

  // The data type or value of the parameter. Required. A value may be passed
  // either to serve as a default or to make the plan executable without losing
  // the distinction between parameter and literal.
  oneof type_or_value {
    Type type = 4;
    Expression.Literal value = 5;
  }
}

// Describe a set of operations to complete.
// For compactness sake, identifiers are normalized at the plan level.
message Plan {
  // a list of yaml specifications this plan may depend on
  repeated substrait.extensions.SimpleExtensionURI extension_uris = 1;

  // a list of extensions this plan may depend on
  repeated substrait.extensions.SimpleExtensionDeclaration extensions = 2;

  // one or more relation trees that are associated with this plan.
  repeated PlanRel relations = 3;

  // additional extensions associated with this plan.
  substrait.extensions.AdvancedExtension advanced_extensions = 4;

  // A list of com.google.Any entities that this plan may use. Can be used to
  // warn if some embedded message types are unknown. Note that this list may
  // include message types that are ignorable (optimizations) or that are
  // unused. In many cases, a consumer may be able to work with a plan even if
  // one or more message types defined here are unknown.
  repeated string expected_type_urls = 5;

  // An optional list of parameters used in the plan, to support things like
  // prepared statements in SQL. When nonempty, the plan can only be executed
  // when all parameters have a value (either passed along with the parameter
  // or via another channel), but it *can* be optimized or otherwise
  // manipulated.
  repeated PlanParameter parameters = 6;
}
