syntax = "proto3";
package io.substrait;

import "extensions.proto";

option java_multiple_files = true;
option csharp_namespace = "Substrait.Protobuf";

// A variation on an instance of a type
//
// Analogous to a typedef in C, a variation is useful for assigning a
// different name to an existing type.
message Variation {
    int32 organization = 1;
    string name = 2;
}

message Type {
    oneof kind {
        Boolean bool = 1;
        I8 i8 = 2;
        I16 i16 = 3;
        I32 i32 = 5;
        I64 i64 = 7;
        FP32 fp32 = 10;
        FP64 fp64 = 11;
        String string = 12;
        Binary binary = 13;
        Timestamp timestamp = 14;
        Date date = 16;
        Time time = 17;
        IntervalYear interval_year = 19;
        IntervalDay interval_day = 20;
        TimestampTZ timestamp_tz = 29;
        UUID uuid = 32;

        FixedChar fixed_char = 21;
        VarChar varchar = 22;
        FixedBinary fixed_binary = 23;
        Decimal decimal = 24;

        Struct struct = 25;
        List list = 27;
        Map map = 28;

        Extensions.TypeId user_defined = 31;
    }

    // Whether values of a type can be null
    enum Nullability {
        NULLABLE = 0;
        REQUIRED = 1;
    }

    // The type's nullability
    Nullability nullability = 1;

    // The type's variation. Optional.
    Variation variation = 2;

    message Boolean {}
    message I8 {}
    message I16 {}
    message I32 {}
    message I64 {}
    message FP32 {}
    message FP64 {}
    message String {}
    message Binary {}
    message Timestamp {}
    message Date {}
    message Time {}
    message TimestampTZ {}
    message IntervalYear {}
    message IntervalDay {}
    message UUID {}

    message FixedChar {
        int32 length = 1;
    }

    message VarChar {
        int32 length = 1;
    }

    message FixedBinary {
        int32 length = 1;
    }

    message Decimal {
        int32 scale = 1;
        int32 precision = 2;
    }

    message Struct {
        repeated Type types = 1;
    }

    message List {
        Type type = 1;
    }

    message Map {
        Type key = 1;
        Type value = 2;
    }
}

message NamedStruct {
    // A list of names in depth-first order
    repeated string names = 1;
    Type.Struct struct = 2;
}
