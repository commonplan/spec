# SPDX-License-Identifier: Apache-2.0
# Generated from FuncTestCaseParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        1,
        111,
        402,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        2,
        25,
        7,
        25,
        2,
        26,
        7,
        26,
        2,
        27,
        7,
        27,
        2,
        28,
        7,
        28,
        2,
        29,
        7,
        29,
        2,
        30,
        7,
        30,
        2,
        31,
        7,
        31,
        2,
        32,
        7,
        32,
        2,
        33,
        7,
        33,
        2,
        34,
        7,
        34,
        2,
        35,
        7,
        35,
        2,
        36,
        7,
        36,
        2,
        37,
        7,
        37,
        2,
        38,
        7,
        38,
        2,
        39,
        7,
        39,
        2,
        40,
        7,
        40,
        2,
        41,
        7,
        41,
        2,
        42,
        7,
        42,
        2,
        43,
        7,
        43,
        2,
        44,
        7,
        44,
        2,
        45,
        7,
        45,
        1,
        0,
        1,
        0,
        4,
        0,
        95,
        8,
        0,
        11,
        0,
        12,
        0,
        96,
        1,
        0,
        1,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        5,
        3,
        111,
        8,
        3,
        10,
        3,
        12,
        3,
        114,
        9,
        3,
        1,
        4,
        1,
        4,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        3,
        5,
        126,
        8,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        6,
        1,
        6,
        4,
        6,
        133,
        8,
        6,
        11,
        6,
        12,
        6,
        134,
        1,
        7,
        1,
        7,
        1,
        7,
        5,
        7,
        140,
        8,
        7,
        10,
        7,
        12,
        7,
        143,
        9,
        7,
        1,
        8,
        1,
        8,
        3,
        8,
        147,
        8,
        8,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        3,
        9,
        165,
        8,
        9,
        1,
        10,
        1,
        10,
        1,
        10,
        3,
        10,
        170,
        8,
        10,
        1,
        11,
        1,
        11,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        3,
        28,
        244,
        8,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        3,
        28,
        249,
        8,
        28,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        3,
        29,
        257,
        8,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        3,
        29,
        262,
        8,
        29,
        1,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        268,
        8,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        272,
        8,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        276,
        8,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        282,
        8,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        286,
        8,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        292,
        8,
        30,
        1,
        30,
        1,
        30,
        3,
        30,
        296,
        8,
        30,
        1,
        31,
        1,
        31,
        3,
        31,
        300,
        8,
        31,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        3,
        32,
        320,
        8,
        32,
        1,
        33,
        1,
        33,
        3,
        33,
        324,
        8,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        34,
        1,
        34,
        3,
        34,
        332,
        8,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        35,
        1,
        35,
        3,
        35,
        340,
        8,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        36,
        1,
        36,
        3,
        36,
        348,
        8,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        3,
        36,
        356,
        8,
        36,
        1,
        37,
        1,
        37,
        3,
        37,
        360,
        8,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        38,
        1,
        38,
        3,
        38,
        368,
        8,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        39,
        1,
        39,
        1,
        39,
        1,
        39,
        1,
        39,
        1,
        39,
        3,
        39,
        380,
        8,
        39,
        1,
        40,
        1,
        40,
        1,
        41,
        1,
        41,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        43,
        1,
        43,
        1,
        44,
        1,
        44,
        1,
        45,
        1,
        45,
        1,
        45,
        5,
        45,
        397,
        8,
        45,
        10,
        45,
        12,
        45,
        400,
        9,
        45,
        1,
        45,
        0,
        0,
        46,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        72,
        74,
        76,
        78,
        80,
        82,
        84,
        86,
        88,
        90,
        0,
        4,
        2,
        0,
        14,
        14,
        17,
        17,
        1,
        0,
        6,
        7,
        2,
        0,
        8,
        9,
        110,
        110,
        1,
        0,
        10,
        14,
        421,
        0,
        92,
        1,
        0,
        0,
        0,
        2,
        100,
        1,
        0,
        0,
        0,
        4,
        103,
        1,
        0,
        0,
        0,
        6,
        106,
        1,
        0,
        0,
        0,
        8,
        115,
        1,
        0,
        0,
        0,
        10,
        117,
        1,
        0,
        0,
        0,
        12,
        130,
        1,
        0,
        0,
        0,
        14,
        136,
        1,
        0,
        0,
        0,
        16,
        146,
        1,
        0,
        0,
        0,
        18,
        164,
        1,
        0,
        0,
        0,
        20,
        169,
        1,
        0,
        0,
        0,
        22,
        171,
        1,
        0,
        0,
        0,
        24,
        173,
        1,
        0,
        0,
        0,
        26,
        177,
        1,
        0,
        0,
        0,
        28,
        181,
        1,
        0,
        0,
        0,
        30,
        185,
        1,
        0,
        0,
        0,
        32,
        189,
        1,
        0,
        0,
        0,
        34,
        193,
        1,
        0,
        0,
        0,
        36,
        197,
        1,
        0,
        0,
        0,
        38,
        201,
        1,
        0,
        0,
        0,
        40,
        205,
        1,
        0,
        0,
        0,
        42,
        209,
        1,
        0,
        0,
        0,
        44,
        213,
        1,
        0,
        0,
        0,
        46,
        217,
        1,
        0,
        0,
        0,
        48,
        221,
        1,
        0,
        0,
        0,
        50,
        225,
        1,
        0,
        0,
        0,
        52,
        229,
        1,
        0,
        0,
        0,
        54,
        233,
        1,
        0,
        0,
        0,
        56,
        248,
        1,
        0,
        0,
        0,
        58,
        261,
        1,
        0,
        0,
        0,
        60,
        295,
        1,
        0,
        0,
        0,
        62,
        299,
        1,
        0,
        0,
        0,
        64,
        319,
        1,
        0,
        0,
        0,
        66,
        321,
        1,
        0,
        0,
        0,
        68,
        329,
        1,
        0,
        0,
        0,
        70,
        337,
        1,
        0,
        0,
        0,
        72,
        345,
        1,
        0,
        0,
        0,
        74,
        357,
        1,
        0,
        0,
        0,
        76,
        365,
        1,
        0,
        0,
        0,
        78,
        379,
        1,
        0,
        0,
        0,
        80,
        381,
        1,
        0,
        0,
        0,
        82,
        383,
        1,
        0,
        0,
        0,
        84,
        385,
        1,
        0,
        0,
        0,
        86,
        389,
        1,
        0,
        0,
        0,
        88,
        391,
        1,
        0,
        0,
        0,
        90,
        393,
        1,
        0,
        0,
        0,
        92,
        94,
        3,
        2,
        1,
        0,
        93,
        95,
        3,
        12,
        6,
        0,
        94,
        93,
        1,
        0,
        0,
        0,
        95,
        96,
        1,
        0,
        0,
        0,
        96,
        94,
        1,
        0,
        0,
        0,
        96,
        97,
        1,
        0,
        0,
        0,
        97,
        98,
        1,
        0,
        0,
        0,
        98,
        99,
        5,
        0,
        0,
        1,
        99,
        1,
        1,
        0,
        0,
        0,
        100,
        101,
        3,
        4,
        2,
        0,
        101,
        102,
        3,
        6,
        3,
        0,
        102,
        3,
        1,
        0,
        0,
        0,
        103,
        104,
        5,
        2,
        0,
        0,
        104,
        105,
        5,
        4,
        0,
        0,
        105,
        5,
        1,
        0,
        0,
        0,
        106,
        107,
        5,
        3,
        0,
        0,
        107,
        112,
        5,
        36,
        0,
        0,
        108,
        109,
        5,
        101,
        0,
        0,
        109,
        111,
        5,
        36,
        0,
        0,
        110,
        108,
        1,
        0,
        0,
        0,
        111,
        114,
        1,
        0,
        0,
        0,
        112,
        110,
        1,
        0,
        0,
        0,
        112,
        113,
        1,
        0,
        0,
        0,
        113,
        7,
        1,
        0,
        0,
        0,
        114,
        112,
        1,
        0,
        0,
        0,
        115,
        116,
        5,
        5,
        0,
        0,
        116,
        9,
        1,
        0,
        0,
        0,
        117,
        118,
        5,
        110,
        0,
        0,
        118,
        119,
        5,
        97,
        0,
        0,
        119,
        120,
        3,
        14,
        7,
        0,
        120,
        125,
        5,
        98,
        0,
        0,
        121,
        122,
        5,
        99,
        0,
        0,
        122,
        123,
        3,
        90,
        45,
        0,
        123,
        124,
        5,
        100,
        0,
        0,
        124,
        126,
        1,
        0,
        0,
        0,
        125,
        121,
        1,
        0,
        0,
        0,
        125,
        126,
        1,
        0,
        0,
        0,
        126,
        127,
        1,
        0,
        0,
        0,
        127,
        128,
        5,
        90,
        0,
        0,
        128,
        129,
        3,
        16,
        8,
        0,
        129,
        11,
        1,
        0,
        0,
        0,
        130,
        132,
        3,
        8,
        4,
        0,
        131,
        133,
        3,
        10,
        5,
        0,
        132,
        131,
        1,
        0,
        0,
        0,
        133,
        134,
        1,
        0,
        0,
        0,
        134,
        132,
        1,
        0,
        0,
        0,
        134,
        135,
        1,
        0,
        0,
        0,
        135,
        13,
        1,
        0,
        0,
        0,
        136,
        141,
        3,
        18,
        9,
        0,
        137,
        138,
        5,
        101,
        0,
        0,
        138,
        140,
        3,
        18,
        9,
        0,
        139,
        137,
        1,
        0,
        0,
        0,
        140,
        143,
        1,
        0,
        0,
        0,
        141,
        139,
        1,
        0,
        0,
        0,
        141,
        142,
        1,
        0,
        0,
        0,
        142,
        15,
        1,
        0,
        0,
        0,
        143,
        141,
        1,
        0,
        0,
        0,
        144,
        147,
        3,
        18,
        9,
        0,
        145,
        147,
        3,
        82,
        41,
        0,
        146,
        144,
        1,
        0,
        0,
        0,
        146,
        145,
        1,
        0,
        0,
        0,
        147,
        17,
        1,
        0,
        0,
        0,
        148,
        165,
        3,
        24,
        12,
        0,
        149,
        165,
        3,
        26,
        13,
        0,
        150,
        165,
        3,
        28,
        14,
        0,
        151,
        165,
        3,
        30,
        15,
        0,
        152,
        165,
        3,
        32,
        16,
        0,
        153,
        165,
        3,
        34,
        17,
        0,
        154,
        165,
        3,
        36,
        18,
        0,
        155,
        165,
        3,
        40,
        20,
        0,
        156,
        165,
        3,
        42,
        21,
        0,
        157,
        165,
        3,
        38,
        19,
        0,
        158,
        165,
        3,
        44,
        22,
        0,
        159,
        165,
        3,
        46,
        23,
        0,
        160,
        165,
        3,
        48,
        24,
        0,
        161,
        165,
        3,
        50,
        25,
        0,
        162,
        165,
        3,
        52,
        26,
        0,
        163,
        165,
        3,
        54,
        27,
        0,
        164,
        148,
        1,
        0,
        0,
        0,
        164,
        149,
        1,
        0,
        0,
        0,
        164,
        150,
        1,
        0,
        0,
        0,
        164,
        151,
        1,
        0,
        0,
        0,
        164,
        152,
        1,
        0,
        0,
        0,
        164,
        153,
        1,
        0,
        0,
        0,
        164,
        154,
        1,
        0,
        0,
        0,
        164,
        155,
        1,
        0,
        0,
        0,
        164,
        156,
        1,
        0,
        0,
        0,
        164,
        157,
        1,
        0,
        0,
        0,
        164,
        158,
        1,
        0,
        0,
        0,
        164,
        159,
        1,
        0,
        0,
        0,
        164,
        160,
        1,
        0,
        0,
        0,
        164,
        161,
        1,
        0,
        0,
        0,
        164,
        162,
        1,
        0,
        0,
        0,
        164,
        163,
        1,
        0,
        0,
        0,
        165,
        19,
        1,
        0,
        0,
        0,
        166,
        170,
        5,
        16,
        0,
        0,
        167,
        170,
        5,
        15,
        0,
        0,
        168,
        170,
        3,
        22,
        11,
        0,
        169,
        166,
        1,
        0,
        0,
        0,
        169,
        167,
        1,
        0,
        0,
        0,
        169,
        168,
        1,
        0,
        0,
        0,
        170,
        21,
        1,
        0,
        0,
        0,
        171,
        172,
        7,
        0,
        0,
        0,
        172,
        23,
        1,
        0,
        0,
        0,
        173,
        174,
        5,
        35,
        0,
        0,
        174,
        175,
        5,
        84,
        0,
        0,
        175,
        176,
        3,
        62,
        31,
        0,
        176,
        25,
        1,
        0,
        0,
        0,
        177,
        178,
        5,
        15,
        0,
        0,
        178,
        179,
        5,
        84,
        0,
        0,
        179,
        180,
        5,
        43,
        0,
        0,
        180,
        27,
        1,
        0,
        0,
        0,
        181,
        182,
        5,
        15,
        0,
        0,
        182,
        183,
        5,
        84,
        0,
        0,
        183,
        184,
        5,
        44,
        0,
        0,
        184,
        29,
        1,
        0,
        0,
        0,
        185,
        186,
        5,
        15,
        0,
        0,
        186,
        187,
        5,
        84,
        0,
        0,
        187,
        188,
        5,
        45,
        0,
        0,
        188,
        31,
        1,
        0,
        0,
        0,
        189,
        190,
        5,
        15,
        0,
        0,
        190,
        191,
        5,
        84,
        0,
        0,
        191,
        192,
        5,
        46,
        0,
        0,
        192,
        33,
        1,
        0,
        0,
        0,
        193,
        194,
        3,
        20,
        10,
        0,
        194,
        195,
        5,
        84,
        0,
        0,
        195,
        196,
        5,
        47,
        0,
        0,
        196,
        35,
        1,
        0,
        0,
        0,
        197,
        198,
        3,
        20,
        10,
        0,
        198,
        199,
        5,
        84,
        0,
        0,
        199,
        200,
        5,
        48,
        0,
        0,
        200,
        37,
        1,
        0,
        0,
        0,
        201,
        202,
        3,
        20,
        10,
        0,
        202,
        203,
        5,
        84,
        0,
        0,
        203,
        204,
        3,
        72,
        36,
        0,
        204,
        39,
        1,
        0,
        0,
        0,
        205,
        206,
        5,
        18,
        0,
        0,
        206,
        207,
        5,
        84,
        0,
        0,
        207,
        208,
        5,
        69,
        0,
        0,
        208,
        41,
        1,
        0,
        0,
        0,
        209,
        210,
        5,
        36,
        0,
        0,
        210,
        211,
        5,
        84,
        0,
        0,
        211,
        212,
        5,
        70,
        0,
        0,
        212,
        43,
        1,
        0,
        0,
        0,
        213,
        214,
        5,
        22,
        0,
        0,
        214,
        215,
        5,
        84,
        0,
        0,
        215,
        216,
        5,
        53,
        0,
        0,
        216,
        45,
        1,
        0,
        0,
        0,
        217,
        218,
        5,
        21,
        0,
        0,
        218,
        219,
        5,
        84,
        0,
        0,
        219,
        220,
        5,
        54,
        0,
        0,
        220,
        47,
        1,
        0,
        0,
        0,
        221,
        222,
        5,
        20,
        0,
        0,
        222,
        223,
        5,
        84,
        0,
        0,
        223,
        224,
        5,
        72,
        0,
        0,
        224,
        49,
        1,
        0,
        0,
        0,
        225,
        226,
        5,
        19,
        0,
        0,
        226,
        227,
        5,
        84,
        0,
        0,
        227,
        228,
        5,
        73,
        0,
        0,
        228,
        51,
        1,
        0,
        0,
        0,
        229,
        230,
        5,
        33,
        0,
        0,
        230,
        231,
        5,
        84,
        0,
        0,
        231,
        232,
        5,
        74,
        0,
        0,
        232,
        53,
        1,
        0,
        0,
        0,
        233,
        234,
        5,
        34,
        0,
        0,
        234,
        235,
        5,
        84,
        0,
        0,
        235,
        236,
        5,
        75,
        0,
        0,
        236,
        55,
        1,
        0,
        0,
        0,
        237,
        238,
        5,
        23,
        0,
        0,
        238,
        239,
        5,
        15,
        0,
        0,
        239,
        240,
        5,
        25,
        0,
        0,
        240,
        243,
        1,
        0,
        0,
        0,
        241,
        242,
        5,
        15,
        0,
        0,
        242,
        244,
        5,
        26,
        0,
        0,
        243,
        241,
        1,
        0,
        0,
        0,
        243,
        244,
        1,
        0,
        0,
        0,
        244,
        249,
        1,
        0,
        0,
        0,
        245,
        246,
        5,
        23,
        0,
        0,
        246,
        247,
        5,
        15,
        0,
        0,
        247,
        249,
        5,
        26,
        0,
        0,
        248,
        237,
        1,
        0,
        0,
        0,
        248,
        245,
        1,
        0,
        0,
        0,
        249,
        57,
        1,
        0,
        0,
        0,
        250,
        251,
        5,
        23,
        0,
        0,
        251,
        252,
        5,
        15,
        0,
        0,
        252,
        253,
        5,
        27,
        0,
        0,
        253,
        256,
        1,
        0,
        0,
        0,
        254,
        255,
        5,
        24,
        0,
        0,
        255,
        257,
        3,
        60,
        30,
        0,
        256,
        254,
        1,
        0,
        0,
        0,
        256,
        257,
        1,
        0,
        0,
        0,
        257,
        262,
        1,
        0,
        0,
        0,
        258,
        259,
        5,
        23,
        0,
        0,
        259,
        260,
        5,
        24,
        0,
        0,
        260,
        262,
        3,
        60,
        30,
        0,
        261,
        250,
        1,
        0,
        0,
        0,
        261,
        258,
        1,
        0,
        0,
        0,
        262,
        59,
        1,
        0,
        0,
        0,
        263,
        264,
        5,
        15,
        0,
        0,
        264,
        267,
        5,
        28,
        0,
        0,
        265,
        266,
        5,
        15,
        0,
        0,
        266,
        268,
        5,
        26,
        0,
        0,
        267,
        265,
        1,
        0,
        0,
        0,
        267,
        268,
        1,
        0,
        0,
        0,
        268,
        271,
        1,
        0,
        0,
        0,
        269,
        270,
        5,
        15,
        0,
        0,
        270,
        272,
        5,
        29,
        0,
        0,
        271,
        269,
        1,
        0,
        0,
        0,
        271,
        272,
        1,
        0,
        0,
        0,
        272,
        275,
        1,
        0,
        0,
        0,
        273,
        274,
        5,
        15,
        0,
        0,
        274,
        276,
        5,
        30,
        0,
        0,
        275,
        273,
        1,
        0,
        0,
        0,
        275,
        276,
        1,
        0,
        0,
        0,
        276,
        296,
        1,
        0,
        0,
        0,
        277,
        278,
        5,
        15,
        0,
        0,
        278,
        281,
        5,
        26,
        0,
        0,
        279,
        280,
        5,
        15,
        0,
        0,
        280,
        282,
        5,
        29,
        0,
        0,
        281,
        279,
        1,
        0,
        0,
        0,
        281,
        282,
        1,
        0,
        0,
        0,
        282,
        285,
        1,
        0,
        0,
        0,
        283,
        284,
        5,
        15,
        0,
        0,
        284,
        286,
        5,
        30,
        0,
        0,
        285,
        283,
        1,
        0,
        0,
        0,
        285,
        286,
        1,
        0,
        0,
        0,
        286,
        296,
        1,
        0,
        0,
        0,
        287,
        288,
        5,
        15,
        0,
        0,
        288,
        291,
        5,
        29,
        0,
        0,
        289,
        290,
        5,
        15,
        0,
        0,
        290,
        292,
        5,
        30,
        0,
        0,
        291,
        289,
        1,
        0,
        0,
        0,
        291,
        292,
        1,
        0,
        0,
        0,
        292,
        296,
        1,
        0,
        0,
        0,
        293,
        294,
        5,
        15,
        0,
        0,
        294,
        296,
        5,
        30,
        0,
        0,
        295,
        263,
        1,
        0,
        0,
        0,
        295,
        277,
        1,
        0,
        0,
        0,
        295,
        287,
        1,
        0,
        0,
        0,
        295,
        293,
        1,
        0,
        0,
        0,
        296,
        61,
        1,
        0,
        0,
        0,
        297,
        300,
        3,
        64,
        32,
        0,
        298,
        300,
        3,
        78,
        39,
        0,
        299,
        297,
        1,
        0,
        0,
        0,
        299,
        298,
        1,
        0,
        0,
        0,
        300,
        63,
        1,
        0,
        0,
        0,
        301,
        320,
        5,
        69,
        0,
        0,
        302,
        320,
        5,
        43,
        0,
        0,
        303,
        320,
        5,
        44,
        0,
        0,
        304,
        320,
        5,
        45,
        0,
        0,
        305,
        320,
        5,
        46,
        0,
        0,
        306,
        320,
        5,
        47,
        0,
        0,
        307,
        320,
        5,
        48,
        0,
        0,
        308,
        320,
        5,
        70,
        0,
        0,
        309,
        320,
        5,
        50,
        0,
        0,
        310,
        320,
        5,
        72,
        0,
        0,
        311,
        320,
        5,
        73,
        0,
        0,
        312,
        320,
        5,
        53,
        0,
        0,
        313,
        320,
        5,
        54,
        0,
        0,
        314,
        320,
        5,
        75,
        0,
        0,
        315,
        320,
        5,
        74,
        0,
        0,
        316,
        320,
        5,
        57,
        0,
        0,
        317,
        318,
        5,
        68,
        0,
        0,
        318,
        320,
        5,
        110,
        0,
        0,
        319,
        301,
        1,
        0,
        0,
        0,
        319,
        302,
        1,
        0,
        0,
        0,
        319,
        303,
        1,
        0,
        0,
        0,
        319,
        304,
        1,
        0,
        0,
        0,
        319,
        305,
        1,
        0,
        0,
        0,
        319,
        306,
        1,
        0,
        0,
        0,
        319,
        307,
        1,
        0,
        0,
        0,
        319,
        308,
        1,
        0,
        0,
        0,
        319,
        309,
        1,
        0,
        0,
        0,
        319,
        310,
        1,
        0,
        0,
        0,
        319,
        311,
        1,
        0,
        0,
        0,
        319,
        312,
        1,
        0,
        0,
        0,
        319,
        313,
        1,
        0,
        0,
        0,
        319,
        314,
        1,
        0,
        0,
        0,
        319,
        315,
        1,
        0,
        0,
        0,
        319,
        316,
        1,
        0,
        0,
        0,
        319,
        317,
        1,
        0,
        0,
        0,
        320,
        65,
        1,
        0,
        0,
        0,
        321,
        323,
        5,
        79,
        0,
        0,
        322,
        324,
        5,
        103,
        0,
        0,
        323,
        322,
        1,
        0,
        0,
        0,
        323,
        324,
        1,
        0,
        0,
        0,
        324,
        325,
        1,
        0,
        0,
        0,
        325,
        326,
        5,
        31,
        0,
        0,
        326,
        327,
        3,
        80,
        40,
        0,
        327,
        328,
        5,
        32,
        0,
        0,
        328,
        67,
        1,
        0,
        0,
        0,
        329,
        331,
        5,
        80,
        0,
        0,
        330,
        332,
        5,
        103,
        0,
        0,
        331,
        330,
        1,
        0,
        0,
        0,
        331,
        332,
        1,
        0,
        0,
        0,
        332,
        333,
        1,
        0,
        0,
        0,
        333,
        334,
        5,
        31,
        0,
        0,
        334,
        335,
        3,
        80,
        40,
        0,
        335,
        336,
        5,
        32,
        0,
        0,
        336,
        69,
        1,
        0,
        0,
        0,
        337,
        339,
        5,
        81,
        0,
        0,
        338,
        340,
        5,
        103,
        0,
        0,
        339,
        338,
        1,
        0,
        0,
        0,
        339,
        340,
        1,
        0,
        0,
        0,
        340,
        341,
        1,
        0,
        0,
        0,
        341,
        342,
        5,
        31,
        0,
        0,
        342,
        343,
        3,
        80,
        40,
        0,
        343,
        344,
        5,
        32,
        0,
        0,
        344,
        71,
        1,
        0,
        0,
        0,
        345,
        347,
        5,
        76,
        0,
        0,
        346,
        348,
        5,
        103,
        0,
        0,
        347,
        346,
        1,
        0,
        0,
        0,
        347,
        348,
        1,
        0,
        0,
        0,
        348,
        355,
        1,
        0,
        0,
        0,
        349,
        350,
        5,
        31,
        0,
        0,
        350,
        351,
        3,
        80,
        40,
        0,
        351,
        352,
        5,
        101,
        0,
        0,
        352,
        353,
        3,
        80,
        40,
        0,
        353,
        354,
        5,
        32,
        0,
        0,
        354,
        356,
        1,
        0,
        0,
        0,
        355,
        349,
        1,
        0,
        0,
        0,
        355,
        356,
        1,
        0,
        0,
        0,
        356,
        73,
        1,
        0,
        0,
        0,
        357,
        359,
        5,
        77,
        0,
        0,
        358,
        360,
        5,
        103,
        0,
        0,
        359,
        358,
        1,
        0,
        0,
        0,
        359,
        360,
        1,
        0,
        0,
        0,
        360,
        361,
        1,
        0,
        0,
        0,
        361,
        362,
        5,
        31,
        0,
        0,
        362,
        363,
        3,
        80,
        40,
        0,
        363,
        364,
        5,
        32,
        0,
        0,
        364,
        75,
        1,
        0,
        0,
        0,
        365,
        367,
        5,
        78,
        0,
        0,
        366,
        368,
        5,
        103,
        0,
        0,
        367,
        366,
        1,
        0,
        0,
        0,
        367,
        368,
        1,
        0,
        0,
        0,
        368,
        369,
        1,
        0,
        0,
        0,
        369,
        370,
        5,
        31,
        0,
        0,
        370,
        371,
        3,
        80,
        40,
        0,
        371,
        372,
        5,
        32,
        0,
        0,
        372,
        77,
        1,
        0,
        0,
        0,
        373,
        380,
        3,
        66,
        33,
        0,
        374,
        380,
        3,
        68,
        34,
        0,
        375,
        380,
        3,
        70,
        35,
        0,
        376,
        380,
        3,
        72,
        36,
        0,
        377,
        380,
        3,
        74,
        37,
        0,
        378,
        380,
        3,
        76,
        38,
        0,
        379,
        373,
        1,
        0,
        0,
        0,
        379,
        374,
        1,
        0,
        0,
        0,
        379,
        375,
        1,
        0,
        0,
        0,
        379,
        376,
        1,
        0,
        0,
        0,
        379,
        377,
        1,
        0,
        0,
        0,
        379,
        378,
        1,
        0,
        0,
        0,
        380,
        79,
        1,
        0,
        0,
        0,
        381,
        382,
        5,
        15,
        0,
        0,
        382,
        81,
        1,
        0,
        0,
        0,
        383,
        384,
        7,
        1,
        0,
        0,
        384,
        83,
        1,
        0,
        0,
        0,
        385,
        386,
        3,
        86,
        43,
        0,
        386,
        387,
        5,
        102,
        0,
        0,
        387,
        388,
        3,
        88,
        44,
        0,
        388,
        85,
        1,
        0,
        0,
        0,
        389,
        390,
        7,
        2,
        0,
        0,
        390,
        87,
        1,
        0,
        0,
        0,
        391,
        392,
        7,
        3,
        0,
        0,
        392,
        89,
        1,
        0,
        0,
        0,
        393,
        398,
        3,
        84,
        42,
        0,
        394,
        395,
        5,
        101,
        0,
        0,
        395,
        397,
        3,
        84,
        42,
        0,
        396,
        394,
        1,
        0,
        0,
        0,
        397,
        400,
        1,
        0,
        0,
        0,
        398,
        396,
        1,
        0,
        0,
        0,
        398,
        399,
        1,
        0,
        0,
        0,
        399,
        91,
        1,
        0,
        0,
        0,
        400,
        398,
        1,
        0,
        0,
        0,
        30,
        96,
        112,
        125,
        134,
        141,
        146,
        164,
        169,
        243,
        248,
        256,
        261,
        267,
        271,
        275,
        281,
        285,
        291,
        295,
        299,
        319,
        323,
        331,
        339,
        347,
        355,
        359,
        367,
        379,
        398,
    ]


class FuncTestCaseParser(Parser):
    grammarFileName = "FuncTestCaseParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "<INVALID>",
        "'### SUBSTRAIT_SCALAR_TEST:'",
        "'### SUBSTRAIT_INCLUDE:'",
        "<INVALID>",
        "<INVALID>",
        "'<!ERROR>'",
        "'<!UNDEFINED>'",
        "'overlfow'",
        "'rounding'",
        "'ERROR'",
        "'SATURATE'",
        "'SILENT'",
        "'TIE_TO_EVEN'",
        "'NAN'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'P'",
        "'T'",
        "'Y'",
        "'M'",
        "'D'",
        "'H'",
        "'S'",
        "'F'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'null'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'IF'",
        "'THEN'",
        "'ELSE'",
        "'BOOLEAN'",
        "'I8'",
        "'I16'",
        "'I32'",
        "'I64'",
        "'FP32'",
        "'FP64'",
        "'STRING'",
        "'BINARY'",
        "'TIMESTAMP'",
        "'TIMESTAMP_TZ'",
        "'DATE'",
        "'TIME'",
        "'INTERVAL_YEAR'",
        "'INTERVAL_DAY'",
        "'UUID'",
        "'DECIMAL'",
        "'PRECISION_TIMESTAMP'",
        "'PRECISION_TIMESTAMP_TZ'",
        "'FIXEDCHAR'",
        "'VARCHAR'",
        "'FIXEDBINARY'",
        "'STRUCT'",
        "'NSTRUCT'",
        "'LIST'",
        "'MAP'",
        "'U!'",
        "'BOOL'",
        "'STR'",
        "'VBIN'",
        "'TS'",
        "'TSTZ'",
        "'IYEAR'",
        "'IDAY'",
        "'DEC'",
        "'PTS'",
        "'PTSTZ'",
        "'FCHAR'",
        "'VCHAR'",
        "'FBIN'",
        "'ANY'",
        "<INVALID>",
        "'::'",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'%'",
        "'='",
        "'!='",
        "'>='",
        "'<='",
        "'>'",
        "'<'",
        "'!'",
        "'('",
        "')'",
        "'['",
        "']'",
        "','",
        "':'",
        "'?'",
        "'#'",
        "'.'",
        "'AND'",
        "'OR'",
        "':='",
    ]

    symbolicNames = [
        "<INVALID>",
        "Whitespace",
        "SubstraitScalarTest",
        "SubstraitInclude",
        "FormatVersion",
        "DescriptionLine",
        "ErrorResult",
        "UndefineResult",
        "Overflow",
        "Rounding",
        "Error",
        "Saturate",
        "Silent",
        "TieToEven",
        "NaN",
        "IntegerLiteral",
        "DecimalLiteral",
        "FloatLiteral",
        "BooleanLiteral",
        "TimestampTzLiteral",
        "TimestampLiteral",
        "TimeLiteral",
        "DateLiteral",
        "PeriodPrefix",
        "TimePrefix",
        "YearPrefix",
        "MSuffix",
        "DaySuffix",
        "HourSuffix",
        "SecondSuffix",
        "FractionalSecondSuffix",
        "OAngleBracket",
        "CAngleBracket",
        "IntervalYearLiteral",
        "IntervalDayLiteral",
        "NullLiteral",
        "StringLiteral",
        "LineComment",
        "BlockComment",
        "If",
        "Then",
        "Else",
        "Boolean",
        "I8",
        "I16",
        "I32",
        "I64",
        "FP32",
        "FP64",
        "String",
        "Binary",
        "Timestamp",
        "Timestamp_TZ",
        "Date",
        "Time",
        "Interval_Year",
        "Interval_Day",
        "UUID",
        "Decimal",
        "Precision_Timestamp",
        "Precision_Timestamp_TZ",
        "FixedChar",
        "VarChar",
        "FixedBinary",
        "Struct",
        "NStruct",
        "List",
        "Map",
        "UserDefined",
        "Bool",
        "Str",
        "VBin",
        "Ts",
        "TsTZ",
        "IYear",
        "IDay",
        "Dec",
        "PTs",
        "PTsTZ",
        "FChar",
        "VChar",
        "FBin",
        "Any",
        "AnyVar",
        "DoubleColon",
        "Plus",
        "Minus",
        "Asterisk",
        "ForwardSlash",
        "Percent",
        "Eq",
        "Ne",
        "Gte",
        "Lte",
        "Gt",
        "Lt",
        "Bang",
        "OParen",
        "CParen",
        "OBracket",
        "CBracket",
        "Comma",
        "Colon",
        "QMark",
        "Hash",
        "Dot",
        "And",
        "Or",
        "Assign",
        "Number",
        "Identifier",
        "Newline",
    ]

    RULE_doc = 0
    RULE_header = 1
    RULE_version = 2
    RULE_include = 3
    RULE_testGroupDescription = 4
    RULE_testCase = 5
    RULE_testGroup = 6
    RULE_arguments = 7
    RULE_result = 8
    RULE_argument = 9
    RULE_numericLiteral = 10
    RULE_floatLiteral = 11
    RULE_nullArg = 12
    RULE_i8Arg = 13
    RULE_i16Arg = 14
    RULE_i32Arg = 15
    RULE_i64Arg = 16
    RULE_fp32Arg = 17
    RULE_fp64Arg = 18
    RULE_decimalArg = 19
    RULE_booleanArg = 20
    RULE_stringArg = 21
    RULE_dateArg = 22
    RULE_timeArg = 23
    RULE_timestampArg = 24
    RULE_timestampTzArg = 25
    RULE_intervalYearArg = 26
    RULE_intervalDayArg = 27
    RULE_intervalYearLiteral = 28
    RULE_intervalDayLiteral = 29
    RULE_timeInterval = 30
    RULE_datatype = 31
    RULE_scalarType = 32
    RULE_fixedCharType = 33
    RULE_varCharType = 34
    RULE_fixedBinaryType = 35
    RULE_decimalType = 36
    RULE_precisionTimestampType = 37
    RULE_precisionTimestampTZType = 38
    RULE_parameterizedType = 39
    RULE_numericParameter = 40
    RULE_substraitError = 41
    RULE_func_option = 42
    RULE_option_name = 43
    RULE_option_value = 44
    RULE_func_options = 45

    ruleNames = [
        "doc",
        "header",
        "version",
        "include",
        "testGroupDescription",
        "testCase",
        "testGroup",
        "arguments",
        "result",
        "argument",
        "numericLiteral",
        "floatLiteral",
        "nullArg",
        "i8Arg",
        "i16Arg",
        "i32Arg",
        "i64Arg",
        "fp32Arg",
        "fp64Arg",
        "decimalArg",
        "booleanArg",
        "stringArg",
        "dateArg",
        "timeArg",
        "timestampArg",
        "timestampTzArg",
        "intervalYearArg",
        "intervalDayArg",
        "intervalYearLiteral",
        "intervalDayLiteral",
        "timeInterval",
        "datatype",
        "scalarType",
        "fixedCharType",
        "varCharType",
        "fixedBinaryType",
        "decimalType",
        "precisionTimestampType",
        "precisionTimestampTZType",
        "parameterizedType",
        "numericParameter",
        "substraitError",
        "func_option",
        "option_name",
        "option_value",
        "func_options",
    ]

    EOF = Token.EOF
    Whitespace = 1
    SubstraitScalarTest = 2
    SubstraitInclude = 3
    FormatVersion = 4
    DescriptionLine = 5
    ErrorResult = 6
    UndefineResult = 7
    Overflow = 8
    Rounding = 9
    Error = 10
    Saturate = 11
    Silent = 12
    TieToEven = 13
    NaN = 14
    IntegerLiteral = 15
    DecimalLiteral = 16
    FloatLiteral = 17
    BooleanLiteral = 18
    TimestampTzLiteral = 19
    TimestampLiteral = 20
    TimeLiteral = 21
    DateLiteral = 22
    PeriodPrefix = 23
    TimePrefix = 24
    YearPrefix = 25
    MSuffix = 26
    DaySuffix = 27
    HourSuffix = 28
    SecondSuffix = 29
    FractionalSecondSuffix = 30
    OAngleBracket = 31
    CAngleBracket = 32
    IntervalYearLiteral = 33
    IntervalDayLiteral = 34
    NullLiteral = 35
    StringLiteral = 36
    LineComment = 37
    BlockComment = 38
    If = 39
    Then = 40
    Else = 41
    Boolean = 42
    I8 = 43
    I16 = 44
    I32 = 45
    I64 = 46
    FP32 = 47
    FP64 = 48
    String = 49
    Binary = 50
    Timestamp = 51
    Timestamp_TZ = 52
    Date = 53
    Time = 54
    Interval_Year = 55
    Interval_Day = 56
    UUID = 57
    Decimal = 58
    Precision_Timestamp = 59
    Precision_Timestamp_TZ = 60
    FixedChar = 61
    VarChar = 62
    FixedBinary = 63
    Struct = 64
    NStruct = 65
    List = 66
    Map = 67
    UserDefined = 68
    Bool = 69
    Str = 70
    VBin = 71
    Ts = 72
    TsTZ = 73
    IYear = 74
    IDay = 75
    Dec = 76
    PTs = 77
    PTsTZ = 78
    FChar = 79
    VChar = 80
    FBin = 81
    Any = 82
    AnyVar = 83
    DoubleColon = 84
    Plus = 85
    Minus = 86
    Asterisk = 87
    ForwardSlash = 88
    Percent = 89
    Eq = 90
    Ne = 91
    Gte = 92
    Lte = 93
    Gt = 94
    Lt = 95
    Bang = 96
    OParen = 97
    CParen = 98
    OBracket = 99
    CBracket = 100
    Comma = 101
    Colon = 102
    QMark = 103
    Hash = 104
    Dot = 105
    And = 106
    Or = 107
    Assign = 108
    Number = 109
    Identifier = 110
    Newline = 111

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class DocContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def header(self):
            return self.getTypedRuleContext(FuncTestCaseParser.HeaderContext, 0)

        def EOF(self):
            return self.getToken(FuncTestCaseParser.EOF, 0)

        def testGroup(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FuncTestCaseParser.TestGroupContext)
            else:
                return self.getTypedRuleContext(FuncTestCaseParser.TestGroupContext, i)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_doc

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDoc"):
                listener.enterDoc(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDoc"):
                listener.exitDoc(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDoc"):
                return visitor.visitDoc(self)
            else:
                return visitor.visitChildren(self)

    def doc(self):
        localctx = FuncTestCaseParser.DocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_doc)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 92
            self.header()
            self.state = 94
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 93
                self.testGroup()
                self.state = 96
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 5):
                    break

            self.state = 98
            self.match(FuncTestCaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HeaderContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(FuncTestCaseParser.VersionContext, 0)

        def include(self):
            return self.getTypedRuleContext(FuncTestCaseParser.IncludeContext, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_header

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHeader"):
                listener.enterHeader(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHeader"):
                listener.exitHeader(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitHeader"):
                return visitor.visitHeader(self)
            else:
                return visitor.visitChildren(self)

    def header(self):
        localctx = FuncTestCaseParser.HeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_header)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 100
            self.version()
            self.state = 101
            self.include()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SubstraitScalarTest(self):
            return self.getToken(FuncTestCaseParser.SubstraitScalarTest, 0)

        def FormatVersion(self):
            return self.getToken(FuncTestCaseParser.FormatVersion, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_version

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVersion"):
                listener.enterVersion(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVersion"):
                listener.exitVersion(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVersion"):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)

    def version(self):
        localctx = FuncTestCaseParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 103
            self.match(FuncTestCaseParser.SubstraitScalarTest)
            self.state = 104
            self.match(FuncTestCaseParser.FormatVersion)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IncludeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SubstraitInclude(self):
            return self.getToken(FuncTestCaseParser.SubstraitInclude, 0)

        def StringLiteral(self, i: int = None):
            if i is None:
                return self.getTokens(FuncTestCaseParser.StringLiteral)
            else:
                return self.getToken(FuncTestCaseParser.StringLiteral, i)

        def Comma(self, i: int = None):
            if i is None:
                return self.getTokens(FuncTestCaseParser.Comma)
            else:
                return self.getToken(FuncTestCaseParser.Comma, i)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_include

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInclude"):
                listener.enterInclude(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInclude"):
                listener.exitInclude(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInclude"):
                return visitor.visitInclude(self)
            else:
                return visitor.visitChildren(self)

    def include(self):
        localctx = FuncTestCaseParser.IncludeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_include)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 106
            self.match(FuncTestCaseParser.SubstraitInclude)
            self.state = 107
            self.match(FuncTestCaseParser.StringLiteral)
            self.state = 112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 101:
                self.state = 108
                self.match(FuncTestCaseParser.Comma)
                self.state = 109
                self.match(FuncTestCaseParser.StringLiteral)
                self.state = 114
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestGroupDescriptionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DescriptionLine(self):
            return self.getToken(FuncTestCaseParser.DescriptionLine, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_testGroupDescription

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTestGroupDescription"):
                listener.enterTestGroupDescription(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTestGroupDescription"):
                listener.exitTestGroupDescription(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTestGroupDescription"):
                return visitor.visitTestGroupDescription(self)
            else:
                return visitor.visitChildren(self)

    def testGroupDescription(self):
        localctx = FuncTestCaseParser.TestGroupDescriptionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 8, self.RULE_testGroupDescription)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 115
            self.match(FuncTestCaseParser.DescriptionLine)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestCaseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.functionName = None  # Token

        def OParen(self):
            return self.getToken(FuncTestCaseParser.OParen, 0)

        def arguments(self):
            return self.getTypedRuleContext(FuncTestCaseParser.ArgumentsContext, 0)

        def CParen(self):
            return self.getToken(FuncTestCaseParser.CParen, 0)

        def Eq(self):
            return self.getToken(FuncTestCaseParser.Eq, 0)

        def result(self):
            return self.getTypedRuleContext(FuncTestCaseParser.ResultContext, 0)

        def Identifier(self):
            return self.getToken(FuncTestCaseParser.Identifier, 0)

        def OBracket(self):
            return self.getToken(FuncTestCaseParser.OBracket, 0)

        def func_options(self):
            return self.getTypedRuleContext(FuncTestCaseParser.Func_optionsContext, 0)

        def CBracket(self):
            return self.getToken(FuncTestCaseParser.CBracket, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_testCase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTestCase"):
                listener.enterTestCase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTestCase"):
                listener.exitTestCase(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTestCase"):
                return visitor.visitTestCase(self)
            else:
                return visitor.visitChildren(self)

    def testCase(self):
        localctx = FuncTestCaseParser.TestCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_testCase)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 117
            localctx.functionName = self.match(FuncTestCaseParser.Identifier)
            self.state = 118
            self.match(FuncTestCaseParser.OParen)
            self.state = 119
            self.arguments()
            self.state = 120
            self.match(FuncTestCaseParser.CParen)
            self.state = 125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 99:
                self.state = 121
                self.match(FuncTestCaseParser.OBracket)
                self.state = 122
                self.func_options()
                self.state = 123
                self.match(FuncTestCaseParser.CBracket)

            self.state = 127
            self.match(FuncTestCaseParser.Eq)
            self.state = 128
            self.result()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestGroupContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testGroupDescription(self):
            return self.getTypedRuleContext(
                FuncTestCaseParser.TestGroupDescriptionContext, 0
            )

        def testCase(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FuncTestCaseParser.TestCaseContext)
            else:
                return self.getTypedRuleContext(FuncTestCaseParser.TestCaseContext, i)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_testGroup

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTestGroup"):
                listener.enterTestGroup(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTestGroup"):
                listener.exitTestGroup(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTestGroup"):
                return visitor.visitTestGroup(self)
            else:
                return visitor.visitChildren(self)

    def testGroup(self):
        localctx = FuncTestCaseParser.TestGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_testGroup)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 130
            self.testGroupDescription()
            self.state = 132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 131
                self.testCase()
                self.state = 134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 110):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FuncTestCaseParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(FuncTestCaseParser.ArgumentContext, i)

        def Comma(self, i: int = None):
            if i is None:
                return self.getTokens(FuncTestCaseParser.Comma)
            else:
                return self.getToken(FuncTestCaseParser.Comma, i)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_arguments

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArguments"):
                listener.enterArguments(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArguments"):
                listener.exitArguments(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArguments"):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)

    def arguments(self):
        localctx = FuncTestCaseParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_arguments)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 136
            self.argument()
            self.state = 141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 101:
                self.state = 137
                self.match(FuncTestCaseParser.Comma)
                self.state = 138
                self.argument()
                self.state = 143
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self):
            return self.getTypedRuleContext(FuncTestCaseParser.ArgumentContext, 0)

        def substraitError(self):
            return self.getTypedRuleContext(FuncTestCaseParser.SubstraitErrorContext, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_result

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterResult"):
                listener.enterResult(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitResult"):
                listener.exitResult(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitResult"):
                return visitor.visitResult(self)
            else:
                return visitor.visitChildren(self)

    def result(self):
        localctx = FuncTestCaseParser.ResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_result)
        try:
            self.state = 146
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 15, 16, 17, 18, 19, 20, 21, 22, 33, 34, 35, 36]:
                self.enterOuterAlt(localctx, 1)
                self.state = 144
                self.argument()
                pass
            elif token in [6, 7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 145
                self.substraitError()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nullArg(self):
            return self.getTypedRuleContext(FuncTestCaseParser.NullArgContext, 0)

        def i8Arg(self):
            return self.getTypedRuleContext(FuncTestCaseParser.I8ArgContext, 0)

        def i16Arg(self):
            return self.getTypedRuleContext(FuncTestCaseParser.I16ArgContext, 0)

        def i32Arg(self):
            return self.getTypedRuleContext(FuncTestCaseParser.I32ArgContext, 0)

        def i64Arg(self):
            return self.getTypedRuleContext(FuncTestCaseParser.I64ArgContext, 0)

        def fp32Arg(self):
            return self.getTypedRuleContext(FuncTestCaseParser.Fp32ArgContext, 0)

        def fp64Arg(self):
            return self.getTypedRuleContext(FuncTestCaseParser.Fp64ArgContext, 0)

        def booleanArg(self):
            return self.getTypedRuleContext(FuncTestCaseParser.BooleanArgContext, 0)

        def stringArg(self):
            return self.getTypedRuleContext(FuncTestCaseParser.StringArgContext, 0)

        def decimalArg(self):
            return self.getTypedRuleContext(FuncTestCaseParser.DecimalArgContext, 0)

        def dateArg(self):
            return self.getTypedRuleContext(FuncTestCaseParser.DateArgContext, 0)

        def timeArg(self):
            return self.getTypedRuleContext(FuncTestCaseParser.TimeArgContext, 0)

        def timestampArg(self):
            return self.getTypedRuleContext(FuncTestCaseParser.TimestampArgContext, 0)

        def timestampTzArg(self):
            return self.getTypedRuleContext(FuncTestCaseParser.TimestampTzArgContext, 0)

        def intervalYearArg(self):
            return self.getTypedRuleContext(
                FuncTestCaseParser.IntervalYearArgContext, 0
            )

        def intervalDayArg(self):
            return self.getTypedRuleContext(FuncTestCaseParser.IntervalDayArgContext, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_argument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArgument"):
                listener.enterArgument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArgument"):
                listener.exitArgument(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArgument"):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)

    def argument(self):
        localctx = FuncTestCaseParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_argument)
        try:
            self.state = 164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 6, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 148
                self.nullArg()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 149
                self.i8Arg()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 150
                self.i16Arg()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 151
                self.i32Arg()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 152
                self.i64Arg()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 153
                self.fp32Arg()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 154
                self.fp64Arg()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 155
                self.booleanArg()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 156
                self.stringArg()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 157
                self.decimalArg()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 158
                self.dateArg()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 159
                self.timeArg()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 160
                self.timestampArg()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 161
                self.timestampTzArg()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 162
                self.intervalYearArg()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 163
                self.intervalDayArg()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalLiteral(self):
            return self.getToken(FuncTestCaseParser.DecimalLiteral, 0)

        def IntegerLiteral(self):
            return self.getToken(FuncTestCaseParser.IntegerLiteral, 0)

        def floatLiteral(self):
            return self.getTypedRuleContext(FuncTestCaseParser.FloatLiteralContext, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_numericLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumericLiteral"):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumericLiteral"):
                listener.exitNumericLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumericLiteral"):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)

    def numericLiteral(self):
        localctx = FuncTestCaseParser.NumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_numericLiteral)
        try:
            self.state = 169
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 166
                self.match(FuncTestCaseParser.DecimalLiteral)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 167
                self.match(FuncTestCaseParser.IntegerLiteral)
                pass
            elif token in [14, 17]:
                self.enterOuterAlt(localctx, 3)
                self.state = 168
                self.floatLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FloatLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FloatLiteral(self):
            return self.getToken(FuncTestCaseParser.FloatLiteral, 0)

        def NaN(self):
            return self.getToken(FuncTestCaseParser.NaN, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_floatLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFloatLiteral"):
                listener.enterFloatLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFloatLiteral"):
                listener.exitFloatLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFloatLiteral"):
                return visitor.visitFloatLiteral(self)
            else:
                return visitor.visitChildren(self)

    def floatLiteral(self):
        localctx = FuncTestCaseParser.FloatLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_floatLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 171
            _la = self._input.LA(1)
            if not (_la == 14 or _la == 17):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NullArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NullLiteral(self):
            return self.getToken(FuncTestCaseParser.NullLiteral, 0)

        def DoubleColon(self):
            return self.getToken(FuncTestCaseParser.DoubleColon, 0)

        def datatype(self):
            return self.getTypedRuleContext(FuncTestCaseParser.DatatypeContext, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_nullArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNullArg"):
                listener.enterNullArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNullArg"):
                listener.exitNullArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNullArg"):
                return visitor.visitNullArg(self)
            else:
                return visitor.visitChildren(self)

    def nullArg(self):
        localctx = FuncTestCaseParser.NullArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_nullArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 173
            self.match(FuncTestCaseParser.NullLiteral)
            self.state = 174
            self.match(FuncTestCaseParser.DoubleColon)
            self.state = 175
            self.datatype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class I8ArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntegerLiteral(self):
            return self.getToken(FuncTestCaseParser.IntegerLiteral, 0)

        def DoubleColon(self):
            return self.getToken(FuncTestCaseParser.DoubleColon, 0)

        def I8(self):
            return self.getToken(FuncTestCaseParser.I8, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_i8Arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterI8Arg"):
                listener.enterI8Arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitI8Arg"):
                listener.exitI8Arg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitI8Arg"):
                return visitor.visitI8Arg(self)
            else:
                return visitor.visitChildren(self)

    def i8Arg(self):
        localctx = FuncTestCaseParser.I8ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_i8Arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 177
            self.match(FuncTestCaseParser.IntegerLiteral)
            self.state = 178
            self.match(FuncTestCaseParser.DoubleColon)
            self.state = 179
            self.match(FuncTestCaseParser.I8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class I16ArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntegerLiteral(self):
            return self.getToken(FuncTestCaseParser.IntegerLiteral, 0)

        def DoubleColon(self):
            return self.getToken(FuncTestCaseParser.DoubleColon, 0)

        def I16(self):
            return self.getToken(FuncTestCaseParser.I16, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_i16Arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterI16Arg"):
                listener.enterI16Arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitI16Arg"):
                listener.exitI16Arg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitI16Arg"):
                return visitor.visitI16Arg(self)
            else:
                return visitor.visitChildren(self)

    def i16Arg(self):
        localctx = FuncTestCaseParser.I16ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_i16Arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 181
            self.match(FuncTestCaseParser.IntegerLiteral)
            self.state = 182
            self.match(FuncTestCaseParser.DoubleColon)
            self.state = 183
            self.match(FuncTestCaseParser.I16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class I32ArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntegerLiteral(self):
            return self.getToken(FuncTestCaseParser.IntegerLiteral, 0)

        def DoubleColon(self):
            return self.getToken(FuncTestCaseParser.DoubleColon, 0)

        def I32(self):
            return self.getToken(FuncTestCaseParser.I32, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_i32Arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterI32Arg"):
                listener.enterI32Arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitI32Arg"):
                listener.exitI32Arg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitI32Arg"):
                return visitor.visitI32Arg(self)
            else:
                return visitor.visitChildren(self)

    def i32Arg(self):
        localctx = FuncTestCaseParser.I32ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_i32Arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self.match(FuncTestCaseParser.IntegerLiteral)
            self.state = 186
            self.match(FuncTestCaseParser.DoubleColon)
            self.state = 187
            self.match(FuncTestCaseParser.I32)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class I64ArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntegerLiteral(self):
            return self.getToken(FuncTestCaseParser.IntegerLiteral, 0)

        def DoubleColon(self):
            return self.getToken(FuncTestCaseParser.DoubleColon, 0)

        def I64(self):
            return self.getToken(FuncTestCaseParser.I64, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_i64Arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterI64Arg"):
                listener.enterI64Arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitI64Arg"):
                listener.exitI64Arg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitI64Arg"):
                return visitor.visitI64Arg(self)
            else:
                return visitor.visitChildren(self)

    def i64Arg(self):
        localctx = FuncTestCaseParser.I64ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_i64Arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self.match(FuncTestCaseParser.IntegerLiteral)
            self.state = 190
            self.match(FuncTestCaseParser.DoubleColon)
            self.state = 191
            self.match(FuncTestCaseParser.I64)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fp32ArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericLiteral(self):
            return self.getTypedRuleContext(FuncTestCaseParser.NumericLiteralContext, 0)

        def DoubleColon(self):
            return self.getToken(FuncTestCaseParser.DoubleColon, 0)

        def FP32(self):
            return self.getToken(FuncTestCaseParser.FP32, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_fp32Arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFp32Arg"):
                listener.enterFp32Arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFp32Arg"):
                listener.exitFp32Arg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFp32Arg"):
                return visitor.visitFp32Arg(self)
            else:
                return visitor.visitChildren(self)

    def fp32Arg(self):
        localctx = FuncTestCaseParser.Fp32ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_fp32Arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 193
            self.numericLiteral()
            self.state = 194
            self.match(FuncTestCaseParser.DoubleColon)
            self.state = 195
            self.match(FuncTestCaseParser.FP32)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fp64ArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericLiteral(self):
            return self.getTypedRuleContext(FuncTestCaseParser.NumericLiteralContext, 0)

        def DoubleColon(self):
            return self.getToken(FuncTestCaseParser.DoubleColon, 0)

        def FP64(self):
            return self.getToken(FuncTestCaseParser.FP64, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_fp64Arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFp64Arg"):
                listener.enterFp64Arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFp64Arg"):
                listener.exitFp64Arg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFp64Arg"):
                return visitor.visitFp64Arg(self)
            else:
                return visitor.visitChildren(self)

    def fp64Arg(self):
        localctx = FuncTestCaseParser.Fp64ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_fp64Arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self.numericLiteral()
            self.state = 198
            self.match(FuncTestCaseParser.DoubleColon)
            self.state = 199
            self.match(FuncTestCaseParser.FP64)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecimalArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericLiteral(self):
            return self.getTypedRuleContext(FuncTestCaseParser.NumericLiteralContext, 0)

        def DoubleColon(self):
            return self.getToken(FuncTestCaseParser.DoubleColon, 0)

        def decimalType(self):
            return self.getTypedRuleContext(FuncTestCaseParser.DecimalTypeContext, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_decimalArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDecimalArg"):
                listener.enterDecimalArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDecimalArg"):
                listener.exitDecimalArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDecimalArg"):
                return visitor.visitDecimalArg(self)
            else:
                return visitor.visitChildren(self)

    def decimalArg(self):
        localctx = FuncTestCaseParser.DecimalArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_decimalArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 201
            self.numericLiteral()
            self.state = 202
            self.match(FuncTestCaseParser.DoubleColon)
            self.state = 203
            self.decimalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(FuncTestCaseParser.BooleanLiteral, 0)

        def DoubleColon(self):
            return self.getToken(FuncTestCaseParser.DoubleColon, 0)

        def Bool(self):
            return self.getToken(FuncTestCaseParser.Bool, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_booleanArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBooleanArg"):
                listener.enterBooleanArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBooleanArg"):
                listener.exitBooleanArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBooleanArg"):
                return visitor.visitBooleanArg(self)
            else:
                return visitor.visitChildren(self)

    def booleanArg(self):
        localctx = FuncTestCaseParser.BooleanArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_booleanArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 205
            self.match(FuncTestCaseParser.BooleanLiteral)
            self.state = 206
            self.match(FuncTestCaseParser.DoubleColon)
            self.state = 207
            self.match(FuncTestCaseParser.Bool)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(FuncTestCaseParser.StringLiteral, 0)

        def DoubleColon(self):
            return self.getToken(FuncTestCaseParser.DoubleColon, 0)

        def Str(self):
            return self.getToken(FuncTestCaseParser.Str, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_stringArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStringArg"):
                listener.enterStringArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStringArg"):
                listener.exitStringArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStringArg"):
                return visitor.visitStringArg(self)
            else:
                return visitor.visitChildren(self)

    def stringArg(self):
        localctx = FuncTestCaseParser.StringArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_stringArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self.match(FuncTestCaseParser.StringLiteral)
            self.state = 210
            self.match(FuncTestCaseParser.DoubleColon)
            self.state = 211
            self.match(FuncTestCaseParser.Str)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DateArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DateLiteral(self):
            return self.getToken(FuncTestCaseParser.DateLiteral, 0)

        def DoubleColon(self):
            return self.getToken(FuncTestCaseParser.DoubleColon, 0)

        def Date(self):
            return self.getToken(FuncTestCaseParser.Date, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_dateArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDateArg"):
                listener.enterDateArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDateArg"):
                listener.exitDateArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDateArg"):
                return visitor.visitDateArg(self)
            else:
                return visitor.visitChildren(self)

    def dateArg(self):
        localctx = FuncTestCaseParser.DateArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_dateArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            self.match(FuncTestCaseParser.DateLiteral)
            self.state = 214
            self.match(FuncTestCaseParser.DoubleColon)
            self.state = 215
            self.match(FuncTestCaseParser.Date)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TimeLiteral(self):
            return self.getToken(FuncTestCaseParser.TimeLiteral, 0)

        def DoubleColon(self):
            return self.getToken(FuncTestCaseParser.DoubleColon, 0)

        def Time(self):
            return self.getToken(FuncTestCaseParser.Time, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_timeArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimeArg"):
                listener.enterTimeArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimeArg"):
                listener.exitTimeArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimeArg"):
                return visitor.visitTimeArg(self)
            else:
                return visitor.visitChildren(self)

    def timeArg(self):
        localctx = FuncTestCaseParser.TimeArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_timeArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self.match(FuncTestCaseParser.TimeLiteral)
            self.state = 218
            self.match(FuncTestCaseParser.DoubleColon)
            self.state = 219
            self.match(FuncTestCaseParser.Time)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimestampArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TimestampLiteral(self):
            return self.getToken(FuncTestCaseParser.TimestampLiteral, 0)

        def DoubleColon(self):
            return self.getToken(FuncTestCaseParser.DoubleColon, 0)

        def Ts(self):
            return self.getToken(FuncTestCaseParser.Ts, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_timestampArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimestampArg"):
                listener.enterTimestampArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimestampArg"):
                listener.exitTimestampArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimestampArg"):
                return visitor.visitTimestampArg(self)
            else:
                return visitor.visitChildren(self)

    def timestampArg(self):
        localctx = FuncTestCaseParser.TimestampArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_timestampArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self.match(FuncTestCaseParser.TimestampLiteral)
            self.state = 222
            self.match(FuncTestCaseParser.DoubleColon)
            self.state = 223
            self.match(FuncTestCaseParser.Ts)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimestampTzArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TimestampTzLiteral(self):
            return self.getToken(FuncTestCaseParser.TimestampTzLiteral, 0)

        def DoubleColon(self):
            return self.getToken(FuncTestCaseParser.DoubleColon, 0)

        def TsTZ(self):
            return self.getToken(FuncTestCaseParser.TsTZ, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_timestampTzArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimestampTzArg"):
                listener.enterTimestampTzArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimestampTzArg"):
                listener.exitTimestampTzArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimestampTzArg"):
                return visitor.visitTimestampTzArg(self)
            else:
                return visitor.visitChildren(self)

    def timestampTzArg(self):
        localctx = FuncTestCaseParser.TimestampTzArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_timestampTzArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.match(FuncTestCaseParser.TimestampTzLiteral)
            self.state = 226
            self.match(FuncTestCaseParser.DoubleColon)
            self.state = 227
            self.match(FuncTestCaseParser.TsTZ)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalYearArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntervalYearLiteral(self):
            return self.getToken(FuncTestCaseParser.IntervalYearLiteral, 0)

        def DoubleColon(self):
            return self.getToken(FuncTestCaseParser.DoubleColon, 0)

        def IYear(self):
            return self.getToken(FuncTestCaseParser.IYear, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_intervalYearArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntervalYearArg"):
                listener.enterIntervalYearArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntervalYearArg"):
                listener.exitIntervalYearArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIntervalYearArg"):
                return visitor.visitIntervalYearArg(self)
            else:
                return visitor.visitChildren(self)

    def intervalYearArg(self):
        localctx = FuncTestCaseParser.IntervalYearArgContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 52, self.RULE_intervalYearArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.match(FuncTestCaseParser.IntervalYearLiteral)
            self.state = 230
            self.match(FuncTestCaseParser.DoubleColon)
            self.state = 231
            self.match(FuncTestCaseParser.IYear)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalDayArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntervalDayLiteral(self):
            return self.getToken(FuncTestCaseParser.IntervalDayLiteral, 0)

        def DoubleColon(self):
            return self.getToken(FuncTestCaseParser.DoubleColon, 0)

        def IDay(self):
            return self.getToken(FuncTestCaseParser.IDay, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_intervalDayArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntervalDayArg"):
                listener.enterIntervalDayArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntervalDayArg"):
                listener.exitIntervalDayArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIntervalDayArg"):
                return visitor.visitIntervalDayArg(self)
            else:
                return visitor.visitChildren(self)

    def intervalDayArg(self):
        localctx = FuncTestCaseParser.IntervalDayArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_intervalDayArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.match(FuncTestCaseParser.IntervalDayLiteral)
            self.state = 234
            self.match(FuncTestCaseParser.DoubleColon)
            self.state = 235
            self.match(FuncTestCaseParser.IDay)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalYearLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.years = None  # Token
            self.months = None  # Token

        def PeriodPrefix(self):
            return self.getToken(FuncTestCaseParser.PeriodPrefix, 0)

        def YearPrefix(self):
            return self.getToken(FuncTestCaseParser.YearPrefix, 0)

        def IntegerLiteral(self, i: int = None):
            if i is None:
                return self.getTokens(FuncTestCaseParser.IntegerLiteral)
            else:
                return self.getToken(FuncTestCaseParser.IntegerLiteral, i)

        def MSuffix(self):
            return self.getToken(FuncTestCaseParser.MSuffix, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_intervalYearLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntervalYearLiteral"):
                listener.enterIntervalYearLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntervalYearLiteral"):
                listener.exitIntervalYearLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIntervalYearLiteral"):
                return visitor.visitIntervalYearLiteral(self)
            else:
                return visitor.visitChildren(self)

    def intervalYearLiteral(self):
        localctx = FuncTestCaseParser.IntervalYearLiteralContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 56, self.RULE_intervalYearLiteral)
        self._la = 0  # Token type
        try:
            self.state = 248
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 9, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 237
                self.match(FuncTestCaseParser.PeriodPrefix)

                self.state = 238
                localctx.years = self.match(FuncTestCaseParser.IntegerLiteral)
                self.state = 239
                self.match(FuncTestCaseParser.YearPrefix)
                self.state = 243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 15:
                    self.state = 241
                    localctx.months = self.match(FuncTestCaseParser.IntegerLiteral)
                    self.state = 242
                    self.match(FuncTestCaseParser.MSuffix)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 245
                self.match(FuncTestCaseParser.PeriodPrefix)

                self.state = 246
                localctx.months = self.match(FuncTestCaseParser.IntegerLiteral)
                self.state = 247
                self.match(FuncTestCaseParser.MSuffix)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalDayLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.days = None  # Token

        def PeriodPrefix(self):
            return self.getToken(FuncTestCaseParser.PeriodPrefix, 0)

        def DaySuffix(self):
            return self.getToken(FuncTestCaseParser.DaySuffix, 0)

        def IntegerLiteral(self):
            return self.getToken(FuncTestCaseParser.IntegerLiteral, 0)

        def TimePrefix(self):
            return self.getToken(FuncTestCaseParser.TimePrefix, 0)

        def timeInterval(self):
            return self.getTypedRuleContext(FuncTestCaseParser.TimeIntervalContext, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_intervalDayLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntervalDayLiteral"):
                listener.enterIntervalDayLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntervalDayLiteral"):
                listener.exitIntervalDayLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIntervalDayLiteral"):
                return visitor.visitIntervalDayLiteral(self)
            else:
                return visitor.visitChildren(self)

    def intervalDayLiteral(self):
        localctx = FuncTestCaseParser.IntervalDayLiteralContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 58, self.RULE_intervalDayLiteral)
        self._la = 0  # Token type
        try:
            self.state = 261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 11, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 250
                self.match(FuncTestCaseParser.PeriodPrefix)

                self.state = 251
                localctx.days = self.match(FuncTestCaseParser.IntegerLiteral)
                self.state = 252
                self.match(FuncTestCaseParser.DaySuffix)
                self.state = 256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 24:
                    self.state = 254
                    self.match(FuncTestCaseParser.TimePrefix)
                    self.state = 255
                    self.timeInterval()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 258
                self.match(FuncTestCaseParser.PeriodPrefix)
                self.state = 259
                self.match(FuncTestCaseParser.TimePrefix)
                self.state = 260
                self.timeInterval()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeIntervalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hours = None  # Token
            self.minutes = None  # Token
            self.seconds = None  # Token
            self.fractionalSeconds = None  # Token

        def HourSuffix(self):
            return self.getToken(FuncTestCaseParser.HourSuffix, 0)

        def IntegerLiteral(self, i: int = None):
            if i is None:
                return self.getTokens(FuncTestCaseParser.IntegerLiteral)
            else:
                return self.getToken(FuncTestCaseParser.IntegerLiteral, i)

        def MSuffix(self):
            return self.getToken(FuncTestCaseParser.MSuffix, 0)

        def SecondSuffix(self):
            return self.getToken(FuncTestCaseParser.SecondSuffix, 0)

        def FractionalSecondSuffix(self):
            return self.getToken(FuncTestCaseParser.FractionalSecondSuffix, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_timeInterval

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimeInterval"):
                listener.enterTimeInterval(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimeInterval"):
                listener.exitTimeInterval(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimeInterval"):
                return visitor.visitTimeInterval(self)
            else:
                return visitor.visitChildren(self)

    def timeInterval(self):
        localctx = FuncTestCaseParser.TimeIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_timeInterval)
        self._la = 0  # Token type
        try:
            self.state = 295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 18, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 263
                localctx.hours = self.match(FuncTestCaseParser.IntegerLiteral)
                self.state = 264
                self.match(FuncTestCaseParser.HourSuffix)
                self.state = 267
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 12, self._ctx)
                if la_ == 1:
                    self.state = 265
                    localctx.minutes = self.match(FuncTestCaseParser.IntegerLiteral)
                    self.state = 266
                    self.match(FuncTestCaseParser.MSuffix)

                self.state = 271
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
                if la_ == 1:
                    self.state = 269
                    localctx.seconds = self.match(FuncTestCaseParser.IntegerLiteral)
                    self.state = 270
                    self.match(FuncTestCaseParser.SecondSuffix)

                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 15:
                    self.state = 273
                    localctx.fractionalSeconds = self.match(
                        FuncTestCaseParser.IntegerLiteral
                    )
                    self.state = 274
                    self.match(FuncTestCaseParser.FractionalSecondSuffix)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 277
                localctx.minutes = self.match(FuncTestCaseParser.IntegerLiteral)
                self.state = 278
                self.match(FuncTestCaseParser.MSuffix)
                self.state = 281
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 15, self._ctx)
                if la_ == 1:
                    self.state = 279
                    localctx.seconds = self.match(FuncTestCaseParser.IntegerLiteral)
                    self.state = 280
                    self.match(FuncTestCaseParser.SecondSuffix)

                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 15:
                    self.state = 283
                    localctx.fractionalSeconds = self.match(
                        FuncTestCaseParser.IntegerLiteral
                    )
                    self.state = 284
                    self.match(FuncTestCaseParser.FractionalSecondSuffix)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 287
                localctx.seconds = self.match(FuncTestCaseParser.IntegerLiteral)
                self.state = 288
                self.match(FuncTestCaseParser.SecondSuffix)
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 15:
                    self.state = 289
                    localctx.fractionalSeconds = self.match(
                        FuncTestCaseParser.IntegerLiteral
                    )
                    self.state = 290
                    self.match(FuncTestCaseParser.FractionalSecondSuffix)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 293
                localctx.fractionalSeconds = self.match(
                    FuncTestCaseParser.IntegerLiteral
                )
                self.state = 294
                self.match(FuncTestCaseParser.FractionalSecondSuffix)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatatypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarType(self):
            return self.getTypedRuleContext(FuncTestCaseParser.ScalarTypeContext, 0)

        def parameterizedType(self):
            return self.getTypedRuleContext(
                FuncTestCaseParser.ParameterizedTypeContext, 0
            )

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_datatype

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDatatype"):
                listener.enterDatatype(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDatatype"):
                listener.exitDatatype(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDatatype"):
                return visitor.visitDatatype(self)
            else:
                return visitor.visitChildren(self)

    def datatype(self):
        localctx = FuncTestCaseParser.DatatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_datatype)
        try:
            self.state = 299
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                43,
                44,
                45,
                46,
                47,
                48,
                50,
                53,
                54,
                57,
                68,
                69,
                70,
                72,
                73,
                74,
                75,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 297
                self.scalarType()
                pass
            elif token in [76, 77, 78, 79, 80, 81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 298
                self.parameterizedType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScalarTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_scalarType

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class DateContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Date(self):
            return self.getToken(FuncTestCaseParser.Date, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDate"):
                listener.enterDate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDate"):
                listener.exitDate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDate"):
                return visitor.visitDate(self)
            else:
                return visitor.visitChildren(self)

    class StringContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Str(self):
            return self.getToken(FuncTestCaseParser.Str, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterString"):
                listener.enterString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitString"):
                listener.exitString(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitString"):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)

    class I64Context(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def I64(self):
            return self.getToken(FuncTestCaseParser.I64, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterI64"):
                listener.enterI64(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitI64"):
                listener.exitI64(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitI64"):
                return visitor.visitI64(self)
            else:
                return visitor.visitChildren(self)

    class UserDefinedContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UserDefined(self):
            return self.getToken(FuncTestCaseParser.UserDefined, 0)

        def Identifier(self):
            return self.getToken(FuncTestCaseParser.Identifier, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUserDefined"):
                listener.enterUserDefined(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUserDefined"):
                listener.exitUserDefined(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUserDefined"):
                return visitor.visitUserDefined(self)
            else:
                return visitor.visitChildren(self)

    class I32Context(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def I32(self):
            return self.getToken(FuncTestCaseParser.I32, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterI32"):
                listener.enterI32(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitI32"):
                listener.exitI32(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitI32"):
                return visitor.visitI32(self)
            else:
                return visitor.visitChildren(self)

    class IntervalYearContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IYear(self):
            return self.getToken(FuncTestCaseParser.IYear, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntervalYear"):
                listener.enterIntervalYear(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntervalYear"):
                listener.exitIntervalYear(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIntervalYear"):
                return visitor.visitIntervalYear(self)
            else:
                return visitor.visitChildren(self)

    class UuidContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UUID(self):
            return self.getToken(FuncTestCaseParser.UUID, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUuid"):
                listener.enterUuid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUuid"):
                listener.exitUuid(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUuid"):
                return visitor.visitUuid(self)
            else:
                return visitor.visitChildren(self)

    class I8Context(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def I8(self):
            return self.getToken(FuncTestCaseParser.I8, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterI8"):
                listener.enterI8(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitI8"):
                listener.exitI8(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitI8"):
                return visitor.visitI8(self)
            else:
                return visitor.visitChildren(self)

    class I16Context(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def I16(self):
            return self.getToken(FuncTestCaseParser.I16, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterI16"):
                listener.enterI16(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitI16"):
                listener.exitI16(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitI16"):
                return visitor.visitI16(self)
            else:
                return visitor.visitChildren(self)

    class BinaryContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Binary(self):
            return self.getToken(FuncTestCaseParser.Binary, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBinary"):
                listener.enterBinary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBinary"):
                listener.exitBinary(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBinary"):
                return visitor.visitBinary(self)
            else:
                return visitor.visitChildren(self)

    class IntervalDayContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDay(self):
            return self.getToken(FuncTestCaseParser.IDay, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntervalDay"):
                listener.enterIntervalDay(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntervalDay"):
                listener.exitIntervalDay(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIntervalDay"):
                return visitor.visitIntervalDay(self)
            else:
                return visitor.visitChildren(self)

    class Fp64Context(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FP64(self):
            return self.getToken(FuncTestCaseParser.FP64, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFp64"):
                listener.enterFp64(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFp64"):
                listener.exitFp64(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFp64"):
                return visitor.visitFp64(self)
            else:
                return visitor.visitChildren(self)

    class Fp32Context(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FP32(self):
            return self.getToken(FuncTestCaseParser.FP32, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFp32"):
                listener.enterFp32(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFp32"):
                listener.exitFp32(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFp32"):
                return visitor.visitFp32(self)
            else:
                return visitor.visitChildren(self)

    class TimeContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Time(self):
            return self.getToken(FuncTestCaseParser.Time, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTime"):
                listener.enterTime(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTime"):
                listener.exitTime(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTime"):
                return visitor.visitTime(self)
            else:
                return visitor.visitChildren(self)

    class BooleanContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Bool(self):
            return self.getToken(FuncTestCaseParser.Bool, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBoolean"):
                listener.enterBoolean(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBoolean"):
                listener.exitBoolean(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBoolean"):
                return visitor.visitBoolean(self)
            else:
                return visitor.visitChildren(self)

    class TimestampContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Ts(self):
            return self.getToken(FuncTestCaseParser.Ts, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimestamp"):
                listener.enterTimestamp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimestamp"):
                listener.exitTimestamp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimestamp"):
                return visitor.visitTimestamp(self)
            else:
                return visitor.visitChildren(self)

    class TimestampTzContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TsTZ(self):
            return self.getToken(FuncTestCaseParser.TsTZ, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimestampTz"):
                listener.enterTimestampTz(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimestampTz"):
                listener.exitTimestampTz(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimestampTz"):
                return visitor.visitTimestampTz(self)
            else:
                return visitor.visitChildren(self)

    def scalarType(self):
        localctx = FuncTestCaseParser.ScalarTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_scalarType)
        try:
            self.state = 319
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                localctx = FuncTestCaseParser.BooleanContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 301
                self.match(FuncTestCaseParser.Bool)
                pass
            elif token in [43]:
                localctx = FuncTestCaseParser.I8Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 302
                self.match(FuncTestCaseParser.I8)
                pass
            elif token in [44]:
                localctx = FuncTestCaseParser.I16Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 303
                self.match(FuncTestCaseParser.I16)
                pass
            elif token in [45]:
                localctx = FuncTestCaseParser.I32Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 304
                self.match(FuncTestCaseParser.I32)
                pass
            elif token in [46]:
                localctx = FuncTestCaseParser.I64Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 305
                self.match(FuncTestCaseParser.I64)
                pass
            elif token in [47]:
                localctx = FuncTestCaseParser.Fp32Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 306
                self.match(FuncTestCaseParser.FP32)
                pass
            elif token in [48]:
                localctx = FuncTestCaseParser.Fp64Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 307
                self.match(FuncTestCaseParser.FP64)
                pass
            elif token in [70]:
                localctx = FuncTestCaseParser.StringContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 308
                self.match(FuncTestCaseParser.Str)
                pass
            elif token in [50]:
                localctx = FuncTestCaseParser.BinaryContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 309
                self.match(FuncTestCaseParser.Binary)
                pass
            elif token in [72]:
                localctx = FuncTestCaseParser.TimestampContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 310
                self.match(FuncTestCaseParser.Ts)
                pass
            elif token in [73]:
                localctx = FuncTestCaseParser.TimestampTzContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 311
                self.match(FuncTestCaseParser.TsTZ)
                pass
            elif token in [53]:
                localctx = FuncTestCaseParser.DateContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 312
                self.match(FuncTestCaseParser.Date)
                pass
            elif token in [54]:
                localctx = FuncTestCaseParser.TimeContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 313
                self.match(FuncTestCaseParser.Time)
                pass
            elif token in [75]:
                localctx = FuncTestCaseParser.IntervalDayContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 314
                self.match(FuncTestCaseParser.IDay)
                pass
            elif token in [74]:
                localctx = FuncTestCaseParser.IntervalYearContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 315
                self.match(FuncTestCaseParser.IYear)
                pass
            elif token in [57]:
                localctx = FuncTestCaseParser.UuidContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 316
                self.match(FuncTestCaseParser.UUID)
                pass
            elif token in [68]:
                localctx = FuncTestCaseParser.UserDefinedContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 317
                self.match(FuncTestCaseParser.UserDefined)
                self.state = 318
                self.match(FuncTestCaseParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FixedCharTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_fixedCharType

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class FixedCharContext(FixedCharTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.FixedCharTypeContext
            super().__init__(parser)
            self.isnull = None  # Token
            self.len_ = None  # NumericParameterContext
            self.copyFrom(ctx)

        def FChar(self):
            return self.getToken(FuncTestCaseParser.FChar, 0)

        def OAngleBracket(self):
            return self.getToken(FuncTestCaseParser.OAngleBracket, 0)

        def CAngleBracket(self):
            return self.getToken(FuncTestCaseParser.CAngleBracket, 0)

        def numericParameter(self):
            return self.getTypedRuleContext(
                FuncTestCaseParser.NumericParameterContext, 0
            )

        def QMark(self):
            return self.getToken(FuncTestCaseParser.QMark, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFixedChar"):
                listener.enterFixedChar(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFixedChar"):
                listener.exitFixedChar(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFixedChar"):
                return visitor.visitFixedChar(self)
            else:
                return visitor.visitChildren(self)

    def fixedCharType(self):
        localctx = FuncTestCaseParser.FixedCharTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_fixedCharType)
        self._la = 0  # Token type
        try:
            localctx = FuncTestCaseParser.FixedCharContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self.match(FuncTestCaseParser.FChar)
            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 103:
                self.state = 322
                localctx.isnull = self.match(FuncTestCaseParser.QMark)

            self.state = 325
            self.match(FuncTestCaseParser.OAngleBracket)
            self.state = 326
            localctx.len_ = self.numericParameter()
            self.state = 327
            self.match(FuncTestCaseParser.CAngleBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarCharTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_varCharType

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class VarCharContext(VarCharTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.VarCharTypeContext
            super().__init__(parser)
            self.isnull = None  # Token
            self.len_ = None  # NumericParameterContext
            self.copyFrom(ctx)

        def VChar(self):
            return self.getToken(FuncTestCaseParser.VChar, 0)

        def OAngleBracket(self):
            return self.getToken(FuncTestCaseParser.OAngleBracket, 0)

        def CAngleBracket(self):
            return self.getToken(FuncTestCaseParser.CAngleBracket, 0)

        def numericParameter(self):
            return self.getTypedRuleContext(
                FuncTestCaseParser.NumericParameterContext, 0
            )

        def QMark(self):
            return self.getToken(FuncTestCaseParser.QMark, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVarChar"):
                listener.enterVarChar(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVarChar"):
                listener.exitVarChar(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVarChar"):
                return visitor.visitVarChar(self)
            else:
                return visitor.visitChildren(self)

    def varCharType(self):
        localctx = FuncTestCaseParser.VarCharTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_varCharType)
        self._la = 0  # Token type
        try:
            localctx = FuncTestCaseParser.VarCharContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            self.match(FuncTestCaseParser.VChar)
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 103:
                self.state = 330
                localctx.isnull = self.match(FuncTestCaseParser.QMark)

            self.state = 333
            self.match(FuncTestCaseParser.OAngleBracket)
            self.state = 334
            localctx.len_ = self.numericParameter()
            self.state = 335
            self.match(FuncTestCaseParser.CAngleBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FixedBinaryTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_fixedBinaryType

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class FixedBinaryContext(FixedBinaryTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.FixedBinaryTypeContext
            super().__init__(parser)
            self.isnull = None  # Token
            self.len_ = None  # NumericParameterContext
            self.copyFrom(ctx)

        def FBin(self):
            return self.getToken(FuncTestCaseParser.FBin, 0)

        def OAngleBracket(self):
            return self.getToken(FuncTestCaseParser.OAngleBracket, 0)

        def CAngleBracket(self):
            return self.getToken(FuncTestCaseParser.CAngleBracket, 0)

        def numericParameter(self):
            return self.getTypedRuleContext(
                FuncTestCaseParser.NumericParameterContext, 0
            )

        def QMark(self):
            return self.getToken(FuncTestCaseParser.QMark, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFixedBinary"):
                listener.enterFixedBinary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFixedBinary"):
                listener.exitFixedBinary(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFixedBinary"):
                return visitor.visitFixedBinary(self)
            else:
                return visitor.visitChildren(self)

    def fixedBinaryType(self):
        localctx = FuncTestCaseParser.FixedBinaryTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 70, self.RULE_fixedBinaryType)
        self._la = 0  # Token type
        try:
            localctx = FuncTestCaseParser.FixedBinaryContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.match(FuncTestCaseParser.FBin)
            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 103:
                self.state = 338
                localctx.isnull = self.match(FuncTestCaseParser.QMark)

            self.state = 341
            self.match(FuncTestCaseParser.OAngleBracket)
            self.state = 342
            localctx.len_ = self.numericParameter()
            self.state = 343
            self.match(FuncTestCaseParser.CAngleBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecimalTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_decimalType

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class DecimalContext(DecimalTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.DecimalTypeContext
            super().__init__(parser)
            self.isnull = None  # Token
            self.precision = None  # NumericParameterContext
            self.scale = None  # NumericParameterContext
            self.copyFrom(ctx)

        def Dec(self):
            return self.getToken(FuncTestCaseParser.Dec, 0)

        def OAngleBracket(self):
            return self.getToken(FuncTestCaseParser.OAngleBracket, 0)

        def Comma(self):
            return self.getToken(FuncTestCaseParser.Comma, 0)

        def CAngleBracket(self):
            return self.getToken(FuncTestCaseParser.CAngleBracket, 0)

        def QMark(self):
            return self.getToken(FuncTestCaseParser.QMark, 0)

        def numericParameter(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    FuncTestCaseParser.NumericParameterContext
                )
            else:
                return self.getTypedRuleContext(
                    FuncTestCaseParser.NumericParameterContext, i
                )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDecimal"):
                listener.enterDecimal(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDecimal"):
                listener.exitDecimal(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDecimal"):
                return visitor.visitDecimal(self)
            else:
                return visitor.visitChildren(self)

    def decimalType(self):
        localctx = FuncTestCaseParser.DecimalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_decimalType)
        self._la = 0  # Token type
        try:
            localctx = FuncTestCaseParser.DecimalContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(FuncTestCaseParser.Dec)
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 103:
                self.state = 346
                localctx.isnull = self.match(FuncTestCaseParser.QMark)

            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 31:
                self.state = 349
                self.match(FuncTestCaseParser.OAngleBracket)
                self.state = 350
                localctx.precision = self.numericParameter()
                self.state = 351
                self.match(FuncTestCaseParser.Comma)
                self.state = 352
                localctx.scale = self.numericParameter()
                self.state = 353
                self.match(FuncTestCaseParser.CAngleBracket)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrecisionTimestampTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_precisionTimestampType

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class PrecisionTimestampContext(PrecisionTimestampTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.PrecisionTimestampTypeContext
            super().__init__(parser)
            self.isnull = None  # Token
            self.precision = None  # NumericParameterContext
            self.copyFrom(ctx)

        def PTs(self):
            return self.getToken(FuncTestCaseParser.PTs, 0)

        def OAngleBracket(self):
            return self.getToken(FuncTestCaseParser.OAngleBracket, 0)

        def CAngleBracket(self):
            return self.getToken(FuncTestCaseParser.CAngleBracket, 0)

        def numericParameter(self):
            return self.getTypedRuleContext(
                FuncTestCaseParser.NumericParameterContext, 0
            )

        def QMark(self):
            return self.getToken(FuncTestCaseParser.QMark, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrecisionTimestamp"):
                listener.enterPrecisionTimestamp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrecisionTimestamp"):
                listener.exitPrecisionTimestamp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrecisionTimestamp"):
                return visitor.visitPrecisionTimestamp(self)
            else:
                return visitor.visitChildren(self)

    def precisionTimestampType(self):
        localctx = FuncTestCaseParser.PrecisionTimestampTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 74, self.RULE_precisionTimestampType)
        self._la = 0  # Token type
        try:
            localctx = FuncTestCaseParser.PrecisionTimestampContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(FuncTestCaseParser.PTs)
            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 103:
                self.state = 358
                localctx.isnull = self.match(FuncTestCaseParser.QMark)

            self.state = 361
            self.match(FuncTestCaseParser.OAngleBracket)
            self.state = 362
            localctx.precision = self.numericParameter()
            self.state = 363
            self.match(FuncTestCaseParser.CAngleBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrecisionTimestampTZTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_precisionTimestampTZType

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class PrecisionTimestampTZContext(PrecisionTimestampTZTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.PrecisionTimestampTZTypeContext
            super().__init__(parser)
            self.isnull = None  # Token
            self.precision = None  # NumericParameterContext
            self.copyFrom(ctx)

        def PTsTZ(self):
            return self.getToken(FuncTestCaseParser.PTsTZ, 0)

        def OAngleBracket(self):
            return self.getToken(FuncTestCaseParser.OAngleBracket, 0)

        def CAngleBracket(self):
            return self.getToken(FuncTestCaseParser.CAngleBracket, 0)

        def numericParameter(self):
            return self.getTypedRuleContext(
                FuncTestCaseParser.NumericParameterContext, 0
            )

        def QMark(self):
            return self.getToken(FuncTestCaseParser.QMark, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrecisionTimestampTZ"):
                listener.enterPrecisionTimestampTZ(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrecisionTimestampTZ"):
                listener.exitPrecisionTimestampTZ(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrecisionTimestampTZ"):
                return visitor.visitPrecisionTimestampTZ(self)
            else:
                return visitor.visitChildren(self)

    def precisionTimestampTZType(self):
        localctx = FuncTestCaseParser.PrecisionTimestampTZTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 76, self.RULE_precisionTimestampTZType)
        self._la = 0  # Token type
        try:
            localctx = FuncTestCaseParser.PrecisionTimestampTZContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(FuncTestCaseParser.PTsTZ)
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 103:
                self.state = 366
                localctx.isnull = self.match(FuncTestCaseParser.QMark)

            self.state = 369
            self.match(FuncTestCaseParser.OAngleBracket)
            self.state = 370
            localctx.precision = self.numericParameter()
            self.state = 371
            self.match(FuncTestCaseParser.CAngleBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterizedTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixedCharType(self):
            return self.getTypedRuleContext(FuncTestCaseParser.FixedCharTypeContext, 0)

        def varCharType(self):
            return self.getTypedRuleContext(FuncTestCaseParser.VarCharTypeContext, 0)

        def fixedBinaryType(self):
            return self.getTypedRuleContext(
                FuncTestCaseParser.FixedBinaryTypeContext, 0
            )

        def decimalType(self):
            return self.getTypedRuleContext(FuncTestCaseParser.DecimalTypeContext, 0)

        def precisionTimestampType(self):
            return self.getTypedRuleContext(
                FuncTestCaseParser.PrecisionTimestampTypeContext, 0
            )

        def precisionTimestampTZType(self):
            return self.getTypedRuleContext(
                FuncTestCaseParser.PrecisionTimestampTZTypeContext, 0
            )

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_parameterizedType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterizedType"):
                listener.enterParameterizedType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterizedType"):
                listener.exitParameterizedType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameterizedType"):
                return visitor.visitParameterizedType(self)
            else:
                return visitor.visitChildren(self)

    def parameterizedType(self):
        localctx = FuncTestCaseParser.ParameterizedTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 78, self.RULE_parameterizedType)
        try:
            self.state = 379
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 373
                self.fixedCharType()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 374
                self.varCharType()
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 3)
                self.state = 375
                self.fixedBinaryType()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 4)
                self.state = 376
                self.decimalType()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 5)
                self.state = 377
                self.precisionTimestampType()
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 6)
                self.state = 378
                self.precisionTimestampTZType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericParameterContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_numericParameter

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class IntegerLiteralContext(NumericParameterContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a FuncTestCaseParser.NumericParameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IntegerLiteral(self):
            return self.getToken(FuncTestCaseParser.IntegerLiteral, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntegerLiteral"):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntegerLiteral"):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIntegerLiteral"):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)

    def numericParameter(self):
        localctx = FuncTestCaseParser.NumericParameterContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 80, self.RULE_numericParameter)
        try:
            localctx = FuncTestCaseParser.IntegerLiteralContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(FuncTestCaseParser.IntegerLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubstraitErrorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ErrorResult(self):
            return self.getToken(FuncTestCaseParser.ErrorResult, 0)

        def UndefineResult(self):
            return self.getToken(FuncTestCaseParser.UndefineResult, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_substraitError

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubstraitError"):
                listener.enterSubstraitError(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubstraitError"):
                listener.exitSubstraitError(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSubstraitError"):
                return visitor.visitSubstraitError(self)
            else:
                return visitor.visitChildren(self)

    def substraitError(self):
        localctx = FuncTestCaseParser.SubstraitErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_substraitError)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            _la = self._input.LA(1)
            if not (_la == 6 or _la == 7):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_optionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def option_name(self):
            return self.getTypedRuleContext(FuncTestCaseParser.Option_nameContext, 0)

        def Colon(self):
            return self.getToken(FuncTestCaseParser.Colon, 0)

        def option_value(self):
            return self.getTypedRuleContext(FuncTestCaseParser.Option_valueContext, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_func_option

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunc_option"):
                listener.enterFunc_option(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunc_option"):
                listener.exitFunc_option(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunc_option"):
                return visitor.visitFunc_option(self)
            else:
                return visitor.visitChildren(self)

    def func_option(self):
        localctx = FuncTestCaseParser.Func_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_func_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.option_name()
            self.state = 386
            self.match(FuncTestCaseParser.Colon)
            self.state = 387
            self.option_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Option_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Overflow(self):
            return self.getToken(FuncTestCaseParser.Overflow, 0)

        def Rounding(self):
            return self.getToken(FuncTestCaseParser.Rounding, 0)

        def Identifier(self):
            return self.getToken(FuncTestCaseParser.Identifier, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_option_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOption_name"):
                listener.enterOption_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOption_name"):
                listener.exitOption_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOption_name"):
                return visitor.visitOption_name(self)
            else:
                return visitor.visitChildren(self)

    def option_name(self):
        localctx = FuncTestCaseParser.Option_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_option_name)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            _la = self._input.LA(1)
            if not (_la == 8 or _la == 9 or _la == 110):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Option_valueContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Error(self):
            return self.getToken(FuncTestCaseParser.Error, 0)

        def Saturate(self):
            return self.getToken(FuncTestCaseParser.Saturate, 0)

        def Silent(self):
            return self.getToken(FuncTestCaseParser.Silent, 0)

        def TieToEven(self):
            return self.getToken(FuncTestCaseParser.TieToEven, 0)

        def NaN(self):
            return self.getToken(FuncTestCaseParser.NaN, 0)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_option_value

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOption_value"):
                listener.enterOption_value(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOption_value"):
                listener.exitOption_value(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOption_value"):
                return visitor.visitOption_value(self)
            else:
                return visitor.visitChildren(self)

    def option_value(self):
        localctx = FuncTestCaseParser.Option_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_option_value)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 31744) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_optionsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_option(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(FuncTestCaseParser.Func_optionContext)
            else:
                return self.getTypedRuleContext(
                    FuncTestCaseParser.Func_optionContext, i
                )

        def Comma(self, i: int = None):
            if i is None:
                return self.getTokens(FuncTestCaseParser.Comma)
            else:
                return self.getToken(FuncTestCaseParser.Comma, i)

        def getRuleIndex(self):
            return FuncTestCaseParser.RULE_func_options

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunc_options"):
                listener.enterFunc_options(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunc_options"):
                listener.exitFunc_options(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunc_options"):
                return visitor.visitFunc_options(self)
            else:
                return visitor.visitChildren(self)

    def func_options(self):
        localctx = FuncTestCaseParser.Func_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_func_options)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.func_option()
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 101:
                self.state = 394
                self.match(FuncTestCaseParser.Comma)
                self.state = 395
                self.func_option()
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx
